<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang_1998&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-02T13:38:20.036Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yangzixu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://yoursite.com/2018/07/02/linux1-16/"/>
    <id>http://yoursite.com/2018/07/02/linux1-16/</id>
    <published>2018-07-02T13:37:44.000Z</published>
    <updated>2018-07-02T13:38:20.036Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="ch-1"><a href="#ch-1" class="headerlink" title="ch_1"></a><strong>ch_1</strong></h3><p><strong>Linux之父：林纳斯·托瓦兹</strong></p><p>发布于：GPL协议</p><p><strong>version:Ubuntu 16.04</strong></p><p>发行版本：Ubuntu，CentOS，RedHat</p><p>Ubuntu基于Debian,Debian是社区开发的开源操作系统</p><p>ip-addr查看ipv4地址</p><p>ssh协议默认是端口是22</p><p>Linux 使用shutdown命令进行关系重启，定时关机等操作</p><p>关机:sudo shutdown -h now</p><p>重启：sudo shutdown -r now</p><h3 id="ch-2"><a href="#ch-2" class="headerlink" title="ch_2"></a>ch_2</h3><p>echo $HOME(主目录)</p><p>echo $PWD (当前工作目录) 或者 pwd</p><p>常见的文件系统格式：FAT32,NTFS,Ext3，Ext4，HFS</p><p>Ubuntu 16.04 安装时默认使用Ext4文件系统，Ext4     </p><p>Linux没有“盘符”的概念，Windows会分为C盘D盘等。而<strong>Linux通过一个整体 的目录树来组织文件</strong>。    </p><p>Linux使用 <strong>/ 表示根目录</strong>，也就是整个目录树的顶层。其他的目录都位于/之 下。  </p><p>  所有的目录都至少包含两个子目录，. 和 .. ，<strong>. 表示当前目录</strong>，<strong>.. 表示上一层 目录</strong>。<strong>/也有 ..</strong> ，但是<strong>指向的是自己</strong>。    </p><p>/ ：根目录</p><p><strong>/usr：用户的程序，配置信息</strong></p><p>/bin:存放常用命令的目录</p><p>/home：主目录，所有用户主目录都在此目录下</p><p>/sbin：超级用户root才能使用的命令</p><p>/lib:系统动态链接库</p><p>/boot：系统启动文件所在的目录</p><p>/root：root用户的主目录</p><p><strong>/etc：系统配置文件以及一些程序的配置文件都在此目录</strong></p><p>/proc：一个虚拟目录，系统内存的映射，可以获取系统以及进程的信息</p><p>/sys:一个虚拟目录。把硬件设备映射成文件，可以通过文件控制硬件</p><p>/usr/bin 用户程序目录</p><p>/tmp 存放临时文件</p><p>/dev 外接设备会映射为此目录下的一个文件</p><p>/media 把系统自动识别的U盘，光盘，挂载到此目录下</p><p>命令</p><ul><li>ls 显示目录/文件<ul><li>ls -a 显示目录下的所有内容，包括以.开头的隐藏文件</li><li>ls -l  以详细方式显示目录内容信息</li><li>ls -R 递归显示目录内容</li><li>ls -S  按文件大小排序，大的在前</li><li>ls -CF</li><li>man ls 可查看ls命令帮助手册</li></ul></li><li>cd 切换工作目录<ul><li>cd .. 会回到上一层目录</li><li>在根目录下/下cd.. 还是/目录</li><li>cd ~ 进入当前用户的主目录</li><li>cd ~进入上一次使用的目录</li></ul></li><li>df 查看磁盘情况<ul><li>df -h 以易于读取的方式显示空间使用情况</li><li>df -T 显示文件系统的类型</li></ul></li><li>fdisk 磁盘格式化<ul><li>fdisk -l 列出已安装的所有磁盘的分区    </li><li>fdisk -d 进入删除分区的子步骤</li><li>fdisk -n进入创建分区的子步骤</li><li>fdisk -w 把分区写入硬盘，q放弃修改</li><li>sudo fdisk /dev/sdb ，然后使用p查看分区表信息    </li></ul></li><li>mkfs 创建文件系统<ul><li>mkfs -f &lt;文件系统类型&gt;&lt;设备分区&gt;</li><li>sudo mkfs -t ext4 /dev/sda5</li><li>mkswap:创建文件交换系统<ul><li>mkswap  / dev/sda5</li></ul></li></ul></li><li>mount 挂载设备 <ul><li>mount -r /dev/sdb2/media/c  只读挂载模式</li><li>mount -t ext4 /dev/sdb2 /media/c    指定ext4文件系统，一般不用，mount会 自动识别文件系统类型    </li></ul></li><li>umount 卸载设备<ul><li>umount /media/c 卸载挂载点    </li></ul></li></ul><h3 id="ch03"><a href="#ch03" class="headerlink" title="ch03"></a>ch03</h3><p>终端（Terminal）：</p><p>也称终端设备，是计算机最外围的设备，主要获取用户信 息的输入以及处理结果的输出等。    </p><p>虚拟控制台：Linux提供了虚拟控制台，桌面环境的Ubuntu系统上使用Ctrl+Alt+[F1~F7]会 在不同虚拟控制台之间切换。</p><p>终端是一个<strong>设备</strong> 。而shell是一个程序    ，主要是获取用户输入的命令并允许，把结果返回给用户。</p><p>终端最重要的事情是输入和输出，程序运行的结果要通过shell显示在终端上</p><p>shell有很多不同的实现，基本功能都相同。Linux默认的shell大多都是bash。 类似的还有sh、zsh、fish等。    </p><p>Ubuntu桌面环境自带一个terminal软件，是终端模拟器（虚拟终端），启动 后会运行bash。    </p><p>LInux命令分类</p><ul><li>内部命令：属于Shell解释器的一部分，是shell程序自带的命令</li><li>外部命令：独立于Shell解释器之外的程序文件，是在系统的某个路径下的可 执行程序，由shell依照事先设定好的路径查找，找到后才能执行。    </li></ul><p>type  commond 查看是内部命令还是外部命令</p><p>which/whereis commond  命令所在路径</p><p>Linux命令的通用格式为：命令  选项  参数</p><ul><li>以 “-”引导短格式选项（单个字符），例如“-l” </li><li>以“–”引导长格式选项（多个字符），例如“–color”    </li></ul><p>使用help 查看Bash内部命令的帮助信息    </p><ul><li>ls –help</li></ul><p>使用man命令阅读手册</p><ul><li>man ls</li></ul><p>env 可以显示系统中已存在的环境变量</p><p>shell 使用小技巧</p><ul><li>Tab键可以自动补全命令名称以及参数    </li><li>命令历史：bash中可以使用↑、↓按键逐条翻看，允许编辑并重复执行，</li><li>history命令显示 所有缓存在.bash_history中的命令，history -c 清空历史命令。    </li></ul><p>快捷键</p><ul><li>Ctrl+a 跳转行首，Ctrl+e 跳转行尾 Ctrl+l 清屏 Ctrl+c 终止程序执行 Ctrl+d 退出shell，回到登录界面 Ctrl+w 按单词删除，空格隔开的作为一个独立的词。    </li></ul><p>终端常用命令</p><ul><li>ls 列出文件、目录的信息</li><li>cd 切换当前工作目录 </li><li>mkdir 创建目录</li><li>touch 创建空文件</li><li>rm 删除给定的文件和目录。如果目录不为空，需要使用rm -rf</li><li>cp 将一个或多个源文件或者目录复制到指定的目的文件或目录    </li><li>mv 对文件或目录重新命名，或者将文件从一个目录移到另一个目录中</li><li>cat 连接文件并打印到标准输出设备上。cat经常用来显示文件的内容</li><li>more 以全屏幕的方式按页显示文本文件的内容</li><li>less  以全屏幕的方式按页显示文本文件的内容，功能比more更强大  </li><li>find 在指定目录下查找文件  </li></ul><p>常用命令</p><ul><li>ls /usr  显示/usr的目录内容</li><li>ls -R /usr</li><li>ls -l /usr</li><li>mkdir abc 在当前目录下创建abc目录</li><li>rmkdir abc/ 删除当前目录下的abc目录，abc必须是空目录</li><li>rm tmp/a.sh 删除tmp目录下a.sh文件</li><li>rm -rf tmp/ 删除tmp目录，目录可以不为空，会删除目录下所有内容</li><li>cp tmp/a.sh sh/  复制tmp/a.sh 到 sh目录,tmp和sh都是当前目录的子目录</li><li>cp tmp/a.sh /tmp  </li><li>cp tmp/a.sh sh/b.sh</li><li>cp tmp/ tmp2 -R</li><li>cp mariadb/ -R /usr/local 递归复制</li><li>mv tmp/a.sh sh/</li><li><strong>mv tmp/a.sh sh/b.sh 移动并重命名</strong></li><li><strong>mv tmp/a.sh tmp/ac.sh 重命名</strong></li><li>touch tmp/test.sh 创建空文件夹</li><li>cat /etc/passwd 显示文件夹内容</li><li>find /usr -name gcc 查找名为gcc的文件大小写敏感</li><li>find /usr -name gcc*  查找开头为gcc的文件大小写敏感</li><li>find /usr/ -iname gcc*  查找开头为gcc的文件大小写不敏感</li><li>env显示环境变量</li></ul><h3 id="ch04-IO重定向与管道"><a href="#ch04-IO重定向与管道" class="headerlink" title="ch04 IO重定向与管道"></a>ch04 IO重定向与管道</h3><p>每个进程至少有3个信道：标准输入 -STDIN 标准输出 -STDOUT  标准错误 -STDERR</p><ul><li>标准输入：文件描述符为0，默认指向终端(在虚拟终端中即为键盘)</li><li>标准输出：文件描述符为1,默认指向终端(在虚拟终端中即为屏幕)</li><li>标准错误：文件描述符为2，默认指向终端(在虚拟终端中即为屏幕)</li></ul><p>在Linux中一切皆文件，所以标准输入、标准输出、标准错误都有对应的文件，而这种对应 关系是通过文件描述符来实现的    </p><p>对于一个进程来说，它从描述符0指向的文件读取输入信息，把执行结果送到描述符1指向 的文件，把出错信息送到描述符2指向的文件，而不关心这些文件具体是什么    </p><p>重定向</p><ul><li>echo ‘abc’ &gt;tmp/buff 会把abc输出到tmp/buff这个文件中</li><li>如果没有buff这个文件，先创建buff这个文件，再把内容重定向到这个文件中，但是如果存在这个文件，并且这个文件之前不为空，重定向会导致之前的数据丢失。</li><li>echo ‘abc’ &gt;&gt;/tmp/buff 会把abc追加到文件末尾，之前的数据不丢失</li><li>在shell中使用&gt; , &lt; , &gt;&gt; 等重定向符号时，执行重定向操作的是 shell，而不是程序。    </li></ul><p>重定向标准输入  &lt;  将命令中接收输入的途径由默认的键盘改为指定的文件</p><p>重定向标准输出  &gt; 以替换的方式将命令的执行结果输出到知道的文件中，而不是显示在屏幕上</p><p>​               &gt;&gt; 将命令执行的结果追加到输出的指定文件</p><p>重定向标准错误 2&gt; 清空指定文件的内容，并将标准错误信息保存到该文件中</p><p>​               2&gt;&gt; 将标准错误信息追加到指定的文件中</p><p>重定向标准输出和标准错误 &amp;&gt;或&gt;&amp;将标准输出和标准错误的内容全部保存到指定文件，而不是直接显示在屏幕上。</p><p>重定向实例：</p><p>wc -l newfile 与 wc -l &lt; newfle</p><p>第一个是对文件的操作，第二个是对文件内容的操作</p><p> find / -iname gcc* &gt; find_tmp  标准输出重定向到find_tmp文件，但是错误信息会显示在屏幕上</p><p> find / -iname gcc* &amp;&gt; find_tmp   标准输出和标准错误信息都重定向到 find_tmp中</p><p>1&gt; 等同于&gt; ，0&lt; 等同于&lt;，即前导的0和1可以省略；如果不省略，数字和 重定向符号之间没有空格，前导2不可以省略    </p><p><strong>管道</strong></p><ul><li>把一条命令的STDOUT连接到另一条命令的STDIN上，可以用 | 这个符号，在shell中表示管道</li><li>shell在解释命令遇到|时会创建管道，并创建另个进程，把标准输入输出重定向到管道，前一个进程向管道写数据，后一个进程从管道读数据。</li><li>在管道中只有<strong>标准输出才传递给下一个命令</strong>，<strong>标准错误输出直接输出到终端</strong>。</li></ul><p>管道重定向实例</p><ul><li>查找名称含有curl的文件进行计数，并把错误信息重定向到/dev/null    <ul><li>find / -iname  *curl* 2&gt; /dev/null | wc -l</li></ul></li><li><strong>查找名称含有ssh的进程</strong><ul><li><strong>ps -ef | grep ssh</strong><ul><li><strong>ps -e 显示所有进程，环境变量</strong></li><li>ps -ef 意思是以长格式显示所有进程</li><li>grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。</li></ul></li></ul></li><li>分页查看内容<ul><li>ls -l -R /usr/share | less</li></ul></li><li>排序文件<ul><li>ls | sort -r</li></ul></li><li>分页查看帮助文档<ul><li>help test | less</li><li>cat /etc/passwd | less</li></ul></li></ul><h3 id="ch05-用户和组管理"><a href="#ch05-用户和组管理" class="headerlink" title="ch05 用户和组管理"></a>ch05 用户和组管理</h3><ul><li>Linux是一个多用户多任务的系统</li><li>linux用户分三类<ul><li>超级用户<ul><li>root</li></ul></li><li>普通用户<ul><li>系统安装时创建的用户及后期使用中由用户创建的用户</li></ul></li><li>系统用户<ul><li>系统及服务运行时必须存在的用户，但与真实的普通用户有所不同，默认 情况下是不能登录系统的，它们的存在主要是满足系统进程对文件属主的 需求。一般用于系统服务。    </li></ul></li></ul></li></ul><p>组的概念</p><ul><li>第一种分为<strong>超级用户组</strong>(root group)、<strong>系统组</strong>(system group)和<strong>用户组</strong>(user group)</li><li>第二种分类<strong>基本组</strong>和<strong>附加组</strong></li><li>第三种分为<strong>私有组</strong>和<strong>公共组</strong></li><li>属于多个组的用户所拥有的权限是它所在的组的权限之和    </li></ul><p>root用户具有最高权限，他的UID是0.在Ubuntu上以root用户登录时提示符会变成<strong>#</strong>，其他用户提示符是<strong>$</strong></p><p>可以修改 /etc/passwd 文件中的uid为0，使普通用户获得和root一样的权限。    </p><p>su ：后边不带 username 使用时，su 默认会切换到 超级用户    </p><p>sudo允许程序临时以root身份运行。sudo默认是以root身份运行命令，但是 使用-u [username]可以以其他用户身份运行命令    </p><p>如果是root用户，不需要使用sudo    </p><p>示例(获取软件更新)： sudo apt update    </p><p>passwd用于设置用户密码： sudo passwd [username]    </p><p>想退回普通账户时可以执行“exit”或“logout”     </p><p>sudo adduser –shell /bin/bash oklinux //创建hellolinux用户，默认登录shell是bash </p><p>sudo adduser –shell /bin/bash ubuntu1 –gid 1001 //指定要添加的组    </p><p>sudo deluser [username] 此操作不会删除主目录。    </p><p>sudo deluser –remove-home [username] 删除用户并删除主目录。    </p><p>sudo deluser –remove-all-files [username] 删除用户以及系统中一切属于 此用户的文件。    </p><p>创建组 sudo addgroup [–gid ID][group] –gid ID 手动指定组ID    </p><p>删除组 sudo delgroup [group]    </p><p>sudo usermod -G brave -a oklinux    </p><h4 id="ch06-安装-卸载软件"><a href="#ch06-安装-卸载软件" class="headerlink" title="ch06 安装/卸载软件"></a>ch06 安装/卸载软件</h4><p>.deb格式是Debian/Ubuntu使用的格式。    </p><p>dpkg是Debian/Ubuntu上管理本地软件包的命令。dpkg不会联网查询软件包 信息。    </p><ul><li>sudo  dpkg –install vscode.deb    </li><li>sudo dpkg –remove vscode    </li><li>sudo dpkg -l //列出所有软件包的信息    </li></ul><p>安装软件：sudo apt  install  +软件名</p><p>卸载软件：sudo apt  remove+软件名</p><p> 删除所有自动安装且已经不再使用的包：sudo apt autoremove</p><p>获取系统以及软件的更新信息    sudo apt update    </p><p>更新软件包：sudo apt upgrade </p><p>或者是 sudo apt full-upgrade，使用fullupgrade会进行整体的操作，如果一个软件的依赖关系发生变化，会先卸载 软件再安装。       </p><h3 id="ch07-文件编辑"><a href="#ch07-文件编辑" class="headerlink" title="ch07 文件编辑"></a>ch07 文件编辑</h3><p>nano使用</p><ul><li>nano [FILE NAME]就可以打开一个文件，如果不存在则会创建。    </li><li>nano是打开文件就可以直接编辑的，并且默认启动后窗口底部会显示常用 快捷键选项。    </li><li>编辑快捷键：Ctrl+O写入，Ctrl+X退出。    </li><li>配置文件：/etc/nanorc</li></ul><p>vim与vi终端字符模式运行的文本编辑器    </p><p>vim三种模式</p><ul><li><strong>命令模式</strong>：输入命令对文档等进行操作    </li><li><strong>输入模式</strong>：编辑文本，左下角显–INSERT–    </li><li><strong>底行模式</strong>：输入:会在文档最后一行显示：并等待输入命令，执行完成后会自动返回命令 模式。    </li></ul><p>ESC用于模式切换，当在命令模式输入i，a，o进行插入操作时，会切换到输 入模式，此时按ESC会回到命令模式    </p><p>在命令模式中：h、i、j、k(左下上右)</p><p>X：删除前面的字符    </p><p>x：删除后面的字符。    </p><p>：w 写入文件 ：q 退出文件 ：wq 写入并退出 ：q！ 不保存退出    </p><p>指令模式操作： </p><p>d 删除/剪切 ； </p><p>dd 删除当前行 ；</p><p> d\$ 删除到行尾的内容 ；</p><p> 2dd 会重复两次运行dd命令 </p><p>yy 复制当前行 ；</p><p> p 粘贴 </p><p>V 选中整行，此时移动光标可以成块选中</p><p> v 从光标标记位置开始选中 </p><p>u 撤销更改 </p><p>Ctrl+R 恢复更改，R大写 0 到行首 ； </p><p>0 到行首 ； $ 到行尾    </p><p>vim搜索和替换操作</p><p>：/php 搜索所有匹配php的行，输入n跳转到下一个匹配，N定位到上一个匹配</p><p>：s /php/ c  替换当前行第一个php的位置为c</p><p>：s /php /c /g 替换当前行所有php的位置为c</p><p>：%s /php/ c  替换所有行第一个php的位置为c</p><p> ：%s /php /c /g 替换当前行所有php的位置为c</p><p>ch08文件管理</p><p>在Linux上，一切皆是文件。外接设备也会被映射为文件，在/dev目录下    </p><p>Linux上的文件名称区分大小写，这点和Windows不同，Windows是不区分的    </p><p>r：可读 </p><p> w：可写，可以更改文件/目录的内容，可以删除文件/目录。</p><p>  x：可执行，程序要具有可执行权限。目录必须要有可执行权限才可以进入    </p><p>chmod 755 bin/pse rwxr-xr-x</p><p>chmod +x bin/pse 添加可执行权限，所属用户与用户组具备可执行权限</p><p>chmod -w bin/pse 去掉写权限，用户，用户组，其他用户都会去掉写权限</p><p>chown oklinux:oklinux hd1 更改hd1文件所属用户为oklinux，所属用户组 为oklinux    </p><p>chown :brave hd1  更改hd1文件所属用户组</p><p>chown oklinux：hd1更改文件所属用户</p><p>ln $PWD/hd1 hd2    会在当前目录创建文件的硬链接hd2。    </p><p>在执行连接之前，存放连接的目录中不能有与链接名同名的文件。如果创建 硬连接，则TARGET文件必须存在，并且不能是目录    </p><p>ln -s /bin/date  $HOME/bin/t        在主目录下的bin目录创建符号链接t指向/bin/date。    </p><p>创建符号链接就会创建一个文件，此文件记录的是另一个文件的路径。删除 源文件或目录，只删除了数据，不会删除软链接。一旦以同样文件名创建了 源文件，连接将继续指向该文件。    </p><h3 id="ch09-进程管理"><a href="#ch09-进程管理" class="headerlink" title="ch09 进程管理"></a>ch09 进程管理</h3><ul><li>ps -e 查看所有进程</li><li>ps -e | grep ssh 进程中含有ssh名称的进程    </li></ul><ul><li>sudo kill + pid 结束进程(默认 发送sigterm信号)</li><li>sudo kill -9 4096(sigkill 信号值：9)强制结束</li><li>jobs查看后台进程</li><li>fg 任务号  把后台进程继续执行</li><li>bg 任务号 任务在后台继续执行</li></ul><h3 id="ch10-网络命令与配置"><a href="#ch10-网络命令与配置" class="headerlink" title="ch10 网络命令与配置"></a>ch10 网络命令与配置</h3><p>ip help查看帮助信息</p><p>ip address 显示网卡以及IP地址，MAC地址等信息</p><p>为eth0网卡分配IP地址 ： ip address add 192.168.180.102/24 dev enp0s8    </p><p>删除eth0的IP地址：   ip address del 192.168.180.102/24 dev enp0s8    </p><p>列出路由表：ip route list    </p><p>iftop监听网络通信情况。运行时需要root权限：sudo iftop    </p><p>nethogs监控进程的带宽占用情况： sudo nethogs        </p><p>重启网络：<strong>sudo service networking restart</strong></p><p>curl是一个命令行模式网络客户端工具        curl ’10.7.1.3:3456’    </p><h3 id="ch11-shell脚本基础-变量"><a href="#ch11-shell脚本基础-变量" class="headerlink" title="ch11 shell脚本基础-变量"></a>ch11 shell脚本基础-变量</h3><p>shell是用户和系统交互的桥梁：  shell是Linux的一个程序，实现版本有多种。shell的主要工作就是运行命 令    </p><p>  sh是shell的简写，shell的实现版本有：sh，bash，csh，tcsh，zsh    </p><p>用户通过shell和系统交互   </p><p>输入 ls -l,shell要解析成‘ls’ ,‘-l’，’ls’就是命令名称，并 在PATH设置的路径中寻找，找到/bin/ls这个命令，fork一个子进程调用 execv等系统调用传递参数运行命令。并等待结束。     </p><p>注意：真正运行命令的不是shell，而是内核，shell去调用内核提供的接 口，shell是调用fork创建子进程去运行命令    </p><p>shell支持通配符，使用*表示匹配任意长度的字符，?匹配任意一个字符    </p><p>ls ./a*，会匹配a开头的所有文件并 显示，如果存在ab.txt，ac.txt，则会扩展成ls ./ab.txt ./ac.txt。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Hello world'</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>chmod 755 [SCRIPT NAME]    </p><p>给脚本添加执行权限，脚本开头的#!/bin/bash声明这是一个脚本文件，要用 /bin/bash执行。    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=`ls` 会把ls运行的结果赋值给a。注意ls不是被单引号包含，而是反</span><br><span class="line">引号。</span><br><span class="line">=左右不能有空格，否则会按照运行命令的方式去执行。</span><br><span class="line">获取变量的值要用$，<span class="built_in">echo</span> <span class="variable">$a</span>可以输出变量的值。</span><br></pre></td></tr></table></figure><p>b=a12， 则x=\$((\$a+\$b))则直接就计算为a的数值，b转成数字为0。    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">逻辑运算：&amp;&amp;，||， !。分别是AND，OR，NOT。</span><br><span class="line">• 对逻辑运算来说，任何非0值都是真。</span><br><span class="line">• 示例：<span class="built_in">echo</span> $((1&amp;&amp;0)) ; <span class="built_in">echo</span> $(( 2 || 0))</span><br><span class="line">• 非数字格式逻辑运算：</span><br><span class="line">b=abc</span><br><span class="line"><span class="built_in">echo</span> $(( 1 &amp;&amp; <span class="variable">$b</span> )) //输出是0</span><br><span class="line">/*************/</span><br><span class="line">b=12a</span><br><span class="line"><span class="built_in">echo</span> $(( 1 &amp;&amp; <span class="variable">$b</span>)) //提示错误</span><br><span class="line">• &amp;&amp; || !运算往往和<span class="keyword">if</span>语句配合使用。</span><br></pre></td></tr></table></figure><p><strong>export a:把变量放到环境变量，环境变量是一个名称与值的简单列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">• <span class="variable">$0</span>：当前脚本的文件名/当前执行的进程/程序名</span><br><span class="line">• <span class="variable">$n</span>：n为从1开始的数字，<span class="variable">$1</span>是第一个参数，<span class="variable">$2</span>是第二个参数，<span class="variable">$&#123;10&#125;</span>是第十</span><br><span class="line">个参数（从<span class="variable">$&#123;10&#125;</span>开始参数号需要用花括号括起来）</span><br><span class="line">• <span class="variable">$#</span>：传入脚本的参数的个数</span><br><span class="line">• $*：所有的位置参数(作为单个字符串)</span><br><span class="line">• <span class="variable">$@</span>：所有的位置参数(每个都作为独立的字符串)。</span><br><span class="line">• $?：当前shell进程中，上一个命令的返回值，如果上一个命令成功执行则$?</span><br><span class="line">的值为0，否则为其他非零值，常用做<span class="keyword">if</span>语句条件</span><br><span class="line">• $$：当前shell进程的pid</span><br><span class="line">• $!：后台运行的最后一个进程的pid</span><br><span class="line">• <span class="variable">$&#123;#var&#125;</span> 返回变量值（字符串）的长度</span><br></pre></td></tr></table></figure><h3 id="ch12-shell脚本基础-逻辑判断与循环"><a href="#ch12-shell脚本基础-逻辑判断与循环" class="headerlink" title="ch12 shell脚本基础-逻辑判断与循环"></a>ch12 shell脚本基础-逻辑判断与循环</h3><p>test是shell内建命令，可以处理脚本里的各类工作，产生的不是一般形式的 输出，而是可用的退出状态。    </p><p>test命令有其他形式：[······]，[[······]]。当在[ ]中使用&amp;&amp; || 会出错，这时候要 使用[[ ]]。    </p><p><strong>test返回true或false，但是test返回的true是0，false是1</strong>    </p><p>例：<strong>test “abc”=“abc” ; test -f ~/tmp/a.sh ; [ -f ~/tmp/a.sh ]</strong>    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DIR_LIST=<span class="string">"a b c d e f"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$DIR_LIST</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="keyword">if</span> ! <span class="built_in">test</span> -d ~/sh/study/<span class="variable">$i</span>;</span><br><span class="line">   <span class="keyword">then</span> mkdir ~/sh/study/<span class="variable">$i</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> <span class="comment">#  -gt:&gt;  -lt:&lt; -eq:= -ne :!= -le:&lt;= -ge:&gt;=</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ 5 -gt 3 ] ;</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">'5&gt;3'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">  </span><br><span class="line">comm=ps -e -o user,pid,ppid,tty,comm,args</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -gt 0 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="variable">$comm</span> | grep <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="variable">$comm</span></span><br></pre></td></tr></table></figure><h3 id="ch13-vim和Linux-C语言编译环境"><a href="#ch13-vim和Linux-C语言编译环境" class="headerlink" title="ch13 vim和Linux C语言编译环境"></a>ch13 vim和Linux C语言编译环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim test.c 创建一个c语言程序</span><br><span class="line">gcc test.c 进行编译，编译后的文件是a.out</span><br><span class="line">./a.out 运行</span><br><span class="line">gcc -o <span class="built_in">test</span> test.c -o 后跟输出文件的名称</span><br><span class="line">./<span class="built_in">test</span> 运行</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(“program name: %s\n”, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;argc; i++)</span><br><span class="line">    <span class="built_in">printf</span>(“%s ”, argv[i]);</span><br><span class="line">    <span class="keyword">if</span> (argc&gt;<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">printf</span>(“\n”);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*main函数的返回值是程序的退出状态表示程序是否正确执行。</span></span><br><span class="line"><span class="comment">argc是传递给程序的参数的个数</span></span><br><span class="line"><span class="comment">argv是每个参数的值</span></span><br><span class="line"><span class="comment">argv[0]永远是程序文件的名称，参数值从argv[1]开始</span></span><br></pre></td></tr></table></figure><h3 id="ch14-系统编程基础"><a href="#ch14-系统编程基础" class="headerlink" title="ch14 系统编程基础"></a>ch14 系统编程基础</h3><p>系统编程就是调用Linux系统提供的API完成需要的任务    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取自己的PID</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(“%d\n”, getpid() );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">外部编译+执行</span><br><span class="line">gcc -o tc tc.c</span><br><span class="line">./tc</span><br></pre></td></tr></table></figure><p>用fork()创建子进程</p><p>fork会创建子进程，调用fork，新创建的进程会和父进程一样继续执行。</p><p>fork出错返回-1并且不会创建新的进程；正确则在父进程返回创建子进程 的PID，在子进程返回0。 </p><p> 由于父进程和子进程不同的返回值。可以通过判断返回值控制父进程和子进 程执行不同的代码。</p><p>父进程先于子进程退出，子进程被<strong>init进程</strong>(ID为1的进程)接管        </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;vim</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">int</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid=<span class="number">0</span>;</span><br><span class="line">    pid=frok();</span><br><span class="line">    <span class="keyword">if</span>(pid&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Parent:%d\n"</span>,getpid());</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"My Parent:%d\n"</span>,getppid());</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;vim</span><br><span class="line">int main(int argc,int *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    cout&lt;&lt;"create"&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="ch15-Linux系统调用：IO"><a href="#ch15-Linux系统调用：IO" class="headerlink" title="ch15 Linux系统调用：IO"></a>ch15 Linux系统调用：IO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">open函数用于打开文件操作：</span><br><span class="line">int open(const char *pathname, int flags, mode_t mode); 参数依次为文件路径名称，标志</span><br><span class="line">位，模式。成功返回值为打开的文件描述符，错误返回-1。</span><br><span class="line">flags选项：</span><br><span class="line">O_CREAT 没有则创建文件</span><br><span class="line">O_WRONLY 写模式打开文件</span><br><span class="line">O_RDONLY 只读模式打开文件</span><br><span class="line">O_RDWR 读写方式打开</span><br><span class="line">mode选项：</span><br><span class="line">S_IRWXU 文件所有者具有可读，可写，可执行的权限</span><br><span class="line">S_IRUSR 文件所有者有可读权限</span><br><span class="line">S_IWUSR 文件所有者具有可写权限</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在文件操作最后要记得使用close关闭打开的文件：int close(int fd);</span><br><span class="line">close函数成功返回0，错误返回-1。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">"buffer"</span>,O_CREAT,S_IRUSR|S_IWUSR|S_IRGRP);</span><br><span class="line">    <span class="keyword">if</span>(fd&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    colse(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码从buffer文件读取一些数据并放到变量buf中：</span></span><br><span class="line"><span class="keyword">int</span> fd = open(“buffer”, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">"open"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;‘\<span class="number">0</span>’&#125;;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">count = read(fd, buf, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (count&lt;<span class="number">0</span>) &#123;</span><br><span class="line">perror(“read”);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(“%s\n”,buf);</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码会向buffer文件写入一条数据：</span></span><br><span class="line"><span class="keyword">char</span>*buf = “Linux\nUnix\nC”;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">count = write(fd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line"><span class="keyword">if</span> (count&lt;<span class="number">0</span>)</span><br><span class="line">perror(“write”);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(“bytes:%d\n”, count);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下示例代码printf不会在屏幕输出，而是输出到一个文件中：IO重定向</span></span><br><span class="line"><span class="keyword">int</span> fd=open(“riotest”,O_CREAT|O_APPEND|O_RDWR,S_IRUSR|S_IWUSR);</span><br><span class="line"><span class="keyword">if</span> (fd&lt;<span class="number">0</span>) &#123;</span><br><span class="line">perror(“open”);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dup2(fd, <span class="number">1</span>); <span class="comment">//dup2（old,new)</span></span><br><span class="line">close(fd);</span><br><span class="line"><span class="built_in">printf</span>(“PHP is best\n”);</span><br></pre></td></tr></table></figure><h3 id="ch16-系统服务"><a href="#ch16-系统服务" class="headerlink" title="ch16 系统服务"></a>ch16 系统服务</h3><p>·系统服务程序和在shell运行的普通命令不同，如果在shell运行一个命令， shell是作为父进程fork出子进程去运行的。 </p><p>• 而系统服务程序运行后往往是守护进程（daemon process），守护进程是作 为init进程（进程ID为1的进程， init负责系统的初始化）的子进程，并且不 会连接到终端，输入输出都不会经过终端。 • <strong>系统服务程序开机后会启动</strong>，并运行在后台，提供基本的服务支持。（当然 也是可以开机启动完成任务后退出，并没有严格限制，但多数系统服务程序 都要在后台运行。）    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service -status-all 显示所有的服务</span><br><span class="line">service ufw restart</span><br><span class="line">sudo /etc/init.d/networking restart 重启网络服务</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">• Linux系统有7个运行级别：</span><br><span class="line">• 0 ：关机，默认级别不能是0，否则不能正常启动</span><br><span class="line">• 1 ：单用户模式，用于系统维护，不能远程登录</span><br><span class="line">• 2 ：多用户模式，不支持NFS</span><br><span class="line">• 3 ：多用户模式，支持NFS</span><br><span class="line">• 4 ：系统保留，未定义</span><br><span class="line">• 5 ：界面模式，开机后进入桌面环境</span><br><span class="line">• 6 ：重启，默认运行级别不能是6否则会不断重启</span><br><span class="line">• 查看运行级别的命令：runlevel</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• /etc/存在rc*.d 目录，*是0-6的数字， /etc/init.d目录下的服务程序只是</span><br><span class="line">一个集合，系统启动时，会根据级别运行rc*.d目录的程序，而此目录下</span><br><span class="line">是链接到/etc/init.d的符号链接，这样就实现了不同级别的不同服务配置。</span><br><span class="line">• 注意这里有rc0.d和rc6.d，这两个目录下的符号链接是K开头，而其他的</span><br><span class="line">是S开头，K开头的是不启动的，而是在离开此运行级别时要进行的操作，</span><br><span class="line">比如关机要进行一些清理工作。</span><br><span class="line">• 符号链接S/K后面跟的数字是启动顺序，数字小的先运行</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：有服务脚本sh/servtest，通过runlevel查看启动级别是5，把</span><br><span class="line">servtest复制到/etc/init.d，然后创建符号链接：</span><br><span class="line">sudo cp sh/servtest /etc/init.d/</span><br><span class="line">sudo ln -s /etc/init.d/servtest /etc/rc5.d/S05servtest</span><br><span class="line">//ln -s 指向的文件 符号链接在的文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;ch-1&quot;&gt;&lt;a href=&quot;#ch-1&quot; class=&quot;headerlink&quot; title=&quot;ch_1&quot;&gt;&lt;/a&gt;&lt;strong&gt;ch_1&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Linux之父：林纳斯·托瓦兹&lt;/st
      
    
    </summary>
    
      <category term="-&quot;学习资料&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
      <category term="-Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>DB_2</title>
    <link href="http://yoursite.com/2018/06/24/DB_2/"/>
    <id>http://yoursite.com/2018/06/24/DB_2/</id>
    <published>2018-06-24T12:21:44.000Z</published>
    <updated>2018-06-24T12:23:35.623Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h3><a id="more"></a><p>第一节 关系数据结构及形式化定义</p><ul><li>关系<ul><li>域：一组具有相同数据类型的值的集合<ul><li>整数</li><li>实数</li><li>…</li></ul></li><li>笛卡尔积：域上的一种集合运算<ul><li>给定一组域D1、D2、…Dn，允许其中某些域是相同的</li><li>D1、D2，，，Dn的笛卡尔积为：</li><li>D 1×D2×…×Dn ＝ ｛（d1， d2， …， dn）｜di ∈ Di， i＝1， 2， …， n｝ </li><li>所有域的所有取值的一个组合  </li><li>元素(d1， d2， …， dn)叫作一个n元组  </li><li>元素中的每一个值di叫做一个分量    </li><li>一个域允许的不同取值个数称为这个域的基数   (笛卡尔积基数表示方法每一个域的取值个数的乘积)</li></ul></li><li>关系<ul><li>D 1×D2×…×Dn的子集叫作在域D1， D2， …， Dn上的关 系，表示为    </li><li>R：关系名  R（D1， D2， …， Dn）    </li><li>n：关系的目或度（Degree）</li></ul></li></ul></li><li>三类关系<ul><li>基本关系<ul><li>实际存在的表，是实际存储逻辑表示</li></ul></li><li>查询表<ul><li>查询结果对应的表</li></ul></li><li>视图表<ul><li>由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据</li></ul></li></ul></li><li>基本关系的性质<ul><li>列是同质的</li><li>不同的列可出自同一个域<ul><li>其中的每一列称为一个属性</li><li>不同的属性要给与不同的属性名</li></ul></li><li>列的顺序无所谓，列的次序可以任意交换</li><li>任意两个元组的候选码不能相同</li><li>行的顺序无所谓，行的次序可以任意交换</li><li>分量必须去原子值</li></ul></li></ul><p>关系模式</p><ul><li>关系模式对应表头。</li><li>关系模式是对关系的描述，是静态的，稳定的</li><li>关系是关系模式在某一时刻的状态或内容，是动态的、随时间不断变化的</li><li>关系模式和关系往往统称为关系。</li></ul><p>关系模式可以形式化地表示为：</p><p>R（U,D,DOM,F)</p><p>R  关系名</p><p>U 组成该关系的属性名集合</p><p>D 属性U中属性所来自的域</p><p>DOM 属性向域的映像集合</p><p>F 属性间的数据依赖关系</p><p>简记为</p><p>R (U)    </p><p><strong>选择、投影、并、差、笛卡尔积</strong>是5种基本操作</p><p>关系操作的特点</p><ul><li>集合操作方式：操作对象和结果都是集合，一次一集合的方式。</li></ul><p>关系的完整性</p><ul><li>实体完整性<ul><li>若属性A是基本关系R的主属性，则A不能取空值</li></ul></li><li>参照完整性<ul><li>关系间的引用</li><li>外码</li><li>参照完整性规则<ul><li>F是R的外码，F是S的主码，F在R上的取值<ul><li>空</li><li>等于S中某个元组主码值</li></ul></li></ul></li></ul></li><li>用户定义完整性:针对某一具体关系数据库的约束条件， 反映某一具体 应用所涉及的数据必须满足的语义要求    <ul><li>例：课程(课程号， 课程名， 学分) <ul><li>“课程号”属性必须取唯一值 </li><li>非主属性“课程名” 也不能取空值 </li><li>“学分”属性只能取值{1， 2， 3， 4}    </li></ul></li></ul></li></ul><p>关系代数</p><p><strong>传统集合运算：并 差 交 笛卡尔积</strong></p><ul><li>并 ∪<ul><li>R和S  具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域    </li></ul></li><li>差 -<ul><li>R和S  具有相同的目n </li><li>相应的属性取自同一个域    </li></ul></li><li>交 ∩<ul><li>R和S 具有相同的目n </li><li>相应的属性取自同一个域    </li></ul></li><li><p>笛卡尔积 X</p><ul><li>R: n目关系， k1个元组    </li><li>S: m目关系， k2个元组    </li><li>R×S </li><li>列： （n+m） 列元组的集合 – 元组的前n列是关系R的一个元组 – 后m列是关系S的一个元组 </li><li>行： k1×k2个元组 –  R×S = {tr ts |tr∈ R ∧ ts∈S }    </li></ul><p><strong>专门的集合运算：选择，投影，连接，除</strong></p></li><li><p>选择</p><ul><li>选择满足条件的元组，行</li><li>σ Sdept = ‘IS’ (Student)    </li></ul></li><li>投影<ul><li>选择满足条件的属性，列</li><li>π Sname， Sdept(Student)    </li></ul></li><li>连接<ul><li>等值连接<ul><li>什么是等值连接 θ为“＝” 的连接运算称为等值连接    </li><li>从关系R与S的广义笛卡尔积中选取A、 B属性值 相等的那些元组    </li></ul></li><li>自然连接<ul><li>自然连接是一种特殊的等值连接<ul><li>两个关系中进行比较的分量必须是相同的属性组    </li><li>结果中把重复的属性列去掉</li></ul></li></ul></li><li><img src="https://i.loli.net/2018/06/24/5b2f8b4cb35f9.png" alt="1529752265854"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8bbe24d3c.png" alt="1529752575346"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8bee1eeac.png" alt="1529752582903"></li><li></li></ul></li><li>除<ul><li>给定关系R(X,Y)，S(Y,Z).R与S相除得到一个新的关系P(X)</li><li>P是R中满足下列条件的元组<ul><li>元组在X上分量值x的象集包含S在Y上投影的集合</li></ul></li><li><img src="https://i.loli.net/2018/06/24/5b2f8c06aeba6.png" alt="1529762224828"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8c1ec90c3.png" alt="1529762230493"></li><li></li></ul></li></ul><p><strong>关系代数运算：并、差、交、笛卡尔积、投影、选择、连接、除</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第二章-关系数据库&quot;&gt;&lt;a href=&quot;#第二章-关系数据库&quot; class=&quot;headerlink&quot; title=&quot;第二章 关系数据库&quot;&gt;&lt;/a&gt;第二章 关系数据库&lt;/h3&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_1</title>
    <link href="http://yoursite.com/2018/06/20/DB_1/"/>
    <id>http://yoursite.com/2018/06/20/DB_1/</id>
    <published>2018-06-20T10:05:44.000Z</published>
    <updated>2018-06-24T12:25:01.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章绪论"><a href="#第一章绪论" class="headerlink" title="第一章绪论"></a>第一章绪论</h2><a id="more"></a><h3 id="第一节-数据库系统概述"><a href="#第一节-数据库系统概述" class="headerlink" title="第一节 数据库系统概述"></a>第一节 数据库系统概述</h3><p><strong>数据库的地位</strong>：数据库技术是<strong>信息系统</strong>的核心和基础，它的出现极大促进了计算机应用向各行各业的渗透。</p><p><strong>数据（Data）的定义：</strong>数据是<strong>数据库中存储的基本对象，</strong>描述事物的符号记录称为数据</p><p>数据的种类：文字、图像、图形、声音</p><p>数据的特点：数据与其语义是不可分的</p><p><strong>数据的形式不能完全表达其内容</strong></p><p><strong>数据库（Database)的定义</strong>：数据库是长期存储在计算机内、有组织、可共享的大量数据的集合。</p><p><strong>数据库的基本特征</strong>：</p><ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ul><p><strong>数据库管理系统（DataBase Management System DBMS）</strong>：数据库管理系统和操作系统一样是计算机的基础软件。</p><p>   功能：</p><ul><li>数据的定义功能<ul><li>提供数据定义语言（DDL）</li><li>定义数据库中的数据对象</li></ul></li><li>数据组织、存储和管理</li><li>数据操纵功能<ul><li>提供数据操纵语言（DML）</li><li>实现对数据库的基本操作（查询、插入、删除和修改）</li></ul></li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li><li>其他功能</li></ul><p><strong>数据库系统（Database System，DBS）</strong>：数据库系统是由<strong>数据库</strong>、<strong>数据管理系统</strong>、<strong>应用程序</strong>和<strong>数据库管理员(DBA)</strong>组织的<strong>存储、管理、处理和维护</strong>数据的系统</p><p><strong>数据管理</strong>：对数据进行分类、组织、编码、存储、检索和维护，是数据处理的中心问题</p><p><strong>数据管理技术的发展</strong>：</p><table><thead><tr><th></th><th>人工管理阶段</th><th>文件系统阶段</th><th>数据库系统阶段</th></tr></thead><tbody><tr><td>*管理者</td><td>用户，数据不保存</td><td>文件系统，数据可长期保存</td><td></td></tr><tr><td>*面向的对象</td><td>应用程序</td><td>应用程序</td><td>全组织</td></tr><tr><td>*共享程度</td><td>无共享冗余度极大</td><td>共享性差，冗余度大</td><td>高</td></tr><tr><td>*独立性</td><td>不独立，完全依赖程序</td><td>记录内有结构，整体无结构</td><td>高</td></tr><tr><td>*结构化</td><td>无结构</td><td>独立性差，数据的逻辑结构改变必须修改应用程序</td><td>整体结构化</td></tr><tr><td>*控制能力</td><td>应用程序控制</td><td>应用程序控制</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>数据库系统的特点：</p><ul><li>数据结构化<ul><li>整体数据结构化是数据库主要特征之一，也是数据库系统和文件系统的本质区别</li><li>数据的结构用<strong>数据模型</strong>描述，无程序的定义和解释</li><li>数据可以<strong>变长</strong></li><li>数据的最小存取单位是<strong>数据项</strong></li></ul></li><li>数据的共享性高、冗余度低且易扩充</li><li>数据独立性高<ul><li>物理独立性<ul><li>用户的应用程序与存储在磁盘上的数据库中的数据时相互独立的。当数据的物理存储改变了，应用程序不用改变。</li></ul></li><li>逻辑独立性<ul><li>应用程序与数据的逻辑结构是相互独立的，数的逻辑结构变了，用户程序也可以不变。</li></ul></li><li>数据的独立性是由DBMS的<strong>二级映像</strong>功能来保证的。</li></ul></li><li>数据由数据库管理系统统一管理和控制<ul><li>数据的安全性保护</li><li>数据的完整性检查</li><li>并发控制</li><li>数据库恢复     </li></ul></li></ul><p>数据模型：</p><ul><li>数据模型是对现实世界的抽象</li><li><strong>数据模型是数据库系统的核心和基础</strong></li></ul><p>数据模型分为两类</p><ul><li>概念模型：也称信息模型，按照用户的观点来对数据和信息建模，用于数据库的设计</li><li>逻辑模型和物理模型<ul><li>逻辑模型：主要包括网状模型、层次模型、关系模型、面向对象模型等。</li><li>物理模型：对数据的最底层的抽象，描述数据在系统内部的表示方式和存取方法。</li></ul></li></ul><p><img src="https://i.loli.net/2018/06/24/5b2f8d5e2cf7f.png" alt="1529416450682"></p><p>数据模型的三个组成要素：</p><ul><li>数据结构<ul><li>描述数据库的组成对象，以及对象之间的关系</li><li>对系统静态特性的描述</li><li>非关系模型<ul><li>层次模型</li><li>网状模型</li></ul></li><li>关系模型<ul><li>数据结构：关系</li></ul></li><li>面向对象模型<ul><li>数据结构：对象</li></ul></li></ul></li><li>数据操作<ul><li>对数据库中各种对象(型)的实例(值)允许执行的操作及有 关的操作规则    </li><li>查询。更新（插入，删除，修改）</li><li>数据操作是对系统动态特性的描述。    </li></ul></li><li>数据的完整性约束条件：数据的完整性约束条件是一组完整性规则。</li></ul><p>关系模型：每个关系的数据结构是一张规范化的二维表</p><p>关系模型的概念：</p><ul><li>关系：一个关系就是一张表</li><li>关系名：表名</li><li>关系模式：表头</li><li>元组：表中的一行是一个元组</li><li>属性：表中一列是一个属性，给每一个属性起一个名称即 属性名    </li><li>码：唯一确定一个元组的属性或者属性组</li><li>域：是一组具有相同数据类型的值的集合</li><li>分量：元组中的一个属性值</li></ul><p>关系模式必须是规范化的，关系的每一个分量都必须是一个不可分的数据项</p><p><strong>不允许表中有表</strong></p><p><img src="https://i.loli.net/2018/06/24/5b2f8d7374fda.png" alt="1529484361751"></p><p>数据操作是集合的操作，操作对象和操作结果都是关系，即元组的集合    (查询，插入，删除，更新)</p><p>关系的完整性约束条件：</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户自定义完整性</li></ul><p>数据库系统结构</p><ul><li>型：对某一类数据的结构和属性的说明</li><li>值：是型的具体赋值</li><li>学生记录型：(学号，姓名，性别，系别，年龄，籍贯)<ul><li>记录值(201315130，李明，男，计算机，19，江苏)</li></ul></li></ul><p>模式：模式是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型的描述，不涉及具体的值。模式的一个具体值称为模式的一个实例。</p><p><strong>一个数据库只有一个模式</strong></p><p><strong>模式是数据库系统模式结构的中间层</strong>    </p><p><strong>模式是相对稳定的</strong>，<strong>而实例是相对变动的</strong>。</p><p>数据库系统的三级模式结构</p><ul><li>模式</li><li>外模式</li><li>内模式</li></ul><p><img src="https://i.loli.net/2018/06/24/5b2f8d8991584.png" alt="1529485835773"></p><p>模式的定义</p><ul><li>数据的逻辑结构(数据项的名字、类型、取值范围)</li><li>数据之间的联系</li><li>数据有关的安全性、完整性要求</li></ul><p>外模式</p><ul><li>数据库用户使用的<strong>局部数据</strong>的逻辑结构和特征的描述</li><li>外模式通常是模式的子集。</li><li>同一外模式可以为某一用户的多个应用系统使用。但是一个应用程序只能使用一个外模式。</li></ul><p>内模式</p><ul><li>内模式也称存储模式，<strong>一个数据库只有一个内模式。</strong></li><li>他是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</li></ul><p>二级映像</p><ul><li>外模式/模式 映像<ul><li>对于每一个外模式，数据库系统中都一个外模式/模式映像，它定义了该外模式与模式之间的对应关系。</li><li>当模式改变时，由于数据库管理员对各个外模式/模式的映像作出改变，可以使外模式保持不变</li><li>应用程序是依赖数据的外模式编写的，应用程序不必改变。</li><li>保证的<strong>数据的逻辑独立性</strong></li></ul></li><li>模式/内模式映像<ul><li>当数据库的存储结构改变时，由数据库管理员对模式/内模式映像作相应改变，<br>可以使模式保持不变，从而应用程序也不必改变，</li><li>保证了数据与程序的<strong>物理独立性</strong></li><li>模式/内模式映像是唯一的</li></ul></li></ul><p>数据库系统的组成</p><ul><li>硬件平台及数据库</li><li>软件</li><li>人员</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章绪论&quot;&gt;&lt;a href=&quot;#第一章绪论&quot; class=&quot;headerlink&quot; title=&quot;第一章绪论&quot;&gt;&lt;/a&gt;第一章绪论&lt;/h2&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>os两个作业调度算法</title>
    <link href="http://yoursite.com/2018/06/15/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/15/作业调度算法/</id>
    <published>2018-06-15T13:40:44.000Z</published>
    <updated>2018-06-15T13:42:33.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="os两个作业调度算法"><a href="#os两个作业调度算法" class="headerlink" title="os两个作业调度算法"></a>os两个作业调度算法</h3><blockquote><p>1.FCFS先来先服务算法</p><p>2.SJF短作业优先算法</p><p>算法描述如下：</p></blockquote><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">author：杨子旭</span></span><br><span class="line"><span class="comment">class：16-5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name; <span class="comment">//进程名</span></span><br><span class="line">    <span class="keyword">bool</span> status;<span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">int</span> arrive;<span class="comment">//到达时间</span></span><br><span class="line">    <span class="keyword">int</span> start;<span class="comment">//开始处理时间</span></span><br><span class="line">    <span class="keyword">int</span> serve;<span class="comment">//服务时间</span></span><br><span class="line">    <span class="keyword">int</span> turn;<span class="comment">//周转时间</span></span><br><span class="line">    <span class="keyword">double</span> T_turn;<span class="comment">//带权周转时间</span></span><br><span class="line">    <span class="keyword">int</span> finish; <span class="comment">//完成时间</span></span><br><span class="line">&#125;JCB;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(JCB *jcb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入作业的个数"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请按顺序输入每个作业的:进程名 到达时间 服务时间"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;jcb[i].name&gt;&gt;jcb[i].arrive&gt;&gt;jcb[i].serve;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Copy</span><span class="params">(JCB *jcb1,JCB *jcb2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        jcb2[i].name=jcb1[i].name;</span><br><span class="line">        jcb2[i].arrive=jcb1[i].arrive;</span><br><span class="line">        jcb2[i].serve=jcb1[i].serve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(JCB * jcb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程名称 到达时间 服务时间 开始时间 完成时间 周转时间 带权周转时间 "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"   "</span>&lt;&lt;jcb[i].name&lt;&lt;<span class="string">"        "</span>&lt;&lt;jcb[i].arrive&lt;&lt;<span class="string">"       "</span>&lt;&lt;jcb[i].serve&lt;&lt;<span class="string">"        "</span>&lt;&lt;jcb[i].start&lt;&lt;<span class="string">"       "</span>&lt;&lt;jcb[i].finish&lt;&lt;<span class="string">"        "</span>&lt;&lt; jcb[i].turn&lt;&lt;<span class="string">"         "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;jcb[i].T_turn&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"平均周转时间 平均带权周转时间"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"     "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;sum1/n&lt;&lt;<span class="string">"     "</span>&lt;&lt;sum2/n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(JCB a,JCB b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.arrive&lt;b.arrive;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(JCB a,JCB b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.serve&lt;b.serve;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum1=<span class="number">0</span>;</span><br><span class="line">    sum2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        jcb1[i+<span class="number">1</span>].start=jcb1[i].start+jcb1[i].serve;</span><br><span class="line">        jcb1[i].status=<span class="literal">true</span>;</span><br><span class="line">        jcb1[i].turn=jcb1[i].start+jcb1[i].serve-jcb1[i].arrive;</span><br><span class="line">        sum1+=jcb1[i].turn;</span><br><span class="line">        jcb1[i].T_turn=jcb1[i].turn*<span class="number">1.0</span>/jcb1[i].serve;</span><br><span class="line">        sum2+=jcb1[i].T_turn;</span><br><span class="line">        jcb1[i].finish=jcb1[i].start+jcb1[i].serve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCFS</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(jcb1,jcb1+n,cmp1);</span><br><span class="line">    jcb1[<span class="number">0</span>].start=jcb1[<span class="number">0</span>].arrive;</span><br><span class="line">    Run(jcb1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SJF</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(jcb1,jcb1+n,cmp2);</span><br><span class="line">    jcb1[<span class="number">0</span>].start=jcb1[<span class="number">0</span>].arrive;</span><br><span class="line">    Run(jcb1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JCB jcb1[Max],jcb2[Max];</span><br><span class="line">    Init(jcb1);</span><br><span class="line">    Copy(jcb1,jcb2);</span><br><span class="line">    FCFS(jcb1);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                       先来先服务算法                "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print(jcb1);</span><br><span class="line">    SJF(jcb2);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                       短作业优先算法                "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print(jcb2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;os两个作业调度算法&quot;&gt;&lt;a href=&quot;#os两个作业调度算法&quot; class=&quot;headerlink&quot; title=&quot;os两个作业调度算法&quot;&gt;&lt;/a&gt;os两个作业调度算法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.FCFS先来先服务算法&lt;/p&gt;
&lt;p&gt;2.SJF短作业优先算法&lt;/p&gt;
&lt;p&gt;算法描述如下：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>动态内存管理-BF算法</title>
    <link href="http://yoursite.com/2018/06/15/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-BF%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/15/动态内存管理-BF算法/</id>
    <published>2018-06-15T13:40:44.000Z</published>
    <updated>2018-06-19T09:44:33.955Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最佳适应算法Best-fit算法</p></blockquote><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 10 <span class="comment">//假定系统允许的最大作业为10</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m 10 <span class="comment">//假定系统允许的空闲区表最大为10</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> minisize 100</span></span><br><span class="line"><span class="built_in">string</span> str[<span class="number">6</span>] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"--------------------------------------------------"</span>,</span><br><span class="line"><span class="string">"-           Author:杨子旭                        -"</span>,</span><br><span class="line"><span class="string">"-          Choose_your_operation:                -"</span>,</span><br><span class="line"><span class="string">"- 0-退出,1-分配内存,2-回收内存,3-显示内存,4-清屏 -"</span>,</span><br><span class="line"><span class="string">"-                                                -"</span>,</span><br><span class="line"><span class="string">"--------------------------------------------------"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll address; <span class="comment">/*已分分区起始地址*/</span></span><br><span class="line">ll len; <span class="comment">/*已分分区长度，单位为字节*/</span></span><br><span class="line"><span class="keyword">int</span> flag; <span class="comment">/*已分配区表登记栏标志，用"0"表示空栏目*/</span></span><br><span class="line">&#125;used;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll address; <span class="comment">//空闲区起始地址</span></span><br><span class="line">ll len; <span class="comment">//空闲区长度，单位为字节</span></span><br><span class="line"><span class="keyword">int</span> flag; <span class="comment">//空闲区表登记栏标志，用"0"表示空栏目，用"1"表示未分配</span></span><br><span class="line">&#125;Free;</span><br><span class="line">Free FL[n];</span><br><span class="line">used UL[n];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BF</span><span class="params">(<span class="keyword">char</span> J, ll n_size)</span> <span class="comment">//采用最佳分配算法分配n_size大小的空间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k;</span><br><span class="line">ll ad;</span><br><span class="line">k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;m; i++) <span class="comment">//寻找空间大于n_size的最小空闲区登记项k</span></span><br><span class="line"><span class="keyword">if</span> (FL[i].len &gt;= n_size &amp;&amp; FL[i].flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || FL[i].len&lt;FL[k].len)</span><br><span class="line">k = i;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span>)<span class="comment">//未找到可用空闲区，返回</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"无可用空闲区"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FL[k].len - n_size &lt;= minisize)<span class="comment">//直接分配</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].flag = <span class="number">0</span>;</span><br><span class="line">ad = FL[k].address;</span><br><span class="line">n_size = FL[k].len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//划分为两部分</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].len = FL[k].len - n_size;</span><br><span class="line">ad = FL[k].address + FL[k].len;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (UL[i].flag != <span class="number">0</span> &amp;&amp; i&lt;n) i++;<span class="comment">//找已分配表中空闲的的地方放入就行</span></span><br><span class="line">UL[i].address = ad;</span><br><span class="line">    UL[i].len = n_size;</span><br><span class="line">    UL[i].flag = J;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UL[pos].address=<span class="number">0</span>;</span><br><span class="line">    UL[pos].len=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recall</span><span class="params">(<span class="keyword">char</span> J)</span>  <span class="comment">//回收作业名为J的作业所占主存空间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k, j, s, t;</span><br><span class="line">ll S, L;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((UL[s].flag != J || UL[s].flag == <span class="number">0</span>) &amp;&amp; s&lt;n) s++;</span><br><span class="line"><span class="keyword">if</span> (s &gt;= n)<span class="comment">//在已分配表中找不到名字为J的作业</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"找不到该作业"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">UL[s].flag = <span class="number">0</span>;</span><br><span class="line">S = UL[s].address;</span><br><span class="line">L = UL[s].len;</span><br><span class="line">j = <span class="number">-1</span>; k = <span class="number">-1</span>; i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;m &amp;&amp; (j == <span class="number">-1</span> || k == <span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FL[i].flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (FL[i].address + FL[i].len == S)k = i;<span class="comment">//找到上邻</span></span><br><span class="line"><span class="keyword">if</span> (FL[i].address == S + L)j = i;<span class="comment">//找到下邻</span></span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k != <span class="number">-1</span> &amp;&amp; j != <span class="number">-1</span>)<span class="comment">//上下邻都有</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].len = FL[j].len + FL[k].len + L;</span><br><span class="line">FL[j].flag = <span class="number">0</span>;</span><br><span class="line">FL[j].address = <span class="number">0</span>;</span><br><span class="line">FL[j].len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k != <span class="number">-1</span> &amp;&amp; j == <span class="number">-1</span>)<span class="comment">//只有上邻</span></span><br><span class="line">    &#123;</span><br><span class="line">          FL[k].len = FL[k].len + L;</span><br><span class="line">          Set(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">-1</span> &amp;&amp; j != <span class="number">-1</span>)<span class="comment">//只有下邻</span></span><br><span class="line">&#123;</span><br><span class="line">FL[j].address = S;</span><br><span class="line">FL[j].len = FL[j].len + L;</span><br><span class="line">Set(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//上下邻都没有</span></span><br><span class="line">&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (FL[t].flag == <span class="number">1</span> &amp;&amp; t&lt;m)</span><br><span class="line">t++;</span><br><span class="line">FL[t].address = S;</span><br><span class="line">FL[t].len = L;</span><br><span class="line">FL[t].flag = <span class="number">1</span>;</span><br><span class="line">Set(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a;</span><br><span class="line">ll n_size;</span><br><span class="line"><span class="keyword">char</span> J;</span><br><span class="line">FL[<span class="number">0</span>].address = <span class="number">0</span>;</span><br><span class="line">FL[<span class="number">0</span>].len = <span class="number">5000</span>;</span><br><span class="line">FL[<span class="number">0</span>].flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;m; i++)</span><br><span class="line">FL[i].flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">UL[i].flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Choose_your_operation:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//a=0程序结束</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//a=1分配主存空间</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入作业名J和作业所需长度n_size: "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; J &gt;&gt; n_size;</span><br><span class="line">BF(J, n_size);<span class="comment">/*分配主存空间*/</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//a=2回收主存空间</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入要回收分区的作业名:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; J;</span><br><span class="line">recall(J);<span class="comment">/*回收主存空间*/</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//a=3显示主存情况</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"空闲分区表："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"起始地址 分区长度 标志"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;m; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; FL[i].address &lt;&lt; <span class="string">"       "</span> &lt;&lt; FL[i].len &lt;&lt; <span class="string">"      "</span> &lt;&lt; FL[i].flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 已分配区表 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"起始地址 分区长度 标志"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; UL[i].address &lt;&lt; <span class="string">"       "</span> &lt;&lt; UL[i].len &lt;&lt; <span class="string">"      "</span>;</span><br><span class="line"><span class="keyword">if</span> (UL[i].flag == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; UL[i].flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(UL[i].flag) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">system(<span class="string">"CLS"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"老铁没这个选项"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最佳适应算法Best-fit算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的天气爬虫</title>
    <link href="http://yoursite.com/2018/06/13/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%A9%E6%B0%94%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2018/06/13/一个简单的天气爬虫/</id>
    <published>2018-06-13T09:40:44.000Z</published>
    <updated>2018-06-13T09:45:06.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个简单的天气爬虫，可以根据你的输入得到不同城市的天气。快来测试一下吧</p></blockquote><a id="more"></a><blockquote><p>输入：你要查询的城市的名称的拼音（最好是区级以上的地方，不然查不到，哈哈）</p><p>输出：一周的天气详细情况</p></blockquote><blockquote><p>test data1:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input:shijiazhuang</span><br><span class="line">output:</span><br><span class="line">石家庄天气预报一周</span><br><span class="line">今天是:<span class="number">2018</span>年<span class="number">06</span>月<span class="number">13</span>日　星期三　戊戌年四月三十 </span><br><span class="line"><span class="number">06</span>月<span class="number">13</span>日 今天 良 晴 <span class="number">20</span>℃ ~ <span class="number">31</span>℃ 北风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">14</span>日 明天 良 晴 <span class="number">23</span>℃ ~ <span class="number">34</span>℃ 东南风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">15</span>日 后天 良 多云 <span class="number">25</span>℃ ~ <span class="number">36</span>℃ 南风 <span class="number">3</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">16</span>日 星期六 良 阴 <span class="number">23</span>℃ ~ <span class="number">32</span>℃ 南风 <span class="number">3</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">17</span>日 星期日 良 多云 <span class="number">21</span>℃ ~ <span class="number">30</span>℃ 南风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">18</span>日 星期一 轻度污染 阴 <span class="number">19</span>℃ ~ <span class="number">28</span>℃ 西风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">19</span>日 星期二 轻度污染 多云 <span class="number">19</span>℃ ~ <span class="number">32</span>℃ 南风 <span class="number">2</span>级</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Fri Jun  8 17:33:10 2018</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 57815</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">"https://www.tianqi.com/"</span></span><br><span class="line">city=input(<span class="string">"请输入您要查询城市名称的拼音"</span>)</span><br><span class="line">url=url+city+<span class="string">"/7/"</span></span><br><span class="line"><span class="comment">#print(url)</span></span><br><span class="line">response=urllib.request.urlopen(url)</span><br><span class="line">soup=BeautifulSoup(response, <span class="string">'html.parser'</span>, from_encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">Class=soup.find_all(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'weatherbox2'</span>&#125;)</span><br><span class="line">week=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'week'</span>&#125;)</span><br><span class="line">temp=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'temp'</span>&#125;)</span><br><span class="line">txt=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'txt'</span>&#125;)</span><br><span class="line">date=soup.find_all(<span class="string">'dl'</span>,attrs=&#123;<span class="string">'class'</span>:re.compile(<span class="string">"table_day7"</span>)&#125;)</span><br><span class="line">air=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'air'</span>&#125;)</span><br><span class="line">title1=soup.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'tit_img01'</span>&#125;).h1.get_text()</span><br><span class="line">title2=soup.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'tit_img01'</span>&#125;).span.get_text()</span><br><span class="line">L=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">    L.append(i.dl.get_text())</span><br><span class="line">print(title1)</span><br><span class="line">print(<span class="string">"今天是:"</span>+title2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    j=i*<span class="number">2</span></span><br><span class="line">    print(L[i],week[i].get_text(),air[i].get_text(),temp[i].get_text(),txt[j].get_text(),txt[j+<span class="number">1</span>].get_text())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个简单的天气爬虫，可以根据你的输入得到不同城市的天气。快来测试一下吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;爬虫&quot;" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="-python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>OS_ch04</title>
    <link href="http://yoursite.com/2018/05/27/OS/"/>
    <id>http://yoursite.com/2018/05/27/OS/</id>
    <published>2018-05-27T02:40:44.000Z</published>
    <updated>2018-05-28T03:02:20.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章-存储器管理"></a>第四章-存储器管理</h2><h3 id="4-1存储器的层次结构"><a href="#4-1存储器的层次结构" class="headerlink" title="4.1存储器的层次结构"></a>4.1存储器的层次结构</h3><h5 id="·CPU寄存器：寄存器"><a href="#·CPU寄存器：寄存器" class="headerlink" title="·CPU寄存器：寄存器"></a>·CPU寄存器：寄存器</h5><h5 id="·主存：高速缓存（cache），主存，磁盘缓存"><a href="#·主存：高速缓存（cache），主存，磁盘缓存" class="headerlink" title="·主存：高速缓存（cache），主存，磁盘缓存"></a>·主存：高速缓存（cache），主存，磁盘缓存</h5><h5 id="·辅存：磁盘，可移动存储介质"><a href="#·辅存：磁盘，可移动存储介质" class="headerlink" title="·辅存：磁盘，可移动存储介质"></a>·辅存：磁盘，可移动存储介质</h5><a id="more"></a><p>#####主存储器：可执行存储器，是计算机硬件的一个重要组成部件，其作用是存放指令和数据，并能有CPU直接随机存取。</p><p>#####寄存器：访问速度最快，但价格昂贵，容量不大。（具有与处理机相同的速度）</p><h5 id="高速缓存：访问速度快于主存储器。"><a href="#高速缓存：访问速度快于主存储器。" class="headerlink" title="高速缓存：访问速度快于主存储器。"></a>高速缓存：访问速度快于主存储器。</h5><h5 id="磁盘缓存：利用主存中的存储空间（并不是实际的存储器）"><a href="#磁盘缓存：利用主存中的存储空间（并不是实际的存储器）" class="headerlink" title="磁盘缓存：利用主存中的存储空间（并不是实际的存储器）"></a>磁盘缓存：利用主存中的存储空间（并不是实际的存储器）</h5><h5 id="由下到上价格越来越高，相对所配置的存储容量越小"><a href="#由下到上价格越来越高，相对所配置的存储容量越小" class="headerlink" title="由下到上价格越来越高，相对所配置的存储容量越小"></a>由下到上价格越来越高，相对所配置的存储容量越小</h5><h3 id="4-2程序的装入和链接"><a href="#4-2程序的装入和链接" class="headerlink" title="4.2程序的装入和链接"></a>4.2程序的装入和链接</h3><h4 id="4-2-1程序的装入"><a href="#4-2-1程序的装入" class="headerlink" title="4.2.1程序的装入"></a>4.2.1程序的装入</h4><h5 id="用户源程序变为可在内存中执行的程序的步骤："><a href="#用户源程序变为可在内存中执行的程序的步骤：" class="headerlink" title="用户源程序变为可在内存中执行的程序的步骤："></a>用户源程序变为可在内存中执行的程序的步骤：</h5><h5 id="编译：由编译程序将用户的源代码编译后形成的一组目标模块。"><a href="#编译：由编译程序将用户的源代码编译后形成的一组目标模块。" class="headerlink" title="编译：由编译程序将用户的源代码编译后形成的一组目标模块。"></a>编译：由编译程序将用户的源代码编译后形成的一组目标模块。</h5><h5 id="链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块"><a href="#链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块" class="headerlink" title="链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块"></a>链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块</h5><h5 id="装入：由装入程序将装入模块装入内存。"><a href="#装入：由装入程序将装入模块装入内存。" class="headerlink" title="装入：由装入程序将装入模块装入内存。"></a>装入：由装入程序将装入模块装入内存。</h5><h5 id="将一个装入模块装入内存时，有三种方式："><a href="#将一个装入模块装入内存时，有三种方式：" class="headerlink" title="将一个装入模块装入内存时，有三种方式："></a>将一个装入模块装入内存时，有三种方式：</h5><ul><li><h5 id="绝对装入方式"><a href="#绝对装入方式" class="headerlink" title="绝对装入方式"></a>绝对装入方式</h5></li><li><h5 id="可重定位装入方式"><a href="#可重定位装入方式" class="headerlink" title="可重定位装入方式"></a>可重定位装入方式</h5></li><li><h5 id="动态运行时装入方式"><a href="#动态运行时装入方式" class="headerlink" title="动态运行时装入方式"></a>动态运行时装入方式</h5></li></ul><h5 id="一：绝对装入方式"><a href="#一：绝对装入方式" class="headerlink" title="一：绝对装入方式"></a>一：绝对装入方式</h5><h5 id="在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。"><a href="#在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。" class="headerlink" title="在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。"></a>在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。</h5><h5 id="装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。"><a href="#装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。" class="headerlink" title="装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。"></a>装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。</h5><h5 id="适用于单道程序"><a href="#适用于单道程序" class="headerlink" title="适用于单道程序"></a>适用于单道程序</h5><h5 id="二：可重定位装入方式"><a href="#二：可重定位装入方式" class="headerlink" title="二：可重定位装入方式"></a>二：可重定位装入方式</h5><h5 id="在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。"><a href="#在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。" class="headerlink" title="在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。"></a>在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。</h5><h5 id="在装入时对目标程序中指令和数据的修改过程称为重定位-。"><a href="#在装入时对目标程序中指令和数据的修改过程称为重定位-。" class="headerlink" title="在装入时对目标程序中指令和数据的修改过程称为重定位 。"></a>在装入时对目标程序中指令和数据的修改过程称为重定位 。</h5><h5 id="地址变换在装入时一次完成，以后不再改变，称为静态重定位。"><a href="#地址变换在装入时一次完成，以后不再改变，称为静态重定位。" class="headerlink" title="地址变换在装入时一次完成，以后不再改变，称为静态重定位。"></a>地址变换在装入时一次完成，以后不再改变，称为静态重定位。</h5><h5 id="三：动态运行时装入方式"><a href="#三：动态运行时装入方式" class="headerlink" title="三：动态运行时装入方式"></a>三：动态运行时装入方式</h5><h5 id="动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器"><a href="#动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器" class="headerlink" title="动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器"></a>动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器</h5><h4 id="4-2-2程序的链接"><a href="#4-2-2程序的链接" class="headerlink" title="4.2.2程序的链接"></a>4.2.2程序的链接</h4><h5 id="静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。"><a href="#静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。" class="headerlink" title="静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。"></a>静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。</h5><h5 id="装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。"><a href="#装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。" class="headerlink" title="装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。"></a>装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。</h5><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><h5 id="·便于修改和更新"><a href="#·便于修改和更新" class="headerlink" title="·便于修改和更新"></a>·便于修改和更新</h5><h5 id="·便于实现对目标模块的共享"><a href="#·便于实现对目标模块的共享" class="headerlink" title="·便于实现对目标模块的共享"></a>·便于实现对目标模块的共享</h5><h5 id="运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。"><a href="#运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。" class="headerlink" title="运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。"></a>运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。</h5><h3 id="4-3连续分配存储器管理方式"><a href="#4-3连续分配存储器管理方式" class="headerlink" title="4.3连续分配存储器管理方式"></a>4.3连续分配存储器管理方式</h3><h5 id="连续分配方式，是指为一个用户程序分配一个连续的内存空间。"><a href="#连续分配方式，是指为一个用户程序分配一个连续的内存空间。" class="headerlink" title="连续分配方式，是指为一个用户程序分配一个连续的内存空间。"></a>连续分配方式，是指为一个用户程序分配一个连续的内存空间。</h5><p>分类：</p><ul><li><h5 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h5><p>最简单的一种存储管理方式，但只能用于单用户、单任务的操作系统。</p><p>把内存分为系统区和用户区两部分，系统区仅提供给OS使用，通常放在内存低址部分，用户区是指除系统区以外的全部内存空间，提供给用户使用。</p></li><li><h5 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h5><p>将内存用户空间划分为若干个固定大小的区域，在每个分区中只装入一道作业，这样把用户空间划分为几个分区，便允许有几道作业并发执行。当有一空闲分区时，便可以再从外存的后备作业队列中，选择一个适当大小的作业装入该分区，当该作业结束时，可再从后备作业队列中找出另一作业调入该分区 </p><p>两种划分方法：</p><p>·分区大小相等</p><p>·分区大小不等</p></li><li><h5 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h5><p>动态分区分配是根据进程的实际需要，动态地为之分配内存空间。作业装入内存时，把可用内存分出一个连续区域给作业，且分区的大小正好适合作业大小的需要。分区的大小和个数依装入作业的需要而定。 </p><p><strong>空闲分区表</strong>：记录每个空闲分区的情况。每个空闲分区占一个表目。</p><p>​    表目包括：分区序号、分区始址、分区大小</p><p><strong>空闲分区链：</strong>在每个分区的起始部分，设置一些用于控制分区分配的信息，以及用于链接各分区所用的前向指针；在分区尾部则设置一后向指针，在分区末尾重复设置状态位和分区大小表目 </p><p>已占分区说明表</p><p><strong>结构</strong>：作业号；起始地址；大小</p><p>分区分配算法：</p><ol><li><strong>首次适应算法FF</strong></li></ol><p>FF算法要求空闲分区表以地址递增的次序排列。在分配内存时，从表首开始顺序查找，直至找到一个大小能满足要求的空闲分区为止；然后按照作业的大小，从该分区中划出一块内存空间分配给请求者，余下的空闲分区仍留在空闲分区表中。若从头到尾不存在满足要求的分区，则分配失败。 </p><ol start="2"><li><p><strong>循环首次适应算法</strong></p><p>在分配内存空间时，从上次找到的空闲分区的下一个空闲分区开始查找，直到找到一个能满足要求的空闲分区，从中划出一块与请求大小相等的内存空间分配给作业。 </p></li><li><p><strong>最佳适应算法</strong></p></li></ol><p>按照容量由大到小排序形成一个空闲分区链</p></li></ul><ul><li><h5 id="可重定位分区分配"><a href="#可重定位分区分配" class="headerlink" title="可重定位分区分配"></a>可重定位分区分配</h5><p>在连续分配方式中，必须把系统或用户程序装入一连续的内存空间。如果在统统中只有若干个小分区，即使它们的容量总和大于要装入的程序，但由于这些分区不相邻，所以无法将程序装入内存。</p><p>将内存中的所有作业进行移动，使它们全部邻接，这样可把原来分散的小分区拼接成大分区，这种方法称为“拼接”或“紧凑”。</p><p>在动态运行时装入的方式时，将相对地址转换为物理地址的工作在程序指令真正要执行时才进行。地址转换需要重定位寄存器的支持。程序执行时访问的内存地址是相对地址与重定位寄存器中的地址相加而成。 </p><h3 id="4-4-对换"><a href="#4-4-对换" class="headerlink" title="4.4 对换"></a>4.4 对换</h3></li></ul><h5 id="多道程序环境下存在的问题-（引入）"><a href="#多道程序环境下存在的问题-（引入）" class="headerlink" title="多道程序环境下存在的问题:（引入）"></a>多道程序环境下存在的问题:（引入）</h5><ul><li><h5 id="阻塞进程占据大量内存空间"><a href="#阻塞进程占据大量内存空间" class="headerlink" title="阻塞进程占据大量内存空间"></a>阻塞进程占据大量内存空间</h5></li><li><h5 id="许多作业在外存而不能进入内存"><a href="#许多作业在外存而不能进入内存" class="headerlink" title="许多作业在外存而不能进入内存"></a>许多作业在外存而不能进入内存</h5><h5 id="·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。"><a href="#·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。" class="headerlink" title="·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。"></a>·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。</h5><h5 id="对换的分类："><a href="#对换的分类：" class="headerlink" title="对换的分类："></a>对换的分类：</h5><h5 id="·整体对换（或进程对换）以整个进程为单位"><a href="#·整体对换（或进程对换）以整个进程为单位" class="headerlink" title="·整体对换（或进程对换）以整个进程为单位"></a>·整体对换（或进程对换）以整个进程为单位</h5><h5 id="·页面对换：以页或段为单位"><a href="#·页面对换：以页或段为单位" class="headerlink" title="·页面对换：以页或段为单位"></a>·页面对换：以页或段为单位</h5><h5 id="对换空间的管理："><a href="#对换空间的管理：" class="headerlink" title="对换空间的管理："></a>对换空间的管理：</h5><h5 id="·一般从磁盘上划出一块空间作为对换区使用"><a href="#·一般从磁盘上划出一块空间作为对换区使用" class="headerlink" title="·一般从磁盘上划出一块空间作为对换区使用"></a>·一般从磁盘上划出一块空间作为对换区使用</h5></li></ul><h4 id="进程的换出与换入"><a href="#进程的换出与换入" class="headerlink" title="进程的换出与换入"></a>进程的换出与换入</h4><h5 id="进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。"><a href="#进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。" class="headerlink" title="进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。"></a>进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。</h5><h5 id="进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。"><a href="#进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。" class="headerlink" title="进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。"></a>进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。</h5><h3 id="4-5分页存储管理方式"><a href="#4-5分页存储管理方式" class="headerlink" title="4.5分页存储管理方式"></a>4.5分页存储管理方式</h3><h5 id="连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。"><a href="#连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。" class="headerlink" title="连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。"></a>连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。</h5><p>  分类：</p><ul><li><h5 id="分页存储管理方式：离散分配的基本单位是页。"><a href="#分页存储管理方式：离散分配的基本单位是页。" class="headerlink" title="分页存储管理方式：离散分配的基本单位是页。"></a>分页存储管理方式：离散分配的基本单位是页。</h5></li><li><h5 id="分段存储管理方式：离散分配的基本单位是段"><a href="#分段存储管理方式：离散分配的基本单位是段" class="headerlink" title="分段存储管理方式：离散分配的基本单位是段"></a>分段存储管理方式：离散分配的基本单位是段</h5><h4 id="4-5-1-页面与页表"><a href="#4-5-1-页面与页表" class="headerlink" title="4.5.1 页面与页表"></a>4.5.1 页面与页表</h4><h5 id="分页式存储管理的原理"><a href="#分页式存储管理的原理" class="headerlink" title="分页式存储管理的原理"></a>分页式存储管理的原理</h5><p>​    ·分页存储管理是将一个进程的逻辑地址空间分成若干个大小相等的片称为页面或页，并为各页加以编号，从0开始</p><p>​    ·内存空间分成与页面相同大小的若干个存储块，称为块或页框。</p><p>​        ·在为进程分配内存时，以块为单位将进程的若干个页分别装入到多个可以不相邻的物理块中。</p><p>​    ·进程的最后一页经常装不满而形成“页内碎片”。</p><h5 id="基本分页式存储管理的原理"><a href="#基本分页式存储管理的原理" class="headerlink" title="基本分页式存储管理的原理"></a>基本分页式存储管理的原理</h5><p>​    系统若能满足一个作业要求的全部块数，此作业才能被装入内存，否则不为它分配任何内存。</p><h5 id="请求分页式存储管理的原理"><a href="#请求分页式存储管理的原理" class="headerlink" title="请求分页式存储管理的原理"></a>请求分页式存储管理的原理</h5><p>​    运行一个作业时，并不要把该作业的全部程序和数据都装入内存，可以只把目前要执行的几页调入内存的空闲块中，其余的仍保存在外存中，以后根据作业运的需要再调入内存。</p><h5 id="地址结构："><a href="#地址结构：" class="headerlink" title="地址结构："></a>地址结构：</h5><p>地址长度：0-11位为页内地址（偏移量），12-31位为页号，地址空间最多允许有1M页。</p><h4 id="4-5-2地址变换机构"><a href="#4-5-2地址变换机构" class="headerlink" title="4.5.2地址变换机构"></a>4.5.2地址变换机构</h4><h5 id="基本的地址变换机构"><a href="#基本的地址变换机构" class="headerlink" title="基本的地址变换机构"></a>基本的地址变换机构</h5><p>在系统中只设置一个页表寄存器PTR，在其中存放页表在内存中的始址和页表的长度。</p><h5 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h5><p>CPU在每存取一个数据时，需要两次访问内存：</p><p>·第一次：访问页表，找到指定页的物理块号，将块号与页内偏移量拼接形成物理地址。</p><p>·第二次：从第一次所得地址中获得所需数据，或向此地址中写入数据。</p><p>·解决方法：在地址变换机构中，增设一个具有并行查寻能力的特殊高速缓冲寄存器，称为“联想存储器”或“快表”。</p><h5 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h5><p>​    将页表分页，并离散地将各个页面分别存放在不同的物理块中，同时为离散分配的页表在建立一张页表，称为外层页表，其每个页表项记录了页表页面的物理块号。 </p></li></ul><h3 id="4-6-1分段存储管理方式的引入"><a href="#4-6-1分段存储管理方式的引入" class="headerlink" title="4.6.1分段存储管理方式的引入"></a>4.6.1分段存储管理方式的引入</h3><ol><li><h5 id="便于编程"><a href="#便于编程" class="headerlink" title="便于编程"></a>便于编程</h5></li><li><h5 id="分段共享"><a href="#分段共享" class="headerlink" title="分段共享"></a>分段共享</h5></li><li><h5 id="分段保护"><a href="#分段保护" class="headerlink" title="分段保护"></a>分段保护</h5></li><li><h5 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h5></li><li><h5 id="动态增长"><a href="#动态增长" class="headerlink" title="动态增长"></a>动态增长</h5></li></ol><h5 id="段表结构：段号、段在内存中的起始地址、段长"><a href="#段表结构：段号、段在内存中的起始地址、段长" class="headerlink" title="段表结构：段号、段在内存中的起始地址、段长"></a>段表结构：段号、段在内存中的起始地址、段长</h5><h5 id="作业表：作业号，段首地址，段表长度"><a href="#作业表：作业号，段首地址，段表长度" class="headerlink" title="作业表：作业号，段首地址，段表长度"></a>作业表：作业号，段首地址，段表长度</h5><h5 id="分页和分段的主要区别："><a href="#分页和分段的主要区别：" class="headerlink" title="分页和分段的主要区别："></a>分页和分段的主要区别：</h5><h5 id="相似点：采用离散分配方式，通过地址映射机构实现地址变换。"><a href="#相似点：采用离散分配方式，通过地址映射机构实现地址变换。" class="headerlink" title="相似点：采用离散分配方式，通过地址映射机构实现地址变换。"></a>相似点：采用离散分配方式，通过地址映射机构实现地址变换。</h5><h5 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h5><h5 id="·页是信息的物理单位，分页式为了满足系统的需要；"><a href="#·页是信息的物理单位，分页式为了满足系统的需要；" class="headerlink" title="·页是信息的物理单位，分页式为了满足系统的需要；"></a>·页是信息的物理单位，分页式为了满足系统的需要；</h5><h5 id="段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要"><a href="#段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要" class="headerlink" title="段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要"></a>段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要</h5><h5 id="·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；"><a href="#·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；" class="headerlink" title="·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；"></a>·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；</h5><h5 id="段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。"><a href="#段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。" class="headerlink" title="段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。"></a>段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。</h5><h5 id="·分页的作业地址空间是一维的，分段的作业地址空间是二维的"><a href="#·分页的作业地址空间是一维的，分段的作业地址空间是二维的" class="headerlink" title="·分页的作业地址空间是一维的，分段的作业地址空间是二维的"></a>·分页的作业地址空间是一维的，分段的作业地址空间是二维的</h5><h3 id="4-6-3信息共享"><a href="#4-6-3信息共享" class="headerlink" title="4.6.3信息共享"></a>4.6.3信息共享</h3><h5 id="可重入代码-Reentrant-Code"><a href="#可重入代码-Reentrant-Code" class="headerlink" title="可重入代码(Reentrant Code):"></a>可重入代码(Reentrant Code):</h5><h5 id="又称为“纯代码”-Pure-Code-在实现段共享时，需要用到可重入代码-Reentrant-Code-。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。"><a href="#又称为“纯代码”-Pure-Code-在实现段共享时，需要用到可重入代码-Reentrant-Code-。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。" class="headerlink" title="又称为“纯代码”(Pure Code),在实现段共享时，需要用到可重入代码(Reentrant Code) 。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。"></a>又称为“纯代码”(Pure Code),在实现段共享时，需要用到可重入代码(Reentrant Code) 。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。</h5><h5 id="在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区-属于该进程私有-中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。"><a href="#在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区-属于该进程私有-中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。" class="headerlink" title="在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区(属于该进程私有)中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。"></a>在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区(属于该进程私有)中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。</h5><h3 id="4-6-4段页式存储管理方式"><a href="#4-6-4段页式存储管理方式" class="headerlink" title="4.6.4段页式存储管理方式"></a>4.6.4段页式存储管理方式</h3><h5 id="基本原理：-先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。"><a href="#基本原理：-先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。" class="headerlink" title="基本原理： 先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。"></a>基本原理： 先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。</h5><h5 id="基本段页式存储管理：把作业的所有段装入内存方可运行。"><a href="#基本段页式存储管理：把作业的所有段装入内存方可运行。" class="headerlink" title="基本段页式存储管理：把作业的所有段装入内存方可运行。"></a>基本段页式存储管理：把作业的所有段装入内存方可运行。</h5><h5 id="请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。"><a href="#请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。" class="headerlink" title="请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。"></a>请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。</h5><h5 id="地址结构：段号；段内页号；页内地址"><a href="#地址结构：段号；段内页号；页内地址" class="headerlink" title="地址结构：段号；段内页号；页内地址"></a>地址结构：段号；段内页号；页内地址</h5><h5 id="段表：段号，页表长度，页表基址"><a href="#段表：段号，页表长度，页表基址" class="headerlink" title="段表：段号，页表长度，页表基址"></a>段表：段号，页表长度，页表基址</h5><h5 id="在段页式系统中，为了获得一条指令或数据，需访问三次内存："><a href="#在段页式系统中，为了获得一条指令或数据，需访问三次内存：" class="headerlink" title="在段页式系统中，为了获得一条指令或数据，需访问三次内存："></a>在段页式系统中，为了获得一条指令或数据，需访问三次内存：</h5><h5 id="·第一次：访问内存中的段表，取得页表始址"><a href="#·第一次：访问内存中的段表，取得页表始址" class="headerlink" title="·第一次：访问内存中的段表，取得页表始址"></a>·第一次：访问内存中的段表，取得页表始址</h5><h5 id="·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址"><a href="#·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址" class="headerlink" title="·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址"></a>·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址</h5><h5 id="·第三次：访问第二次所得的地址，取出指令或数据"><a href="#·第三次：访问第二次所得的地址，取出指令或数据" class="headerlink" title="·第三次：访问第二次所得的地址，取出指令或数据"></a>·第三次：访问第二次所得的地址，取出指令或数据</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第四章-存储器管理&quot;&gt;&lt;a href=&quot;#第四章-存储器管理&quot; class=&quot;headerlink&quot; title=&quot;第四章-存储器管理&quot;&gt;&lt;/a&gt;第四章-存储器管理&lt;/h2&gt;&lt;h3 id=&quot;4-1存储器的层次结构&quot;&gt;&lt;a href=&quot;#4-1存储器的层次结构&quot; class=&quot;headerlink&quot; title=&quot;4.1存储器的层次结构&quot;&gt;&lt;/a&gt;4.1存储器的层次结构&lt;/h3&gt;&lt;h5 id=&quot;·CPU寄存器：寄存器&quot;&gt;&lt;a href=&quot;#·CPU寄存器：寄存器&quot; class=&quot;headerlink&quot; title=&quot;·CPU寄存器：寄存器&quot;&gt;&lt;/a&gt;·CPU寄存器：寄存器&lt;/h5&gt;&lt;h5 id=&quot;·主存：高速缓存（cache），主存，磁盘缓存&quot;&gt;&lt;a href=&quot;#·主存：高速缓存（cache），主存，磁盘缓存&quot; class=&quot;headerlink&quot; title=&quot;·主存：高速缓存（cache），主存，磁盘缓存&quot;&gt;&lt;/a&gt;·主存：高速缓存（cache），主存，磁盘缓存&lt;/h5&gt;&lt;h5 id=&quot;·辅存：磁盘，可移动存储介质&quot;&gt;&lt;a href=&quot;#·辅存：磁盘，可移动存储介质&quot; class=&quot;headerlink&quot; title=&quot;·辅存：磁盘，可移动存储介质&quot;&gt;&lt;/a&gt;·辅存：磁盘，可移动存储介质&lt;/h5&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-os" scheme="http://yoursite.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/22/hello-world/"/>
    <id>http://yoursite.com/2018/05/22/hello-world/</id>
    <published>2018-05-22T13:18:07.558Z</published>
    <updated>2018-05-22T13:18:07.559Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
