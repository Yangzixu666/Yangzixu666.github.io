<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang_1998&#39;s Blog</title>
  
  <subtitle>王鹏赫你在哪呢</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-15T11:47:59.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yangzixu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>K-means算法</title>
    <link href="http://yoursite.com/2018/09/15/K-means/"/>
    <id>http://yoursite.com/2018/09/15/K-means/</id>
    <published>2018-09-15T11:42:16.123Z</published>
    <updated>2018-09-15T11:47:59.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h2><a id="more"></a><blockquote><p><strong>步骤</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 初始化常数K，随机选取初始K个点为质心</span><br><span class="line">- 重复计算一下过程，直到质心不再改变</span><br><span class="line">  - 计算样本与每个质心之间的相似度，将样本归类到最相似的类中</span><br><span class="line">  - 重新计算质心</span><br><span class="line">- 输出最终的质心以及每个类</span><br><span class="line"></span><br><span class="line">聚类中心的初始化：</span><br><span class="line">代表点的选择：</span><br><span class="line">- 经验选择</span><br><span class="line">- “密度法”选择代表点</span><br><span class="line">- 用（k-1)聚类划分求k个代表点</span><br></pre></td></tr></table></figure><blockquote><p> <strong>下面是python代码实现</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">()</span>:</span></span><br><span class="line">    outp=open(<span class="string">'date.txt'</span>,<span class="string">'w'</span>)   <span class="comment">#随缘的数据生成器，可能不能正确的分为4类，可以多试几次，也可以自己手动造数据</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">            a=rm.uniform(<span class="number">5</span>*j,<span class="number">10</span>*j)</span><br><span class="line">            b=<span class="string">"\t"</span></span><br><span class="line">            c=rm.uniform(<span class="number">3</span>*j,<span class="number">3</span>*j+<span class="number">2</span>)</span><br><span class="line">            d=str(a)+b+str(c)+<span class="string">"\n"</span></span><br><span class="line">            outp.write(d)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loaddata</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    data_mat=[]</span><br><span class="line">    <span class="keyword">with</span> open(file_name) <span class="keyword">as</span> fr:</span><br><span class="line">        lines = fr.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lines:</span><br><span class="line">        tmp=i.strip().split(<span class="string">"\t"</span>)</span><br><span class="line">        flt=list(map(<span class="keyword">lambda</span> x:float(x),tmp))</span><br><span class="line">        data_mat.append(flt)</span><br><span class="line">    <span class="keyword">return</span> np.array(data_mat)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dist</span><span class="params">(vec1,vec2)</span>:</span></span><br><span class="line">    Sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> vec1-vec2:</span><br><span class="line">        i=i**<span class="number">2</span></span><br><span class="line">        Sum+=i</span><br><span class="line">    <span class="keyword">return</span> Sum**<span class="number">0.5</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rand_cent</span><span class="params">(L,k)</span>:</span></span><br><span class="line">    n=L.shape[<span class="number">1</span>]<span class="comment">#数据维度 列数  这个题就是有2列</span></span><br><span class="line">    L2=np.zeros((k,n))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        Min=float(min(L[:,i]))</span><br><span class="line">        Rg=float(max(L[:,i]))-Min <span class="comment">#最大值到最小值的范围</span></span><br><span class="line">        L2[:,i]=(Min+Rg*np.random.rand(k,<span class="number">1</span>))[:,<span class="number">0</span>] <span class="comment">#rand（k，1） 生成k*1维的数组，数值在【0,1】之间</span></span><br><span class="line">    <span class="keyword">return</span> L2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Kmeans</span><span class="params">(L,k)</span>:</span></span><br><span class="line">    m=L.shape[<span class="number">0</span>] <span class="comment">#行,也就是数据点的数量</span></span><br><span class="line">    clus=np.zeros((m,<span class="number">2</span>))<span class="comment">#创建m*2的矩阵，两列分别存储每个点所属的簇和该点距离所属质心的距离</span></span><br><span class="line">    cent=rand_cent(L,k)</span><br><span class="line">    <span class="comment">#print(Cent)</span></span><br><span class="line">    clu_change=<span class="keyword">True</span></span><br><span class="line">    <span class="keyword">while</span> clu_change:</span><br><span class="line">        clu_change=<span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            min_dist=np.inf</span><br><span class="line">            min_index=<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k): <span class="comment">#遍历到k个质心的距离</span></span><br><span class="line">                dist_ji=dist(cent[j,:],L[i,:])</span><br><span class="line">                <span class="keyword">if</span> dist_ji&lt;min_dist:</span><br><span class="line">                    min_dist=dist_ji</span><br><span class="line">                    min_index=j<span class="comment">#更新点属于哪个簇</span></span><br><span class="line">            <span class="keyword">if</span>(clus[i][<span class="number">0</span>])!=min_index:</span><br><span class="line">                clu_change=<span class="keyword">True</span></span><br><span class="line">            clus[i,:]=min_index,min_dist**<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            </span><br><span class="line">            pts=L[np.nonzero(list(map(<span class="keyword">lambda</span> x:x==i,clus[:,<span class="number">0</span>])))] </span><br><span class="line">            <span class="comment">#找出是第i个质心的的点</span></span><br><span class="line">            <span class="comment">#  list(map(lambda x:x==i,clus[:,0]))找出x==i即这个点属于第i个簇。 是一个bool类型的数组</span></span><br><span class="line">            <span class="comment">#  np.nonzero(list(map(lambda x:x==i,clus[:,0]))) 返回是true的元素的下标，即是第i个簇的下标</span></span><br><span class="line">            <span class="comment">#  pts接收是第i个簇的元素</span></span><br><span class="line">            cent[i,:]=np.mean(pts,axis=<span class="number">0</span>)<span class="comment">#计算质心坐标，axis=0表示按pts_inclust的列方向计算均值</span></span><br><span class="line">        <span class="keyword">return</span> cent,clus </span><br><span class="line"></span><br><span class="line">getdata()</span><br><span class="line">L=loaddata(<span class="string">'date.txt'</span>)</span><br><span class="line"><span class="comment">#print(L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------作图部分-------------------#</span></span><br><span class="line">Cent,mClus=Kmeans(L,<span class="number">4</span>)</span><br><span class="line"><span class="comment">#print(mClus)</span></span><br><span class="line">print(Cent)</span><br><span class="line">point_x=L[:,<span class="number">0</span>] <span class="comment">#第一列即所有x的坐标</span></span><br><span class="line">point_y=L[:,<span class="number">1</span>] <span class="comment">#第二列即所有y的坐标</span></span><br><span class="line">cent_x=Cent[:,<span class="number">0</span>] <span class="comment">#第一列即所有x的坐标</span></span><br><span class="line">cent_y=Cent[:,<span class="number">1</span>] <span class="comment">#第二列即所有y的坐标</span></span><br><span class="line">fig, ax =plt.subplots(figsize=(<span class="number">10</span>,<span class="number">5</span>)) <span class="comment">#画图</span></span><br><span class="line">ax.scatter(point_x, point_y, s=<span class="number">30</span>, c=<span class="string">"r"</span>, marker=<span class="string">"o"</span>, label=<span class="string">"sample point"</span>)</span><br><span class="line">ax.scatter(cent_x, cent_y, s=<span class="number">100</span>, c=<span class="string">"black"</span>, marker=<span class="string">"v"</span>, label=<span class="string">"centroids"</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">ax.set_xlabel(<span class="string">"x"</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">"y"</span>)</span><br><span class="line">plt.show()<span class="comment">#显示图</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;K-means算法&quot;&gt;&lt;a href=&quot;#K-means算法&quot; class=&quot;headerlink&quot; title=&quot;K-means算法&quot;&gt;&lt;/a&gt;K-means算法&lt;/h2&gt;
    
    </summary>
    
      <category term="-&quot;Machine_Learning&quot;" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="-机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ACM-ICPC 2018 沈阳赛区网络预赛I题</title>
    <link href="http://yoursite.com/2018/09/08/ACM-ICPC%202018%20%E6%B2%88%E9%98%B3%E8%B5%9B%E5%8C%BA%E7%BD%91%E7%BB%9C%E9%A2%84%E8%B5%9BI%E9%A2%98/"/>
    <id>http://yoursite.com/2018/09/08/ACM-ICPC 2018 沈阳赛区网络预赛I题/</id>
    <published>2018-09-08T13:40:44.000Z</published>
    <updated>2018-09-09T12:11:43.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lattice’s-basics-in-digital-electronics"><a href="#Lattice’s-basics-in-digital-electronics" class="headerlink" title="Lattice’s basics in digital electronics"></a>Lattice’s basics in digital electronics</h2><p><a href="https://nanti.jisuanke.com/t/31450" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><p>题面：</p><p>LATTICE is learning Digital Electronic Technology. He is talented, so he understood all those pieces of knowledge in <strong>10^{-9}</strong> second. In the next <strong>10^{-9}</strong>second, he built a data decoding device that decodes data encoded with his special binary coding rule to meaningful words.</p><p>His coding rule is called “prefix code”, a type of code system (typically a variable-length code) distinguished by its possession of the “prefix property”, which requires that there is no whole code word in the system that is a prefix (initial segment) of any other code word in the system. Note that his code is composed of only 0 and 1.</p><p>LATTICE’s device only receives data that perfectly matches LATTICE’s rules, in other words, people who send message to LATTICE will always obey his coding rule. However, in the process of receiving data, there are errors that cannot avoid, so LATTICE uses parity check to detect error bytes, after every 8-bit data there is 1 bit called parity bit, which should be <code>&#39;0&#39;</code> if there are odd number of <code>&#39;1&#39;</code>s in the previous 8 bits and should be <code>&#39;1&#39;</code> if there are even number of <code>&#39;1&#39;</code>s. If the parity bit does not meet the fact, then the whole 9 bits (including the parity bit) should be considered as invalid data and ignored. <strong>Data without parity bit is also considered as invalid data</strong>. Parity bits will be deleted after the parity check.</p><p>For example, consider the given data <code>&quot;101010101010101010101010&quot;</code>, it should be divided into 33parts:<code>&quot;101010101&quot;</code>,<code>&quot;010101010&quot;</code> and <code>&quot;101010&quot;</code>. For the first part, there are 4 <code>&#39;1&#39;</code>s in the first 88 bits, and parity bit is <code>&#39;1&#39;</code>, so this part passed the check. For the second part, there are 4 <code>&#39;1&#39;</code>s and parity bit is <code>&#39;0&#39;</code>, so this part failed the check. For the third part, it has less than 9 bits so it contains no parity bit, so this part also failed the check. The data after parity check is <code>&quot;10101010&quot;</code>, which is the first 8 bits of first part.</p><p>Data passed the parity check will go into a process that decodes LATTICE’s code. The process is described in the following example: consider a situation that, <code>&quot;010&quot;</code> represents <code>&#39;A&#39;</code> and <code>&quot;1011&quot;</code> represents <code>&#39;B&#39;</code>, if the data after parity check is <code>&quot;01010110101011010010&quot;</code>, it can be divided into <code>&quot;010&quot;</code>+<code>&quot;1011&quot;</code>+<code>&quot;010&quot;</code>+<code>&quot;1011&quot;</code>+<code>&quot;010&quot;</code>+<code>&quot;010&quot;</code>, which means <code>&quot;ABABAA&quot;</code> . LATTICE’s device is so exquisite that it can decode all visible characters in the ASCII table .</p><p>LATTICE is famous for his Talk show, some reporters have sneaked into his mansion, they stole the data LATTICE to decode in hexadecimal, the coding rule consists of N pairs of corresponding relations from a bit string Si to an ASCII code Ci, and the message length M, they want to peek his privacy so they come to you to write a program that decodes messages that LATTICE receives.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><blockquote><p> The first line an integer  <strong>T (T&lt;35)</strong>   represents the number of test cases.</p><p>Every test case starts with one line containing two integers,<strong>M(0&lt;M≤100000)</strong>, the number of original characters, and <strong>N (1≤N≤256)</strong>, then N lines, every line contains an integer <strong>Ci,</strong> and a string <strong>Si(0&lt;∣Si∣≤10)</strong>, means that Si <em>represents</em> Ci, the ASCII code to a visible character and Si only contains <code>&#39;0&#39;</code>or <code>&#39;1&#39;</code> and there are no two numbers <strong>i</strong> and <strong>j</strong> that Si is prefix of Sj.</p><p>Then one line contains data that is going to be received in hexadecimal.(0&lt;∣data∣&lt;200000).</p></blockquote><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><blockquote><p>For each test case, output the decoded message in a new line, the length of the decoded message should be the same with the length of original characters, which means you can stop decoding having outputted <strong>M</strong> characters. Input guarantees that it will have no less than <strong>M</strong> valid characters and all given ASCII codes represent visible characters.</p></blockquote><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>Lattice’s encoding rule for test case 2:</p><table><thead><tr><th>ASCII code</th><th>character</th><th>lattice’s code</th></tr></thead><tbody><tr><td>49</td><td>1</td><td>0001</td></tr><tr><td>50</td><td>2</td><td>01001</td></tr><tr><td>51</td><td>3</td><td>011</td></tr></tbody></table><p>the device takes this input in hex</p><blockquote><p>14DB24722698</p></blockquote><p>input in binary</p><blockquote><p>0001 0100 1101 1011 0010 0100 0111 0010 0010 0110 1001 1000</p></blockquote><p>formatted into 66 lines, each line contains 88 data bits and one parity bit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00010100 1</span><br><span class="line">10110110 0</span><br><span class="line">10010001 1</span><br><span class="line">10010001 0</span><br><span class="line">01101001 1</span><br><span class="line">000</span><br></pre></td></tr></table></figure><p>parity check of the third line and the last line failed, so ignore those two lines.parity bits should also be ignored.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00010100</span><br><span class="line">10110110</span><br><span class="line">10010001</span><br><span class="line">01101001</span><br></pre></td></tr></table></figure><p>arrange those bits by the rules informed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0001 01001 011 011 01001 0001 011 01001</span><br></pre></td></tr></table></figure><p>output the result</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12332132</span><br></pre></td></tr></table></figure><p>题解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>映射一下,然后瞎几把模拟就过了。少用STL就行（不然就TLE了）</span><br><span class="line">下边是AC代码</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> M,N;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; mp2;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt;mp;</span><br><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="keyword">char</span> s[Max];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">20</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp.insert(make_pair(<span class="string">'0'</span>,<span class="string">"0000"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'1'</span>,<span class="string">"0001"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'2'</span>,<span class="string">"0010"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'3'</span>,<span class="string">"0011"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'4'</span>,<span class="string">"0100"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'5'</span>,<span class="string">"0101"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'6'</span>,<span class="string">"0110"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'7'</span>,<span class="string">"0111"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'8'</span>,<span class="string">"1000"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'9'</span>,<span class="string">"1001"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'A'</span>,<span class="string">"1010"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'B'</span>,<span class="string">"1011"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'C'</span>,<span class="string">"1100"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'D'</span>,<span class="string">"1101"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'E'</span>,<span class="string">"1110"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'F'</span>,<span class="string">"1111"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'a'</span>,<span class="string">"1010"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'b'</span>,<span class="string">"1011"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'c'</span>,<span class="string">"1100"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'d'</span>,<span class="string">"1101"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'e'</span>,<span class="string">"1110"</span>));</span><br><span class="line">    mp.insert(make_pair(<span class="string">'f'</span>,<span class="string">"1111"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">//cin.tie(0);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s3=<span class="string">""</span>;</span><br><span class="line">        mp2.clear();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;M,&amp;N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;num&gt;&gt;s1;</span><br><span class="line">            mp2.insert(make_pair(s1,num));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> Len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s3+=mp[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//cout&lt;&lt;"s3="&lt;&lt;s3&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">string</span> s4=<span class="string">""</span>,s6=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> pos=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=s3.size();</span><br><span class="line">        <span class="keyword">while</span>(pos+<span class="number">8</span>&lt;len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s3[pos+i]==<span class="string">'1'</span>)</span><br><span class="line">                    sum++;</span><br><span class="line">                s6+=s3[pos+i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((sum%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;s3[pos+<span class="number">8</span>]==<span class="string">'0'</span>)||(sum%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;s3[pos+<span class="number">8</span>]==<span class="string">'1'</span>))</span><br><span class="line">                s4+=s6;</span><br><span class="line">            pos+=<span class="number">9</span>;</span><br><span class="line">            s6=<span class="string">""</span>;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;s4&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">string</span> s5=<span class="string">""</span>;</span><br><span class="line">        Len=s4.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s5+=s4[i];</span><br><span class="line">            <span class="keyword">if</span>(mp2.find(s5)!=mp2.end())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(mp2[s5]);</span><br><span class="line">                num++;</span><br><span class="line">                <span class="comment">//arr2[num++]=char(mp2[s5]);</span></span><br><span class="line">                s5=<span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num==M)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Lattice’s-basics-in-digital-electronics&quot;&gt;&lt;a href=&quot;#Lattice’s-basics-in-digital-electronics&quot; class=&quot;headerlink&quot; title=&quot;Lattice’s basics in digital electronics&quot;&gt;&lt;/a&gt;Lattice’s basics in digital electronics&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/31450&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="-&quot;ACM&quot;" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="-模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>ACM-ICPC 2018 徐州赛区网络预赛F题</title>
    <link href="http://yoursite.com/2018/09/08/ACM-ICPC%202018%20%E5%BE%90%E5%B7%9E%E8%B5%9B%E5%8C%BA%E7%BD%91%E7%BB%9C%E9%A2%84%E8%B5%9BF%E9%A2%98/"/>
    <id>http://yoursite.com/2018/09/08/ACM-ICPC 2018 徐州赛区网络预赛F题/</id>
    <published>2018-09-08T13:40:44.000Z</published>
    <updated>2018-09-09T12:16:16.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Features-Track"><a href="#Features-Track" class="headerlink" title="Features Track"></a>Features Track</h2><p><a href="https://nanti.jisuanke.com/t/31458" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><p>题面：</p><p>Morgana is learning computer vision, and he likes cats, too. One day he wants to find the cat movement from a cat video. To do this, he extracts cat features in each frame. A cat feature is a two-dimension vector &lt;$x$, $y$&gt;. If $x_i$ =$ x_j$ and $y_i$ =$ y_j$, then &lt;$x_i$, $y_i$&gt; &lt;$x_j$, $y_j$&gt; are same features.</p><p>So if cat features are moving, we can think the cat is moving. If feature &lt;$a$, $b$&gt; is appeared in continuous frames, it will form features movement. For example, feature&lt;$a$, $b$&gt; is appeared in frame $2,3,4,7,8$, then it forms two features movement $2-3-4$ and $7-8$ .</p><p>Now given the features in each frames, the number of features may be different, Morgana wants to find the longest features movement.</p><h3 id="input："><a href="#input：" class="headerlink" title="input："></a>input：</h3><blockquote><p>First line contains one integer T$(1 \le T \le 10)$ , giving the test cases.</p><p>Then the first line of each cases contains one integer $n$ (number of frames),</p><p>In The next  $n$ lines, each line contains one integer $k_i$ ( the number of features) and $2k_i$ intergers describe $k_i$ features in ith frame.(The first two integers describe the first feature, the $3td $and $4th$ integer describe the second feature, and so on).</p><p>In each test case the sum number of features $N$ will satisfy $N$$ \le 100000$.</p></blockquote><h3 id="output"><a href="#output" class="headerlink" title="output:"></a>output:</h3><blockquote><p>For each cases, output one line with one integers represents the longest length of features movement.</p></blockquote><p><strong>题解：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">求同一特征出现在连续frame中最大次数，multimap用一下，set去重一下，简单模拟一下就行</span><br><span class="line">下边是AC代码</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 100005</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="built_in">multimap</span>&lt;P,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="built_in">set</span>&lt;P&gt;st;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">multimap</span>&lt;P,<span class="keyword">int</span>&gt;::iterator beg,End,Beg,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        mp.clear();</span><br><span class="line">        st.clear();</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">                mp.insert(make_pair(P(a,b),i));</span><br><span class="line">                st.insert(P(a,b));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">set</span>&lt;P&gt;::iterator it=st.begin();</span><br><span class="line">        <span class="keyword">for</span>(;it!=st.end();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            beg = mp.equal_range(*it).first;</span><br><span class="line">            End = mp.equal_range(*it).second;</span><br><span class="line">            <span class="keyword">int</span> temp=(*beg).second;</span><br><span class="line">            beg++;</span><br><span class="line">            <span class="keyword">int</span> sum=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(m = beg; m != End; m++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((*m).second-temp==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp=(*m).second;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((*m).second-temp==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                    temp=(*m).second;</span><br><span class="line">                    ans=max(ans,sum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ans=max(ans,sum);</span><br><span class="line">                    sum=<span class="number">1</span>;</span><br><span class="line">                    temp=(*m).second;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Features-Track&quot;&gt;&lt;a href=&quot;#Features-Track&quot; class=&quot;headerlink&quot; title=&quot;Features Track&quot;&gt;&lt;/a&gt;Features Track&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/31458&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="-&quot;ACM&quot;" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="-模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>三个最短路径算法</title>
    <link href="http://yoursite.com/2018/07/25/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/07/25/最短路/</id>
    <published>2018-07-25T13:56:44.000Z</published>
    <updated>2018-09-04T08:46:02.249Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>点开看</p></blockquote><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Dijkstra</span></span><br><span class="line"><span class="comment">1.找到最短距离已经确定的顶点，从他出发更新相邻顶点的最短距离</span></span><br><span class="line"><span class="comment">2.之后不再关心最短距离已经确定的顶点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> G[N][N]=</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,INF,INF,INF,INF,</span><br><span class="line"><span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,INF,INF,</span><br><span class="line"><span class="number">5</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>,INF,INF,INF,</span><br><span class="line">INF,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,INF,<span class="number">1</span>,INF,</span><br><span class="line">INF,<span class="number">10</span>,INF,INF,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,</span><br><span class="line">INF,INF,INF,INF,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> d[N];<span class="comment">//从顶点出发的最短距离</span></span><br><span class="line"><span class="keyword">bool</span> used[N];</span><br><span class="line"><span class="keyword">int</span> V;<span class="comment">//顶点数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span><span class="comment">//s 代表起点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(d,d+V,INF);</span><br><span class="line">    fill(used,used+V,<span class="literal">false</span>);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;V;u++)</span><br><span class="line">            <span class="keyword">if</span>(!used[u]&amp;&amp;(v==<span class="number">-1</span>||d[u]&lt;d[v]))</span><br><span class="line">                v=u;</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        used[v]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;V;u++)</span><br><span class="line">            d[u]=min(d[u],d[v]+G[v][u]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    V=<span class="number">7</span>;</span><br><span class="line">    Dijkstra(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;d[<span class="number">5</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*spfa算法  万能算法 推荐使用*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line"><span class="keyword">int</span> G[N][N]=</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,INF,INF,INF,INF,</span><br><span class="line"><span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,INF,INF,</span><br><span class="line"><span class="number">5</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>,INF,INF,INF,</span><br><span class="line">INF,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,INF,<span class="number">1</span>,INF,</span><br><span class="line">INF,<span class="number">10</span>,INF,INF,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,</span><br><span class="line">INF,INF,INF,INF,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> d[N];</span><br><span class="line"><span class="keyword">bool</span> used[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    fill(d,d+V,INF);</span><br><span class="line">    fill(used,used+V,<span class="literal">false</span>);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    used[s]=<span class="literal">true</span>;</span><br><span class="line">    que.push(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        used[now]=<span class="literal">false</span>;<span class="comment">//还原,可以重新入队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[now]+G[now][i]&lt;d[i]) <span class="comment">//松弛操作</span></span><br><span class="line">            &#123;</span><br><span class="line">                d[i]=d[now]+G[now][i];</span><br><span class="line">                <span class="keyword">if</span>(!used[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    used[i]=<span class="literal">true</span>;</span><br><span class="line">                    que.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    V=<span class="number">7</span>;</span><br><span class="line">    <span class="comment">//Dijkstra(0);</span></span><br><span class="line">    spfa(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;d[<span class="number">5</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flyod  求解任意两点间的最短路径 可带负权边*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line"><span class="keyword">int</span> G[N][N]=</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,INF,INF,INF,INF,</span><br><span class="line"><span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,INF,INF,</span><br><span class="line"><span class="number">5</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>,INF,INF,INF,</span><br><span class="line">INF,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,INF,<span class="number">1</span>,INF,</span><br><span class="line">INF,<span class="number">10</span>,INF,INF,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,</span><br><span class="line">INF,INF,INF,INF,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;V; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; V; j++)</span><br><span class="line">                G[i][j] = min(G[i][j], G[i][k]+G[k][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, G[<span class="number">0</span>][<span class="number">5</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    V=<span class="number">7</span>;</span><br><span class="line">    <span class="comment">//Dijkstra(0);</span></span><br><span class="line">    <span class="comment">//spfa(0);</span></span><br><span class="line">    floyd();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;点开看&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;ACM&quot;" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="-shortest path" scheme="http://yoursite.com/tags/shortest-path/"/>
    
  </entry>
  
  <entry>
    <title>DB_5</title>
    <link href="http://yoursite.com/2018/07/05/DB_5/"/>
    <id>http://yoursite.com/2018/07/05/DB_5/</id>
    <published>2018-07-05T12:21:44.000Z</published>
    <updated>2018-07-05T13:49:14.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h3><a id="more"></a><p>数据库的完整性</p><ul><li>数据的正确性和相容性</li></ul><p>数据的完整性和安全性是两个不同概念 </p><ul><li>数据的完整性 ：<ul><li>防止数据库中存在不符合语义的数据，也就是防止数据库中存在 不正确的数据 </li><li>防范对象：不合语义的、不正确的数据 </li></ul></li><li>数据的安全性 ：<ul><li>保护数据库防止恶意的破坏和非法的存取 </li><li>防范对象：非法用户和非法操作    </li></ul></li></ul><p>为维护数据库的完整性， DBMS必须 </p><ul><li>提供定义完整性约束条件的机制 </li><li>提供完整性检查的方法 </li><li>违约处理    </li></ul><p>实体参照完整性</p><ul><li>检查主码值是否唯一，如果不唯一则拒绝插入或修改 </li><li>检查主码的各个属性是否为空，只要有一个为空就拒 绝插入或修改    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--在列级定义主码</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno <span class="built_in">CHAR</span>(<span class="number">9</span>) PRIMARY <span class="keyword">KEY</span>，</span><br><span class="line">Sname <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>，</span><br><span class="line">Ssex <span class="built_in">CHAR</span>(<span class="number">2</span>) ，</span><br><span class="line">Sage <span class="built_in">SMALLINT</span>，</span><br><span class="line">Sdept <span class="built_in">CHAR</span>(<span class="number">20</span>));</span><br><span class="line"><span class="comment">--在表级定义主码</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno <span class="built_in">CHAR</span>(<span class="number">9</span>) ，</span><br><span class="line">Sname <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>，</span><br><span class="line">Ssex <span class="built_in">CHAR</span>(<span class="number">2</span>) ，</span><br><span class="line">Sage <span class="built_in">SMALLINT</span>，</span><br><span class="line">Sdept <span class="built_in">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (Sno));</span><br></pre></td></tr></table></figure><p>检查记录中主码值是否唯一的一种方法是进行<strong>全表扫描</strong>    </p><p>参照完整性</p><ul><li>关系模型的参照完整性定义    <ul><li>在CREATE TABLE中用FOREIGN KEY短语定义哪些 列为外码    </li><li>用REFERENCES短语指明这些外码参照哪些表的主码    </li></ul></li><li><img src="C:\Users\57815\AppData\Local\Temp\1530341355202.png" alt="1530341355202"></li></ul><p><img src="C:\Users\57815\AppData\Local\Temp\1530341635374.png" alt="1530341635374"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(</span><br><span class="line">    Sno <span class="built_in">CHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>，</span><br><span class="line">Cno <span class="built_in">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>，</span><br><span class="line">    Grade <span class="built_in">SMALLINT</span>，</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>（Sno， Cno），</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (Sno) <span class="keyword">REFERENCES</span> Student(Sno)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="comment">/*级联删除SC表中相应的元组*/</span></span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>， <span class="comment">/*级联更新SC表中相应的元组*/</span></span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">    <span class="comment">/*当删除course 表中的元组造成了与SC表不一致时拒绝删除*/</span></span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">    <span class="comment">/*当更新course表中的cno时， 级联更新SC表中相应的元组*/</span></span><br><span class="line">)；</span><br></pre></td></tr></table></figure><p>用户自定义完整性</p><p>CREATE TABLE时定义 </p><ul><li>列值非空（NOT NULL） </li><li>列值唯一（UNIQUE） </li><li>检查列值是否满足一个布尔表达式（CHECK）    </li></ul><p>属性上的约束条件检查和违约处理    </p><ul><li>插入元组或修改属性的值时， RDBMS检查属性上 的约束条件是否被满足 </li><li>如果不满足则操作被拒绝执行    </li></ul><p>在CREATE TABLE时可以用CHECK短语定义元组 上的约束条件，即元组级的限制    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--当学生的性别是男时，其名字不能以Ms.打头。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(</span><br><span class="line">    Sno <span class="built_in">CHAR</span>(<span class="number">9</span>)，</span><br><span class="line">    Sname <span class="built_in">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>，</span><br><span class="line">    Ssex <span class="built_in">CHAR</span>(<span class="number">2</span>)，</span><br><span class="line">    Sage <span class="built_in">SMALLINT</span>，</span><br><span class="line">    Sdept <span class="built_in">CHAR</span>(<span class="number">20</span>)，</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (Sno)，</span><br><span class="line">    <span class="keyword">CHECK</span> (Ssex=<span class="string">'女'</span> <span class="keyword">OR</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'Ms.%'</span>)</span><br><span class="line"><span class="comment">/*定义了元组中Sname和 Ssex两个属性值之间的约束条件*/</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>元组上的约束条件检查和违约处理 </p><ul><li>插入元组或修改属性的值时， RDBMS检查元组上的 约束条件是否被满足 </li><li>如果不满足则操作被拒绝执行    </li></ul><p>完整性约束命名子句 ❖CONSTRAINT 约束    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--建立学生登记表Student，要求学号在90000~99999之间，姓名不能取空值，年龄小于30，性别只能是“男”或“女” 。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(</span><br><span class="line">    Sno <span class="built_in">NUMERIC</span>(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span> (Sno <span class="keyword">BETWEEN</span> <span class="number">90000</span> <span class="keyword">AND</span> <span class="number">99999</span>)，</span><br><span class="line">    Sname <span class="built_in">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C2 <span class="keyword">NOT</span> <span class="literal">NULL</span>，</span><br><span class="line">    Sage <span class="built_in">NUMERIC</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C3 <span class="keyword">CHECK</span> (Sage &lt; <span class="number">30</span>)，</span><br><span class="line">    Ssex <span class="built_in">CHAR</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C4 <span class="keyword">CHECK</span> (Ssex <span class="keyword">IN</span> ( <span class="string">'男'</span>， <span class="string">'女'</span>))，</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> StudentKey PRIMARY <span class="keyword">KEY</span>(Sno)</span><br><span class="line">)；</span><br><span class="line"><span class="comment">--在Student表上建立了5个约束条件，包括主码约束（命名为StudentKey）以及C1、 C2、 C3、 C4四个列级约束。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--建立教师表Teacher，要求每个教师的应发工资不低于3000元。（应发工资等于实发工资Sal和扣除项Deduct之和）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEACHER</span><br><span class="line">(</span><br><span class="line">    Eno <span class="built_in">NUMERIC</span>(<span class="number">4</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    Ename <span class="built_in">CHAR</span>(<span class="number">10</span>) ,</span><br><span class="line">    Job <span class="built_in">char</span>(<span class="number">8</span>),</span><br><span class="line">    Sal <span class="built_in">NUMERIC</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">    Deduct <span class="built_in">NUMERIC</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">    Deptno <span class="built_in">NUMERIC</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">constraint</span> EMPFKEY FOREGIN <span class="keyword">KEY</span> (Deptno) <span class="keyword">REFERENCES</span> DEPT(Deptno)</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span>(Sal + Deduct &gt;= <span class="number">3000</span>)</span><br><span class="line">)；</span><br></pre></td></tr></table></figure><p>使用ALTER TABLE语句修改表中的完整性限制    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--修改表Student中的约束条件，要求学号改为在900000~999999之间，年龄由小于30改为小于40 </span></span><br><span class="line"><span class="comment">--可以先删除原来的约束条件，再增加新的约束条件</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> C1;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span> (Sno <span class="keyword">BETWEEN</span> <span class="number">900000</span> <span class="keyword">AND</span> <span class="number">999999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> C3;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> C3 <span class="keyword">CHECK</span> (Sage &lt; <span class="number">40</span>)；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库完整性&quot;&gt;&lt;a href=&quot;#数据库完整性&quot; class=&quot;headerlink&quot; title=&quot;数据库完整性&quot;&gt;&lt;/a&gt;数据库完整性&lt;/h3&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_6</title>
    <link href="http://yoursite.com/2018/07/05/DB_6/"/>
    <id>http://yoursite.com/2018/07/05/DB_6/</id>
    <published>2018-07-05T12:21:44.000Z</published>
    <updated>2018-07-05T13:50:18.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第六章-关系数据库理论"><a href="#第六章-关系数据库理论" class="headerlink" title="第六章 关系数据库理论"></a>第六章 关系数据库理论</h2><a id="more"></a><h4 id="什么是数据依赖"><a href="#什么是数据依赖" class="headerlink" title="什么是数据依赖"></a>什么是数据依赖</h4><h5 id="完整性约束的表现形式"><a href="#完整性约束的表现形式" class="headerlink" title="完整性约束的表现形式"></a>完整性约束的表现形式</h5><ul><li>限定属性取值范围：例如成绩必须在0-100之间</li><li>定义属性值间的相互关联</li></ul><h5 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖"></a>数据依赖</h5><ul><li>一个关系内部属性与属性之间的约束关系</li><li>现实世界属性间相互联系的抽象</li><li>数据内在的性质</li><li>语义的体现</li></ul><h5 id="数据依赖的类型"><a href="#数据依赖的类型" class="headerlink" title="数据依赖的类型"></a>数据依赖的类型</h5><ul><li>函数依赖（FD）</li><li>多值依赖（MVD)</li><li>其他</li></ul><h4 id="关系模式的简化表示"><a href="#关系模式的简化表示" class="headerlink" title="关系模式的简化表示"></a>关系模式的简化表示</h4><p>R（U,D,DOM,F）</p><p>R：关系名</p><p>D：属性的域</p><p>DOM：属性的映射关系</p><p>F：依赖关系</p><p>简化为一个三元组：</p><p>R（U,F）</p><p>当且仅当U上的一个关系r满足F时， r称为关系模 式 R（U, F）的一个关系    </p><blockquote><p> 例子：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">STUDENT(U,D,dom,F)</span><br><span class="line"></span><br><span class="line">U&#123;sno,name,age&#125;　　//理解为表的属性集合</span><br><span class="line"></span><br><span class="line">D&#123;char,int&#125;　　// 理解为表中字段的类型集合</span><br><span class="line"></span><br><span class="line">dom&#123;dom(sno)=dom(name)=char,dom(age)=int&#125;　　// 理解为每个字段具体的取值</span><br><span class="line"></span><br><span class="line">F&#123;sno-&gt;name,sno-&gt;age&#125;　　// 理解为表字段的关系</span><br></pre></td></tr></table></figure><blockquote><p>学生的学号（Sno）、所在系（Sdept） 系主任姓名（Mname）、课程号（Cno） 成绩（Grade） </p><p>单一的关系模式 ： Student &lt;U、 F&gt; </p><p>U ＝｛Sno, Sdept, Mname, Cno, Grade ｝    </p></blockquote><p>数据库的语义：</p><ul><li>一个系有若干学生，一个学生只属于一个系；</li><li>一个系只有一名主任；</li><li>一个学生可以选修多门课程，每门课程有若干学生选修</li><li>每个学生所学的每门课程都有一个成绩</li></ul><p>属性组U上的一组函数依赖</p><p>F ＝｛Sno → Sdept, Sdept → Mname, (Sno, Cno) → Grade ｝    </p><p><img src="C:\Users\57815\AppData\Local\Temp\1530346090890.png" alt="1530346090890"></p><h4 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h4><p>设<strong>R(U)是一个属性集U上的关系模式， X和Y是U的子集</strong> 若对于R(U)的任意一个可能的关系r， r中不可能存在两个元组 在X上的属性值相等， 而在Y上的属性值不等， 则称 <strong>“X函 数确定Y” 或 “Y函数依赖于X”</strong> ， 记作<strong>X→Y</strong>。 X称为这个函数依赖的<strong>决定属性集</strong>(Determinant)。 Y=f(x)    </p><ul><li>函数依赖不是指关系模式R的某个或某些关系实例满足的约 束条件，而是指R的所有关系实例均要满足的约束条件</li><li>​    函数依赖是语义范畴的概念。只能根据数据的语义来确定函 数依赖。    </li></ul><h4 id="函数依赖可以从不同角度分为："><a href="#函数依赖可以从不同角度分为：" class="headerlink" title="函数依赖可以从不同角度分为："></a>函数依赖可以从不同角度分为：</h4><ul><li>平凡函数依赖与非平凡函数依赖</li><li>完全函数依赖与部分函数依赖</li><li>传递函数依赖</li></ul><p>–在关系模式R（U）中，对于U的子集X和Y</p><p>如果X→Y，但Y不是X的真子集，则称X→ Y是非平凡函数依赖</p><p>如果X→Y，但是Y是X的真子集，则称X→ Y是非平凡函数依赖</p><blockquote><p>例如</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">非平凡函数依赖： (Sno, Cno) → Grade</span><br><span class="line">平凡函数依赖： </span><br><span class="line">(Sno, Cno) → Sno</span><br><span class="line">(Sno, Cno) → Cno</span><br></pre></td></tr></table></figure><p>–<strong>部分函数依赖</strong>：如果X在关系模式R(U)中，如果X→Y，并且对于X的任 何一个真子集X ′ ，都有X′ → Y, 则称Y部分函数依赖于X  ，记作X<img src="C:\Users\57815\AppData\Local\Temp\1530539782236.png" alt="1530539782236">  Y     </p><p>–<strong>完全函数依赖</strong>：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。</p><p>–<strong>传递函数依赖</strong>：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z，则称Z传递函数依赖于X。</p><h3 id="码"><a href="#码" class="headerlink" title="码"></a>码</h3><blockquote><p>Q：码，主码，候选码的区别  </p><p>A：码是数据系统中的基本概念。所谓码就是能唯一标识实体的属性，是整个实体集的性质，而不是单个实体的性质。它包括超码，候选吗，主码。  </p><p><strong>超码是一个或多个属性的集合，这些属性可以让我们在一个实体集中唯一地标识一个实体。</strong></p><p>如果K是一个超码，那么K的任意超集也是超码，也就是如果K是超码，那么所有包含K的集合也是超码。  所以候选码是最小超码，它们的任意真子集都不能成为超码。  如果K是超码，那么所有包含K的集合都不能是候选码。  </p><p><strong>从多个候选码中任意选一个作为主码，如果候选码只有一个，那么候选码就是主码。</strong>  </p><p>先说候选码，候选码就是可以区别一个元组（即表中的一行数据）的属性或属性的集合，比如学生表student(id,name,age,sex,deptno),其中的id是可以唯一标识一个元组的，所以id是可以作为候选码的，既然id都可以做候选码了，那么id和name这两个属性的组合可不可以唯一区别一个元组呢？显然是可以的。此时的id可以成为码，id和name的组合也可以成为码，但是id和name的组合不能称之为候选码&lt;（超码），因为即使去掉name属性，剩下的id属性也完全可以唯一标识一个元组，就是说，<strong>候选码中的所有属性都是必须的，缺少了任何一个属性，就不能唯一标识一个元组了</strong>，给候选码下一个精确的定义就是：<strong>可以唯一标识一个元组的最少的属性集合。</strong>而码是没有最少属性这个要求的。另外，一个表的候选码可能有多个，从这些个候选码中选择一个做为主码，至于选择哪一个候选码，这个是无所谓的，只要是从候选码中选的就行。  至于主属性，刚才提到了，一个表可以有多个候选码，那么对于某个属性来说，如果这个属性存在于所有的候选码中，它就称之为主属性 </p><p><strong>关系模式 R 中属性或属性组X 并非 R的码，但 X 是另一个关系模式的码，则称 X 是R 的外部码 （Foreign key） 也称外码</strong>  如在SC（Sno， Cno， Grade）中， Sno不是码，但Sno是 关系模式S（Sno， Sdept， Sage）的码，则Sno是关系模 式SC的外部码 </p><p>主码与外码一起提供了表示关系间联系的手段    </p></blockquote><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>1 、第一范式（1NF）  在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。  满足第一范式的关系模式并不一定是一个好的关系 模式。    </p><p>所谓第一范式（1NF）是指数据库表的每一列(即每个属性)都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。<strong>简而言之，第一范式就是无重复的列。</strong> </p><p> 2、 第二范式（2NF）  第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p><p>第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。员工信息表中加上了员工编号（emp_id）列，因为每个员工的员工编号是唯一的，因此每个员工可以被唯一区分。这个唯一属性列被称为主关键字或主键、主码。  </p><p>第二范式（2NF）<strong>要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。</strong>为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。<strong>简而言之，第二范式就是非主属性依赖于主关键字。</strong></p><p>  3 、第三范式（3NF）  满足第三范式（3NF）必须先满足第二范式（2NF）。在满足第二范式的基础上，切不存在传递函数依赖，那么就是第三范式。简而言之，<strong>第三范式就是属性不依赖于其它非主属性。</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1NF-2NF</span><br><span class="line">消除非主属性对主码的部分依赖</span><br><span class="line">拆表</span><br><span class="line">2NF-3NF</span><br><span class="line">消除非主属性对主码的传递依赖</span><br><span class="line">拆表</span><br><span class="line">采用投影分解法，把Sgrade分解为两个关 系模式，以</span><br><span class="line">消除传递函数依赖</span><br><span class="line">SG（Sno， Cno, Grade）</span><br><span class="line">GR（Grade， Result）</span><br></pre></td></tr></table></figure><p>Armstrong公理系统，关系模式R&lt;U,F&gt;有以下推理规则</p><ul><li>自反律</li><li>增广律</li><li>传递律</li></ul><p>Armstrong公理系统的推理规则    </p><ul><li>合并规则</li><li>伪传递规则</li><li>分解规则</li></ul><p><img src="C:\Users\57815\AppData\Local\Temp\1530594818512.png" alt="1530594818512"></p><p>闭包：在关系模式R&lt;U, F&gt;中为F所逻辑蕴含(或推导)的函数依赖 的全体叫做F的闭包，记为F+    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第六章-关系数据库理论&quot;&gt;&lt;a href=&quot;#第六章-关系数据库理论&quot; class=&quot;headerlink&quot; title=&quot;第六章 关系数据库理论&quot;&gt;&lt;/a&gt;第六章 关系数据库理论&lt;/h2&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_7</title>
    <link href="http://yoursite.com/2018/07/05/DB_7/"/>
    <id>http://yoursite.com/2018/07/05/DB_7/</id>
    <published>2018-07-05T12:21:44.000Z</published>
    <updated>2018-07-05T13:50:39.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第七章-数据库设计"><a href="#第七章-数据库设计" class="headerlink" title="第七章 数据库设计"></a>第七章 数据库设计</h2><a id="more"></a><ul><li>数据库设计概述</li><li>需求分析</li><li>概念结构设计<ul><li><strong>将需求分析得到的用户需求抽象为信息结构即概念模型的 过程就是概念结构设计</strong>     </li></ul></li><li>逻辑结构设计</li><li>数据库的物理设计<ul><li>数据库在物理设备上的<strong>存储结构</strong>与<strong>存取方法</strong>称为数据 库的物理结构，它依赖于给定的计算机系统    </li></ul></li><li>数据库实施和维护</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❖数据库设计分6个阶段</span><br><span class="line"> 需求分析</span><br><span class="line"> 概念结构设计</span><br><span class="line"> 逻辑结构设计</span><br><span class="line"> 物理结构设计</span><br><span class="line"> 数据库实施</span><br><span class="line"> 数据库运行和维护</span><br><span class="line">❖需求分析和概念设计独立于任何数据库管理系统</span><br><span class="line">❖逻辑设计和物理设计与选用的DBMS密切相关</span><br></pre></td></tr></table></figure><p>E-R图合并冲突</p><ul><li>属性冲突<ul><li>属性值类型</li><li>取值范围</li><li>取值集合不同</li><li>属性取值单位冲突</li></ul></li><li>命名冲突<ul><li>同名异义</li><li>异名同义</li></ul></li><li>结构冲突</li></ul><p>DBMS常用存取方法</p><ul><li>索引方法</li><li>聚簇方法</li><li>HASH方法</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第七章-数据库设计&quot;&gt;&lt;a href=&quot;#第七章-数据库设计&quot; class=&quot;headerlink&quot; title=&quot;第七章 数据库设计&quot;&gt;&lt;/a&gt;第七章 数据库设计&lt;/h2&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_9</title>
    <link href="http://yoursite.com/2018/07/05/DB_9/"/>
    <id>http://yoursite.com/2018/07/05/DB_9/</id>
    <published>2018-07-05T12:21:44.000Z</published>
    <updated>2018-07-05T13:51:21.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库恢复技术"><a href="#数据库恢复技术" class="headerlink" title="数据库恢复技术"></a>数据库恢复技术</h2><a id="more"></a><h4 id="第一节-事务的基本概念"><a href="#第一节-事务的基本概念" class="headerlink" title="第一节 事务的基本概念"></a>第一节 事务的基本概念</h4><p>定义</p><ul><li>一个数据操作序列</li><li>一个不可分割的工作单位</li><li>恢复和并发控制的基本单位</li></ul><p>事务和程序的比较</p><ul><li>在关系数据库中，一个事务可以是一条或者多条SQL语句，也可以包含一个或多个程序</li><li>一个程序通常包含多个事务</li></ul><p>显示定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span></span><br><span class="line"><span class="keyword">SQL</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">SQL</span> <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">commit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span></span><br><span class="line"><span class="keyword">SQL</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">SQL</span> <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">rollback</span></span><br></pre></td></tr></table></figure><p>隐式方式</p><ul><li>当用户没有显示地定义事务时，DBMS按缺省规定自动划分事务</li></ul><p>commit：操作序列全做</p><ul><li>事务正常结束</li><li>提交事务的所有操作（读+更新）</li><li>事务中所有对数据库的更新永久生效</li></ul><p>Rollback：操作序列全不做</p><ul><li>事务异常终止</li><li><strong>回滚</strong>事务的所有更新操作，事务回到开始时的状态</li></ul><p>如果没有显示定义事务，则一个SQL语句为一个事 务。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> student  <span class="comment">-- 一条</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Update</span> student  <span class="comment">-- 两条</span></span><br><span class="line"><span class="keyword">Set</span> sdept=<span class="string">'IS'</span></span><br><span class="line"><span class="keyword">Where</span> sno=<span class="string">'201215121'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Update</span> student  <span class="comment">-- 三条</span></span><br><span class="line"><span class="keyword">Set</span> sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">Where</span> sno=<span class="string">'201215125'</span></span><br></pre></td></tr></table></figure><p>​    显示定义事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> student <span class="comment">--一条</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Begin</span> <span class="keyword">transaction</span>  <span class="comment">--两条</span></span><br><span class="line"><span class="keyword">Update</span> student</span><br><span class="line"><span class="keyword">Set</span> sdept=<span class="string">'IS'</span></span><br><span class="line"><span class="keyword">Where</span> sno=<span class="string">'201215121'</span></span><br><span class="line"><span class="keyword">Update</span> student</span><br><span class="line"><span class="keyword">Set</span> sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">Where</span> sno=<span class="string">'201215125'</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure><p>事务的特性</p><ul><li><strong>原子性</strong><ul><li>是我也是数据库的逻辑工作单位<ul><li>事务中包括的诸多操作，要么都做，要么都不做</li></ul></li></ul></li><li><strong>一致性</strong><ul><li>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态</li><li>只要事务的 原子性不遭到破坏， 就能保证一致性。    </li></ul></li><li><strong>隔离性</strong><ul><li>对并发执行而言一个事务的执行不能被其他事务干扰</li><li>并发执行的各个事务之间不能相互干扰</li></ul></li><li><strong>持续性(也称永久性)</strong><ul><li>一个事务一旦提交，它对数据库的改变就应该是永久性的</li><li>接下来的其他操作或故障不应该对其执行结果有任何影响</li></ul></li></ul><h4 id="第二节-数据库恢复概述"><a href="#第二节-数据库恢复概述" class="headerlink" title="第二节 数据库恢复概述"></a>第二节 数据库恢复概述</h4><p>故障是不可避免的 </p><ul><li>计算机硬件故障 </li><li>系统软件和应用软件的错误 </li><li>操作员的失误 </li><li>恶意的破坏    </li></ul><p>故障的影响 </p><ul><li>运行事务非正常中断 </li><li>破坏数据库    </li></ul><p>数据库管理系统对故障的对策 </p><ul><li>DBMS提供恢复子系统 </li><li><strong>保证故障发生后，能把数据库从错误状态恢复到某一 已知的正确状态</strong>，这就是数据库的恢复 </li><li>保证事务ACID    </li></ul><p>恢复技术是衡量系统优劣的重要指标 </p><p>数据库恢复机制是数据库管理系统的重要组成部 分，占整个系统代码的百分之十以上    </p><h4 id="第三节-故障种类"><a href="#第三节-故障种类" class="headerlink" title="第三节 故障种类"></a>第三节 故障种类</h4><ul><li><p>事务内部的故障</p><ul><li><p>有的是可以通过事务程序本身发现的</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line">读账户甲的余额BALANCE；</span><br><span class="line">BALANCE=BALANCE-AMOUNT； (AMOUNT 为转账金额)</span><br><span class="line">写回BALANCE；</span><br><span class="line"><span class="keyword">IF</span>(BALANCE &lt; <span class="number">0</span> ) <span class="keyword">THEN</span></span><br><span class="line">&#123;</span><br><span class="line">打印<span class="string">'金额不足，不能转账'</span>；</span><br><span class="line"><span class="keyword">ROLLBACK</span>； (撤销刚才的修改，恢复事务)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">&#123;</span><br><span class="line">读账户乙的余额BALANCE1；</span><br><span class="line">BALANCE1=BALANCE1+AMOUNT；</span><br><span class="line">写回BALANCE1；</span><br><span class="line"><span class="keyword">COMMIT</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ul></li><li><p>有的是非预期的(事务故障仅指这类<strong>非预期的故障</strong> )</p><ul><li>运算溢出 </li><li>并发事务发生死锁而被选中撤销该事务 </li><li>违反了某些完整性限制等    </li></ul></li><li><p>事务故障的恢复：撤销事务(UNDO)</p></li></ul></li><li><p>系统故障</p><ul><li>系统故障称为软故障，是指造成系统停止运转的任何事件，使得系统需要重新启动<ul><li>整个系统的正常运行突然被破坏 </li><li>所有正在运行的事务都非正常终止 </li><li>不破坏数据库 </li><li>内存中数据库缓冲区的信息全部丢失    </li></ul></li><li>系统故障的常见原因<ul><li>特定类型的硬件故障(如：CPU)</li><li>操作系统故障</li><li>DBMS代码错误</li><li>系统断电</li></ul></li><li>系统故障的恢复<ul><li>发生系统故障时，事务未提交    <ul><li>恢复策略：强行撤消（UNDO）所有未完成事务    </li></ul></li><li>发生系统故障时，事务已提交，但缓冲区中的信 息尚未完全写回到磁盘上    <ul><li>恢复策略：重做（REDO）所有已提交的事务    </li></ul></li></ul></li></ul></li><li><p>介质故障</p><ul><li>介质故障：称为硬故障，指外存故障<ul><li>磁盘损坏</li><li>磁头碰撞</li><li>操作系统的某种潜在错误</li><li>瞬时磁场干扰</li></ul></li><li>介质故障的恢复<ul><li>装入数据库发生介质故障前某个时刻的数据副本    </li><li>重做自此时开始的所有成功事务，将这些事务已 提交的结果重新记入数据库    </li></ul></li></ul></li><li>计算机病毒<ul><li>一种人为的故障或破坏，是一些恶作剧者研制的一种 计算机程序    </li><li>可以繁殖和传播    </li><li>危害<ul><li>破坏、盗窃系统中的数据    </li><li>破坏系统文件    </li></ul></li></ul></li></ul><p>数据故障小结</p><p><img src="https://i.loli.net/2018/06/24/5b2fa38c531ba.png" alt="1529848705530"></p><h4 id="第四节-数据恢复实现技术"><a href="#第四节-数据恢复实现技术" class="headerlink" title="第四节 数据恢复实现技术"></a>第四节 数据恢复实现技术</h4><ul><li>恢复操作的基本原理<ul><li>冗余，用存储在系统其它地方的数据冗余来重建数据库中已被破坏或不正确的那部分数据</li></ul></li><li>恢复机制涉及的关键问题<ul><li>如何建立冗余数据<ul><li>数据转储</li><li>登录日志文件</li></ul></li><li>如何利用这些冗余数据实施数据恢复</li></ul></li></ul><p>数据转储</p><ul><li>转储是指DBA将整个数据库复制到磁带或另一个 磁盘上保存起来的过程  </li><li>这些备用的数据文本称为后备副本或后援副本    </li><li>如何使用    <ul><li>数据库遭到破坏后可以将后备副本重新装入    </li><li>重装后备副本只能将数据库恢复到转储时的状态    </li></ul></li></ul><p>转储方法：</p><p>按转存状态：</p><ul><li>静态转储 <ul><li>在系统中无运行事务时进行转储</li><li>转储开始时数据库处于一致性状态    </li><li>转储期间不允许对数据库的任何存取、修改活动    </li><li>优点：实现简单    </li><li>缺点：降低了数据库的可用性<ul><li>​    转储必须等用户事务结束    </li><li>​    新的事务必须等转储结束    </li></ul></li></ul></li><li>动态转储<ul><li>转储操作与用户事务并发进行    </li><li>转储期间允许对数据库进行存取或修改    </li><li>优点    <ul><li>不用等待正在运行的用户事务结束    </li><li>不会影响新事务的运行    </li></ul></li><li>缺点<ul><li>不能保证副本中的数据正确有效</li></ul></li></ul></li></ul><p>按转存方式： </p><ul><li>海量转储<ul><li>每次转储全部数据库</li></ul></li><li>增量转储<ul><li>每次只转储上次转出后更新过的数据</li></ul></li></ul><p>海量转储与增量转储比较 </p><ul><li>从恢复角度看，使用海量转储得到的后备副本进行恢 复往往更方便 </li><li>但如果数据库很大，事务处理又十分频繁，则增量转 储方式更实用更有效    </li></ul><p><img src="C:\Users\57815\AppData\Local\Temp\1529932479592.png" alt="1529932479592"></p><p>转储策略</p><ul><li>定期进行数据转储，制作后备副本</li><li>但转储又是十分耗费时间和资源的，不能频繁进行    </li><li>DBA应该根据数据库使用情况确定适当的转储周期 和转储方法    </li></ul><p>登录日志文件</p><ul><li>日志文件的格式和内容    </li><li>日志文件的作用    </li><li>登记日志文件    </li></ul><p>什么是日志文件</p><ul><li>日志文件爱是用来记录事务对数据库的更新操作的文件</li></ul><p>日志文件的格式   </p><ul><li>以记录为单位的日志文件    <ul><li>各个事务的开始标记(BEGIN TRANSACTION)    </li><li>各个事务的结束标记(COMMIT或ROLLBACK)    </li><li>各个事务的所有更新操作</li><li>以上均作为日志文件中的一个日志记录 (log record)    </li></ul></li><li>每条记录为单位的日志文件，每条日志记录的内容<ul><li>事务标识</li><li>操作类型</li><li>操作对象</li><li>更新前数据的旧值</li><li>更新后数据的新值</li></ul></li><li>以数据块为单位的日志文件    <ul><li>事务标识</li><li>被更新的数据块</li></ul></li></ul><p>日志文件的作用</p><ul><li>进行事务故障恢复</li><li>进行系统故障恢复</li><li>协助后备副本进行介质故障恢复</li></ul><p>登记日志文件</p><ul><li><strong>登记的次序严格按并行事务执行</strong></li><li><strong>必须写日志文件，后写数据库</strong><ul><li>写日志文件操作：把表示这个修改的日志记录写到日志文件    </li><li>写数据库操作：把对数据的修改写到数据库中    </li></ul></li></ul><p>为什么要先写日志文件    </p><ul><li>写数据库和写日志文件是两个不同的操作 </li><li>在这两个操作之间可能发生故障 </li><li>如果先写了数据库修改，而在日志文件中没有登记下 这个修改，则以后就无法恢复这个修改了 </li><li>如果先写日志，但没有修改数据库，按日志文件恢复 时只不过是多执行一次不必要的UNDO操作，并不会影 响数据库的正确性    </li></ul><p>事务故障：事务在运行至正常终止点前被终止</p><p>恢复方法</p><ul><li>由恢复子系统利用日志文件撤销（UNDO）此事务已对数据库进行的修改</li><li>事务故障的恢复由系统自动完成，对用户是透明 的，不需要用户干预    </li></ul><p>事务故障的恢复步骤</p><ul><li>反向扫描日志文件(即从后往前扫描日志文件)，查找该事物的更新操作</li><li>对该事务的更新操作执行逆操作。即将日志记录中 “更新前的值”（Befor Image, BI）写入数据库    <ul><li>插入操作， “更新前的值”为空，则相当于做删除操作    </li><li>删除操作，“更新后的值”为空，则相当于做插入操作    </li><li>若是修改操作，则用BI 代替 AI（After Image）    </li></ul></li><li>继续反向扫描，并做同样处理    </li><li>如此处理下去，直至读到此事务的开始标记，事 务故障恢复就完成了    </li></ul><p>系统故障造成数据库不一致状态的原因    </p><ul><li>未完成事务对数据库的更新已写入数据库    </li><li>已提交事务对数据库的更新还留在缓冲区没来得及写 入数据库    </li></ul><p>恢复方法</p><ul><li>Undo 故障发生时未完成的事务    </li><li>Redo 已完成的事务    </li></ul><p>系统故障的恢复由系统在<strong>重新启动</strong>时自动完成， 不需要用户干预    </p><p>系统故障恢复步骤</p><ul><li>正向扫描日志文件（即从头扫描日志文件）    <ul><li>重做(REDO) 队列: 在故障发生前已经提交的事务    <ul><li>这些事务既有BEGIN TRANSACTION记录，也有COMMIT记录    </li></ul></li><li>撤销 (Undo)队列:故障发生时尚未完成的事务    <ul><li>这些事务只有BEGIN TRANSACTION记录，无相应的COMMIT记录    </li></ul></li></ul></li><li>对撤销(Undo)队列事务进行撤销(UNDO)处理    <ul><li>反向扫描日志文件，对每个UNDO事务的更新操作执行 逆操作    </li><li>即将日志记录中“更新前的值” 写入数据库    </li></ul></li><li>对重做(Redo)队列事务进行重做(REDO)处理 <ul><li>正向扫描日志文件，对每个REDO事务重新执行登记的 操作 </li><li>即将日志记录中“更新后的值” 写入数据库    </li></ul></li></ul><p>介质故障的恢复</p><ul><li>重装数据库<ul><li>使数据库恢复到一致性状态</li></ul></li><li>重做已完成的事务</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库恢复技术&quot;&gt;&lt;a href=&quot;#数据库恢复技术&quot; class=&quot;headerlink&quot; title=&quot;数据库恢复技术&quot;&gt;&lt;/a&gt;数据库恢复技术&lt;/h2&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_11</title>
    <link href="http://yoursite.com/2018/07/05/DB_10/"/>
    <id>http://yoursite.com/2018/07/05/DB_10/</id>
    <published>2018-07-05T12:21:44.000Z</published>
    <updated>2018-07-05T13:51:55.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第11章-并发控制"><a href="#第11章-并发控制" class="headerlink" title="第11章 并发控制"></a>第11章 并发控制</h3><a id="more"></a><p>不同的多事务执行方式</p><ul><li>同时并发方式<ul><li>多处理机系统中，每个处理机可以运行一个事务，多个处理机可以同时运行多个事务，实现多个事务真正的并行运行。</li></ul></li><li>并发带来的问题<ul><li>会产生多个事务同时存取同一数据的情况</li><li>可能会存取不正确的数据，破坏事务一致性和数据库的一致性</li></ul></li></ul><p><strong>并发操作带来的数据不一致性</strong></p><ul><li><strong>丢失修改</strong><ul><li>两个事务T 1和T2读入同一数据并修改， T2的提交 结果破坏了T 1提交的结果， 导致T1的修改被丢失    </li></ul></li><li><strong>不可重复读</strong><ul><li>不可重复读是指事务T1读取数据后， 事务T2 执行更新操作， 使T1无法再现前一次读取结果    </li></ul></li><li><strong>读脏数据</strong><ul><li>事务T1修改某一数据， 并将其写回磁盘</li><li>事务T2读取同一数据后， T1由于某种原因被撤销    </li><li>这时T1已修改过的数据恢复原值， T2读到的数据就与 数据库中的数据不一致    </li><li><strong>T2读到的数据就为“脏” 数据， 即不正确的数据</strong>    </li></ul></li></ul><p>数据不一致性：<strong>由于并发操作破坏了事务的隔离性</strong>    </p><p>并发控制就是要用<strong>正确的方式调度并发操作</strong>，使一 个用户事务的执行不受其他事务的干扰，从而避免 造成数据的不一致性 .</p><p>并发控制的主要技术</p><ul><li>有封锁</li><li>时间戳</li><li>乐观控制法</li></ul><p>封锁：封锁就是事务T在对某个数据对象（例如表、记录 等）操作之前，先向系统发出请求，对其加锁    </p><p>加锁后事务T就对该数据对象有了一定的控制，在 事务T释放它的锁之前，其它的事务不能更新此数 据对象    </p><p>基本封锁类型：</p><ul><li><strong>排他锁(X锁) 写锁</strong><ul><li>若事务T对数据对象A加上X锁，则只允许T读取 和修改A，其它任何事务都不能再对A加任何类型 的锁，直到T释放A上的锁    </li></ul></li><li><strong>共享锁(S锁) 读锁</strong><ul><li>若事务T对数据对象A加上S锁，则其它事<strong>务只能再 对A加S锁</strong>，而不能加X锁，直到T释放A上的S锁    </li></ul></li></ul><p><strong>避免活锁</strong>：<strong>采用先来先服务的策略</strong>   </p><ul><li>当多个事务请求封锁同一数据对象时    </li><li>按请求封锁的先后次序对这些事务排队    </li><li>该数据对象上的锁一旦释放， 首先批准申请队列中第 一个事务获得锁    </li></ul><p><strong>产生死锁的原因是两个或多个事务都已封锁了一 些数据对象，然后又都请求对已为其他事务封锁 的数据对象加锁，从而出现死等待</strong>    </p><p>预防死锁的方法：</p><ul><li><strong>一次封锁法</strong></li><li><strong>顺序封锁法</strong></li></ul><p>死锁的诊断</p><ul><li>超时法    </li><li>事务等待图法    </li></ul><p>并发控制子系统周期性地（比如每隔数秒）生成 事务等待图，检测事务。如果发现图中存在回路， 则表示系统中出现了死锁    </p><p>死锁的解除</p><ul><li>选择一个处理死锁代价最小的事务，将其撤消    </li><li>释放此事务持有的所有的锁，使其它事务能继续 运行下去    </li></ul><p>并发调度的可串行性</p><ul><li>DBMS对并发事务不同的调度可能会产生不同的结果</li></ul><p><strong>将所有事务串行起来的调度策略一定是正确的调度策略</strong>    </p><p>可串行化(Serializable)调度    </p><ul><li>多个事务的并发执行是正确的，当且仅当其结果与按 某一次序串行地执行这些事务时的结果相同    </li></ul><p>可串行性</p><ul><li>是并发事务正确调度的准则    </li><li>一个给定的并发调度，当且仅当它是可串行化的，才认为是正确调度    </li></ul><p>冲突操作是指<strong>不同的事务</strong>对<strong>同一个数据</strong>的读写操</p><table><thead><tr><th>作和写写操作 Ri (x)与Wj(x)</th><th>/<em> 事务Ti读x， Tj写x</em>/</th></tr></thead><tbody><tr><td> Wi(x)与Wj(x)</td><td>/<em> 事务Ti写x， Tj写x</em>/</td></tr></tbody></table><p> 可串行化调度的充分条件    </p><p> 一个调度Sc在保证冲突操作的次序不变的情况下，通 过交换两个事务不冲突操作的次序得到另一个调度Sc’ ， 如果Sc’是串行的，称调度Sc为冲突可串行化的调度    </p><p>一个调度是冲突可串行化，一定是可串行化的调度    </p><p>两段锁协议：</p><ul><li><p>封锁协议：运用封锁方法时，对数据对象加锁时 需要约定一些规则    </p><ul><li><p>何时申请封锁    </p></li><li><p>持锁时间    </p></li><li><p>何时释放封锁等  </p></li></ul></li></ul><p>两段锁协议：<strong>指所有事务必须分两个阶段对数据 项加锁和解锁</strong>   </p><ul><li>在对任何数据进行读、写操作之前，事务首先要获得 对该数据的封锁    </li><li>在释放一个封锁之后，事务不再申请和获得任何其他 封锁    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">“两段”锁的含义：事务分为两个阶段</span><br><span class="line"> 第一阶段是获得封锁，也称为扩展阶段</span><br><span class="line"> 事务可以申请获得任何数据项上的任何类型的锁，但是不能释</span><br><span class="line">放任何锁</span><br><span class="line"> 第二阶段是释放封锁，也称为收缩阶段</span><br><span class="line"> 事务可以释放任何数据项上的任何类型的锁，但是不能再申请</span><br><span class="line">任何锁</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一次封锁法要求每个事务必须一次将所有要使用的数</span><br><span class="line">据全部加锁，否则就不能继续执行，因此一次封锁法</span><br><span class="line">遵守两段锁协议</span><br><span class="line"> 但是两段锁协议并不要求事务必须一次将所有要使用</span><br><span class="line">的数据全部加锁，因此遵守两段锁协议的事务可能发</span><br><span class="line">生死锁</span><br></pre></td></tr></table></figure><p><strong>封锁对象的大小称为封锁粒度</strong>    </p><p><strong>封锁的对象：逻辑单元，物理单元</strong>    </p><p>选择封锁粒度的原则：</p><ul><li>需要处理多个关系的大量元组的用户事务：以数据库为封锁单位</li><li>需要处理大量元组的用户事务：以关系为封锁单元    </li><li>只处理少量元组的用户事务：以元组为封锁单位    </li></ul><p><img src="C:\Users\57815\AppData\Local\Temp\1530622095648.png" alt="1530622095648"></p><p>多粒度封锁协议    </p><ul><li><p>允许多粒度树中的每个结点被独立地加锁    </p></li><li><p>对一个结点加锁意味着这个结点的所有后裔结点 也被加以同样类型的锁    </p></li><li><p>在多粒度封锁中一个数据对象可能以两种方式封 锁： <strong>显式封锁</strong>和<strong>隐式封锁</strong>   </p></li></ul><p>显式封锁: 直接加到数据对象上的封锁    </p><p>隐式封锁: 该数据对象没有独立加锁，是由于其上 级结点加锁而使该数据对象加上了锁    </p><p>显式封锁和隐式封锁的效果是一样的    </p><p>系统必须搜索其上级结点数据库、关系R1 </p><ul><li>还要搜索R1的下级结点，即R1中的每一个元组 </li><li>如果其中某一个数据对象已经加了不相容锁，则T必须等待    </li></ul><p>对某个数据对象加锁，系统要检查    </p><ul><li>该数据对象    <ul><li>有无显式封锁与之冲突    </li></ul></li><li>所有上级结点    <ul><li>检查本事务的显式封锁是否与该数据对象上的隐式封锁冲突 (由上级结点已加的封锁造成的 )</li></ul></li><li>所有下级结点    <ul><li>看上面的显式封锁是否与本事务的隐式封锁（将加到下级结点 的封锁）冲突    </li></ul></li></ul><p>引进意向锁（intention lock）目的 </p><ul><li>提高对某个数据对象加锁时系统的检查效率    </li></ul><p>如果对一个结点加意向锁，则说明该结点的下层结 点正在被加锁   </p><p> 对任一结点加基本锁，必须先对它的上层结点加意 向锁    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">IS锁(意向共享锁)</span><br><span class="line"> 如果对一个数据对象加IS锁， 表示它的后裔结点拟（意</span><br><span class="line">向） 加S锁</span><br><span class="line"> 例如：事务T1要对R1中某个元组加S锁， 则要首先对关</span><br><span class="line">系R1和数据库加IS锁</span><br><span class="line"></span><br><span class="line">IX锁(意向排它锁)</span><br><span class="line"> 如果对一个数据对象加IX锁，表示它的后裔结点拟</span><br><span class="line">（意向）加X锁</span><br><span class="line"> 例如：事务T1要对R1中某个元组加X锁，则要首先对</span><br><span class="line">关 系R1和数据库加IX锁</span><br><span class="line"></span><br><span class="line">SIX锁(共享意向排它锁)</span><br><span class="line"> 如果对一个数据对象加SIX锁，表示对它加S锁，再加</span><br><span class="line">IX锁，即SIX = S + IX</span><br><span class="line"> 例：对某个表加SIX锁，则表示该事务要读整个表（所</span><br><span class="line">以要对该表加S锁），同时会更新个别元组（所以要对</span><br><span class="line">该表加IX锁）</span><br></pre></td></tr></table></figure><p><img src="C:\Users\57815\AppData\Local\Temp\1530622936942.png" alt="1530622936942"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第11章-并发控制&quot;&gt;&lt;a href=&quot;#第11章-并发控制&quot; class=&quot;headerlink&quot; title=&quot;第11章 并发控制&quot;&gt;&lt;/a&gt;第11章 并发控制&lt;/h3&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_4</title>
    <link href="http://yoursite.com/2018/07/05/DB_4/"/>
    <id>http://yoursite.com/2018/07/05/DB_4/</id>
    <published>2018-07-05T12:21:44.000Z</published>
    <updated>2018-07-05T13:47:19.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第四章：数据库安全性"><a href="#第四章：数据库安全性" class="headerlink" title="第四章：数据库安全性"></a>第四章：数据库安全性</h3><a id="more"></a><p>数据库安全性控制的常用方法 </p><ul><li><strong>用户标识和鉴定</strong> <ul><li>系统提供的最外层安全保护措施    </li></ul></li><li><strong>存取控制</strong> <ul><li>自主存取控制方法 <ul><li>通过 SQL 的 GRANT 语句和 REVOKE 语句实现    </li><li>定义用户存取权限：定义用户可以在哪些数据库 对象上进行哪些类型的操作    </li><li>定义存取权限称为授权    </li></ul></li><li>授权与回收 </li><li>数据库角色    </li></ul></li><li><strong>视图</strong> </li><li><strong>审计</strong> </li><li><strong>密码存储</strong>    </li></ul><p>创建用户名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> login <span class="string">'张三'</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">password</span> = <span class="string">'abc123'</span>;</span><br></pre></td></tr></table></figure><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'张三'</span> <span class="keyword">for</span> login <span class="string">'张三'</span></span><br><span class="line"><span class="keyword">with</span> default_schema=s_t</span><br></pre></td></tr></table></figure><p>存取控制机制组成</p><ul><li>定义用户权限</li><li>合法权限检查</li></ul><p>常用存取控制方法</p><ul><li>自主存取控制（DAC)</li><li>强制存取控制 (MAC)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--把查询Student表权限授给用户U1。</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">TO</span> U1；</span><br><span class="line"><span class="comment">--把对Student表和Course表的全部权限授予用户U2和U3</span></span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> <span class="keyword">table</span> Student,Course</span><br><span class="line"><span class="keyword">TO</span> u2,u3</span><br><span class="line"><span class="comment">--把对表SC的查询权限授予所有用户。</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> <span class="keyword">table</span> sc</span><br><span class="line"><span class="keyword">to</span> <span class="keyword">public</span></span><br><span class="line"><span class="comment">--把查询Student表和修改学生学号的权限授给用户U4 。</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">update</span>(sno),<span class="keyword">select</span> <span class="keyword">on</span> <span class="keyword">table</span> student</span><br><span class="line"><span class="keyword">to</span> u4</span><br><span class="line"><span class="comment">--把对表SC的INSERT权限授予U5用户，并允许他再将此权限授予其他用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">insert</span> <span class="keyword">on</span> <span class="keyword">table</span> sc</span><br><span class="line"><span class="keyword">to</span> u5</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--把用户U4修改学生学号的权限收回。</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">update</span>(sno) <span class="keyword">on</span> <span class="keyword">table</span> student</span><br><span class="line"><span class="keyword">from</span> u4;</span><br><span class="line"><span class="comment">--收回所有用户对表SC的查询权限。</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span> <span class="keyword">on</span> <span class="keyword">table</span> sc</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">--把用户U5对SC表的INSERT权限收回。</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> <span class="keyword">table</span> sc</span><br><span class="line"><span class="keyword">from</span> u5 <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure><p><strong>数据库角色：被命名的一组与数据库操作相关的权限</strong></p><ul><li>角色是权限的集合</li><li>可以为一组具有相同权限的用户创建一个角色</li><li>简化授权的过程</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--通过角色来实现将一组权限授予一个用户。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> R1;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span>,<span class="keyword">insert</span> <span class="keyword">on</span> <span class="keyword">table</span> student</span><br><span class="line"><span class="keyword">to</span> r1;</span><br><span class="line"><span class="keyword">GRANT</span> R1</span><br><span class="line"><span class="keyword">TO</span> <span class="string">'王平'</span>、 <span class="string">'张明'</span>， <span class="string">'赵玲'</span></span><br><span class="line">一次性通过R1回收<span class="number">3</span>个权限</span><br><span class="line"><span class="keyword">revoke</span> R1</span><br><span class="line"><span class="keyword">from</span> <span class="string">'王平'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第四章：数据库安全性&quot;&gt;&lt;a href=&quot;#第四章：数据库安全性&quot; class=&quot;headerlink&quot; title=&quot;第四章：数据库安全性&quot;&gt;&lt;/a&gt;第四章：数据库安全性&lt;/h3&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_3</title>
    <link href="http://yoursite.com/2018/07/05/DB_3/"/>
    <id>http://yoursite.com/2018/07/05/DB_3/</id>
    <published>2018-07-05T12:21:44.000Z</published>
    <updated>2018-07-05T13:46:53.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关系数据库标准语言SQL"><a href="#关系数据库标准语言SQL" class="headerlink" title="关系数据库标准语言SQL"></a>关系数据库标准语言SQL</h3><a id="more"></a><p>SQL：是一个通用的、 功能极强的关系数据库语言。同时也是一种介于关系代数 与关系演算之间的<strong>结构化查询</strong>语言    </p><p><strong>数据定义</strong>、<strong>数据查询</strong>、<strong>数据操纵</strong>和<strong>数据控制</strong></p><p>SQL已经成为关系数据库的<strong>查询标准</strong>    </p><p>数据定义：模式定义、表定义、视图和 索引的定义    </p><p>创建数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> student <span class="comment">--创建数据库</span></span><br><span class="line"><span class="keyword">use</span> student <span class="comment">--使用数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> student <span class="comment">--删除数据库 （不能删除当前数据库）</span></span><br></pre></td></tr></table></figure><p>模式（schema）</p><ul><li>模式是一个<strong>独立于数据库用户的非重复命名空间</strong>，在这个这个空间中可以定义该模式包含的数据库对象。例如：基本表，视图，索引等</li><li>一个数据库可以有多个模式，模式 隶属于数据库    </li></ul><p>模式的定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">schema</span> <span class="keyword">Test</span> authorization zhang</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    sno <span class="built_in">char</span>(<span class="number">9</span>) primary <span class="keyword">key</span>,</span><br><span class="line">        sname <span class="built_in">char</span>(<span class="number">20</span>),</span><br><span class="line">        sage <span class="built_in">int</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>删除模式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">schema</span> <span class="keyword">test</span> <span class="keyword">cascade</span>(级联) |RESTRICT</span><br><span class="line"><span class="keyword">cascade</span><span class="comment">--删除模式的同时把该模式中所有的数据库对象全部删除</span></span><br><span class="line">restrict(限制)</span><br><span class="line"><span class="comment">--如果该模式中定义了下属的数据库对象（如表、视图等），则</span></span><br><span class="line"><span class="comment">--拒绝该删除语句的执行</span></span><br><span class="line"><span class="comment">--当该模式中没有任何下属的对象时才能执行</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">    sno <span class="built_in">char</span>(<span class="number">9</span>) primary <span class="keyword">key</span>,</span><br><span class="line">    sname <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>,</span><br><span class="line">    sex <span class="built_in">char</span>(<span class="number">2</span>),</span><br><span class="line">    sage <span class="built_in">smallint</span>,</span><br><span class="line">    sdept <span class="built_in">char</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course</span><br><span class="line">(</span><br><span class="line">    cno <span class="built_in">char</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</span><br><span class="line">    cname <span class="built_in">char</span>(<span class="number">40</span>),</span><br><span class="line">    cpno <span class="built_in">char</span>(<span class="number">4</span>),</span><br><span class="line">    credit <span class="built_in">smallint</span>,</span><br><span class="line">    foreign <span class="keyword">key</span>(cpno)   <span class="keyword">references</span> course(cno)</span><br><span class="line">    <span class="comment">--primary key(cno)</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主码约束：primary key</span><br><span class="line">唯一约束：unique</span><br><span class="line">非空值约束：not null</span><br><span class="line">参照完整性约束：foreign key</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--向Student表增加“入学时间”列，其数据类型为日期型。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student </span><br><span class="line"><span class="keyword">add</span> entrance <span class="built_in">date</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--将年龄的数据类型由字符型（假设原来的数据类型是字符型）改为整数。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">column</span> sage <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--增加课程名称必须取唯一值的约束条件。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> course</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">unique</span>(cname)</span><br></pre></td></tr></table></figure><p>删除基本表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student restrict|<span class="keyword">cascade</span></span><br><span class="line">restrict:删除表是有限制的</span><br><span class="line"><span class="comment">--欲删除的基本表不能被其他表的约束所引用</span></span><br><span class="line"><span class="comment">--如果存在依赖该表的对象，则此表不能被删除</span></span><br><span class="line"><span class="keyword">cascade</span>：删除该表没有限制</span><br><span class="line"><span class="comment">--在删除基本表的同时，相关的依赖对象一起删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student <span class="keyword">CASCADE</span>;</span><br><span class="line">如果选择CASCADE时可以删除表，视图也自动被删除</span><br></pre></td></tr></table></figure><p>建立索引是加快查询速度的有效手段    </p><p>有些DBMS自动建立以下列上的索引 </p><ul><li>PRIMARY KEY </li><li>UNIQUE<ul><li>对于已含重复值的属性列不能建UNIQUE索引 </li><li>对某个列建立UNIQUE索引后， 插入新记录时DBMS会 自动检查新记录在该列上是否取了重复值。 这相当于 增加了一个UNIQUE约束    </li></ul></li></ul><p>建立索引</p><blockquote><p>为学生-课程数据库中的Student， Course， SC三 个表建立索引。其中Student表按学号升序建唯一索引， Course表按课程号升序建唯一索引， SC表按学号升序 和课程号降序建唯一索引。    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> Stuindex <span class="keyword">on</span> student(sno);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> Couindex <span class="keyword">on</span> Course(cno);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> SCindex <span class="keyword">on</span> SC(sno <span class="keyword">ASC</span>,CNO <span class="keyword">DESC</span>);</span><br><span class="line">ASC <span class="comment">--升序(默认)</span></span><br><span class="line">DESC<span class="comment">-- 降序</span></span><br></pre></td></tr></table></figure><p>聚簇索引：建立聚簇索引后， 基表中数据也需要按指定的聚簇属性值 的升序或降序存放。 也即聚簇索引的索引项顺序与表中记 录的物理顺序一致    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> clustered <span class="keyword">index</span> stuname <span class="keyword">on</span> student(sname)</span><br><span class="line"><span class="comment">--在一个基本表上最多只能建立一个聚簇索引</span></span><br><span class="line"><span class="comment">--聚簇索引的用途：对于某些类型的查询，可以提高查询效率</span></span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">name</span></span><br><span class="line"><span class="comment">--删除索引时，系统会从数据字典中删去有关该索引的描述</span></span><br></pre></td></tr></table></figure><p>删除student表的studentname索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> student.studname</span><br></pre></td></tr></table></figure><p>数据查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--投影 </span></span><br><span class="line"><span class="comment">--例如：查询全体学生的学号、姓名、所在系。</span></span><br><span class="line"><span class="keyword">select</span> sno,sname,sdept</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询全体学生的详细记录</span></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="comment">--查询全体学生的姓名、出生年份</span></span><br><span class="line"><span class="keyword">select</span> sname,<span class="number">2016</span>-sage <span class="string">'Birthday'</span>(别名)</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="comment">--查询全体学生的人数。</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(sname) <span class="string">'学生人数'</span></span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">--在每个学生的姓名后面显示字符串2007</span></span><br><span class="line"><span class="keyword">select</span> sname,<span class="string">'2007'</span></span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--选择</span></span><br><span class="line"><span class="comment">--在SELECT子句中使用DISTINCT短语</span></span><br><span class="line"><span class="comment">--例如：查询选修了课程的学生的学号</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br></pre></td></tr></table></figure><p><img src="C:\Users\57815\AppData\Local\Temp\1530190393149.png" alt="1530190393149"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!= 、&lt;&gt;不等于</span><br><span class="line">IS NULL,IS NOT NULL 是否空值</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询年龄在20~23岁（包括20岁和23岁）之间的学生的姓名、系别和年龄。</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname， Sdept， Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>；</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询信息系（IS）、数学系（MA）和计算机科学系(CS）学生的姓名和性别。</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname， Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> ( <span class="string">'IS'</span>， <span class="string">'MA'</span>， <span class="string">'CS'</span> );</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--字符串匹配</span></span><br><span class="line"><span class="comment">-- % (百分号) 代表任意长度（长度可以为0）的字符串</span></span><br><span class="line"><span class="comment">-- _ (下横线) 代表任意单个字符</span></span><br><span class="line"><span class="comment">-- 当用户要查询的字符串本身就含有 % 或 _ 时，要使用</span></span><br><span class="line"><span class="comment">-- ESCAPE '&lt;换码字符&gt;' 短语对通配符进行转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询所有姓刘学生的姓名、学号和性别</span></span><br><span class="line"><span class="keyword">select</span> sname,sno,ssex</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'刘%'</span>;</span><br><span class="line"><span class="comment">--查询姓"欧阳"且全名为三个汉字的学生的姓名</span></span><br><span class="line"><span class="keyword">select</span> sname </span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'欧阳_'</span></span><br><span class="line"><span class="comment">--查询DB_Design课程的课程号和学分。</span></span><br><span class="line"><span class="keyword">select</span> cno,ccredit</span><br><span class="line"><span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">where</span> cname <span class="keyword">like</span><span class="string">'DB\_Design'</span> escape<span class="string">'\';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--查询以“DB_” 开头，且倒数第3个字符为 i的课程的详细情况。。</span></span><br><span class="line"><span class="string">select *</span></span><br><span class="line"><span class="string">from course</span></span><br><span class="line"><span class="string">where cname like '</span>DB\_%i_ _<span class="string">' escape '</span>\<span class="string">';</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--涉及空值的查询</span></span><br><span class="line">is null 或 is not null 不能用 =null代替</span><br><span class="line"><span class="comment">--某些学生选修课程后没有参加考试，所以有选课记录，但没有考试成绩。查询缺少成绩的学生的学号和相应的课程号</span></span><br><span class="line"><span class="keyword">select</span> sno，cno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> grade <span class="keyword">is</span> <span class="literal">null</span>；</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--多重条件查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询计算机系年龄在20岁以下的学生姓名。</span></span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sdept=<span class="string">'CS'</span> <span class="keyword">and</span> sage&lt;<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>order by 子句</p><ul><li>可以按一个或多个属性列排序</li><li>升序：ASC(默认)</li><li>降序：DESC</li></ul><p>当排序列含空值时 </p><ul><li>ASC：排序列为空值的元组最后显示 </li><li>DESC：排序列为空值的元组最先显示    </li></ul><p>当按多个属性排序时 </p><ul><li>首先根据第一个属性排序，如果在该属性上有多个相 同的值时，则按第二个属性排序，以此类推    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询选修了3号课程的学生的学号及其成绩，查询结果按分数降序排列。</span></span><br><span class="line"><span class="keyword">select</span> cno,grade</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">'3'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> grade <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询全体学生情况，查询结果按所在系的系号升序排列，同一系中的学生按年龄降序排列。</span></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sdept,sage <span class="keyword">desc</span>；</span><br></pre></td></tr></table></figure><p>使用聚集函数</p><ul><li>count 计数</li><li>sum 计算总和</li><li>avg 计算平均值</li><li>MAX求最大值</li><li>MIN求最小值</li><li>DISTINCT短语：在计算时要取消指定列中的重复值 </li><li>ALL短语：缺省值，不取消重复值    </li></ul><p>对查询结果分组</p><ul><li>使用GROUP BY子句分组    </li><li>未对查询结果分组，聚集函数将作用于整个查询结果 </li><li>对查询结果分组后，聚集函数将分别作用于每个组    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  求各个课程号及相应的选课人数</span></span><br><span class="line"><span class="keyword">select</span> cno <span class="string">'课程号'</span>，<span class="keyword">count</span>(sno) <span class="string">'人数'</span></span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用GROUP BY子句后， SELECT子句的列名列表中，只能出现分组属性和集函数</span></span><br><span class="line"><span class="comment">-- 可以使用HAVING短语筛选最终输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询选修了3门以上课程的学生学号。</span></span><br><span class="line"><span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure><p>连接查询</p><ul><li>同时涉及多个表的查询称为连接查询    </li><li>用来连接两个表的条件称为连接条件或连接谓词，    </li><li>若连接运算符为 = 时，称为等值连接    </li><li>使用其他运算符时，称为非等值连接    </li><li>在等值连接中，去掉目标列中的重复属性则为自然连接    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.*,sc.*</span><br><span class="line"><span class="keyword">from</span> student,sc</span><br><span class="line"><span class="keyword">where</span> student.sno=sc.sno</span><br></pre></td></tr></table></figure><p>自身连接：一个表与其自己进行连接，称为表的自身连接    </p><ul><li>需要给表起别名以示区别    </li><li>由于所有属性名都是同名属性，因此必须使用别名前缀    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询每一门课的间接先修课（即先修课的先修课）</span></span><br><span class="line"><span class="keyword">select</span> first.cno,second.cpno</span><br><span class="line"><span class="keyword">from</span> course <span class="keyword">first</span>, course <span class="keyword">second</span></span><br><span class="line"><span class="keyword">where</span> first.cpno=second.cno</span><br></pre></td></tr></table></figure><p>外连接(Outer join)</p><p>外连接与普通连接的区别    </p><ul><li>普通连接操作只输出满足连接条件的元组    </li><li>外连接操作以指定表为连接主体，将主体表中不满足 连接条件的元组一并输出    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--全外连接</span></span><br><span class="line"><span class="keyword">select</span> first.cno,second.cpno</span><br><span class="line"><span class="keyword">from</span> course <span class="keyword">first</span> <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> course <span class="keyword">second</span></span><br><span class="line"><span class="keyword">on</span> first.cpno=<span class="keyword">second</span>,cno <span class="comment">--细节在这里，join，where 改成 on</span></span><br><span class="line"><span class="comment">--左外连接</span></span><br><span class="line"><span class="keyword">select</span> first.cno,second.cpno</span><br><span class="line"><span class="keyword">from</span> course <span class="keyword">first</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course <span class="keyword">second</span></span><br><span class="line"><span class="keyword">on</span> first.cpno=<span class="keyword">second</span>,cno</span><br><span class="line"><span class="comment">--右外连接</span></span><br><span class="line"><span class="keyword">select</span> first.cno,second.cpno</span><br><span class="line"><span class="keyword">from</span> course <span class="keyword">first</span> <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> course <span class="keyword">second</span></span><br><span class="line"><span class="keyword">on</span> first.cpno=<span class="keyword">second</span>,cno.</span><br></pre></td></tr></table></figure><p>复合条件连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询选修2号课程且成绩在90分以上的所有学生的学号、姓名。</span></span><br><span class="line"><span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> student,sc</span><br><span class="line"><span class="keyword">where</span> student.cno=sc.sno <span class="keyword">and</span> sc.cno=<span class="string">'2'</span><span class="keyword">and</span> sc.grade&gt;<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询每个学生的学号、姓名、选修的课程名及成绩。</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno， Sname， Cname， Grade</span><br><span class="line"><span class="keyword">FROM</span> Student， SC， Course <span class="comment">/*多表连接*/</span></span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno</span><br><span class="line"><span class="keyword">and</span> SC.Cno = Course.Cno；</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询与“刘晨”在同一个系学习的学生。查询要求可以分步来完成</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno， Sname， Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname= ‘ 刘晨 ’ </span><br><span class="line">)；<span class="comment">--不相关子查询</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询选修了课程名为“信息系统”的学生学号和姓名。</span></span><br><span class="line"><span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> sno</span><br><span class="line">    <span class="keyword">from</span> sc</span><br><span class="line">    <span class="keyword">where</span> cno <span class="keyword">in</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> cno</span><br><span class="line">        <span class="keyword">from</span> course</span><br><span class="line">        <span class="keyword">where</span> cname=<span class="string">'信息系统'</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询其他系中比信息系任意一个(其中某一个)学生年龄小的学生姓名和年龄。</span></span><br><span class="line"><span class="keyword">select</span> sname sage</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sage&lt;<span class="keyword">any</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> sage</span><br><span class="line">    <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">where</span> sdept=<span class="string">'IS'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">and</span> sdept != <span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询其他系中比计算机科学系所有学生年龄小的学生姓名和年龄。</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname， Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage &lt; ALL</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept= <span class="string">' CS '</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> Sdept &lt;&gt; <span class="string">' CS '</span> :</span><br></pre></td></tr></table></figure><p>带有exists谓词查询的子查询</p><ul><li>带有EXISTS谓词的子查询不返回任何数据，只产生逻 辑真值“true”或逻辑假值“false”    <ul><li>若内层查询结果非空，则外层的WHERE子句返回真值    </li><li>若内层查询结果为空，则外层的WHERE子句返回假值    </li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询所有选修了1号课程的学生姓名。</span></span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> sc</span><br><span class="line">    <span class="keyword">where</span> cno=<span class="string">'1'</span><span class="keyword">and</span> sno=student.sno</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询没有所有选修了1号课程的学生姓名。</span></span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> sc</span><br><span class="line">    <span class="keyword">where</span> sno=studnet.sno <span class="keyword">and</span> cno=<span class="string">'1'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询选修了全部课程的学生姓名。</span></span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">form</span> course</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> sc</span><br><span class="line">        <span class="keyword">where</span> sno=student.sno</span><br><span class="line">        <span class="keyword">and</span> cno=course.cno</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><ul><li><p>ORDER BY子句只能用于对最终查询结果排序， 不能对中 间结果排序 </p></li><li><p>任何情况下， ORDER BY子句只能出现在最后    </p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sage&lt;=<span class="number">19</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sno;</span><br></pre></td></tr></table></figure><p>数据更新</p><p>数据的插入</p><ul><li>插入元组</li><li>插入子查询结果</li></ul><p>into </p><ul><li>指定要插入数据的表名及属性列    </li><li>属性列的顺序可与表定义中的顺序不一致    </li><li>没有指定属性列：表示要插入的是一条完整的元组，且 属性列属性与表定义中的顺序一致    </li><li>指定部分属性列：插入的元组在其余属性列上取空值    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student (Sno, Sname, Ssex, Sdept, Sage)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'201215128'</span>， <span class="string">'陈冬'</span>， <span class="string">'男'</span>， <span class="string">'IS'</span>， <span class="number">18</span>)；</span><br></pre></td></tr></table></figure><p>插入子查询结果    </p><ul><li>子查询的结果必须包含和insert的字段列表一样多的字段， 并且数据类型兼容    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--对每一个系，求学生的平均年龄，并把结果存入数据库。</span></span><br><span class="line">craete table deptage</span><br><span class="line">(</span><br><span class="line">    sdept char(15),</span><br><span class="line">    avgage smallint</span><br><span class="line">)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> deptage(sdept,avgage)</span><br><span class="line"><span class="keyword">select</span> sdept,<span class="keyword">avg</span>(sage)</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sdept;</span><br></pre></td></tr></table></figure><p>数据修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--将学生201215121的年龄改为22岁</span></span><br><span class="line"><span class="keyword">update</span> student</span><br><span class="line"><span class="keyword">set</span> sage=<span class="number">22</span></span><br><span class="line"><span class="keyword">where</span> sno=<span class="string">'201215121'</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--将所有学生的年龄增加1岁</span></span><br><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage= Sage+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>删除操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--删除学号为201215128的学生记录</span></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno=<span class="string">'201215128'</span>;</span><br></pre></td></tr></table></figure><p>视图：</p><ul><li>虚表，是从一个或几个基本表（或视图）导出的表 </li><li>只存放视图的定义，不会出现数据冗余 </li><li>基表中的数据发生变化，从视图中查询出的数据也随之改变    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> is_student</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> sno,sname,sage</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sdept=<span class="string">'IS'</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--定义基于该视图的新视图</span></span><br><span class="line"><span class="comment">--建立信息系选修了1号课程的学生视图。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S1(Sno， Sname， Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno， Sname， Grade</span><br><span class="line"><span class="keyword">FROM</span> Student， SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno=SC.Sno <span class="keyword">AND</span></span><br><span class="line">Sdept= <span class="string">'IS'</span> <span class="keyword">AND</span></span><br><span class="line">SC.Cno= <span class="string">'1'</span>；</span><br><span class="line"><span class="comment">--建立信息系选修了1号课程且成绩在90分以上的学生视图。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno， Sname， Grade</span><br><span class="line"><span class="keyword">FROM</span> IS_S1</span><br><span class="line"><span class="keyword">WHERE</span> Grade&gt;=<span class="number">90</span>；</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--将学生的学号及他的平均成绩定义为一个视图。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_G(sno,Gavg)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> sno,<span class="keyword">avg</span>(grade)</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno;</span><br></pre></td></tr></table></figure><p>删除视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> &lt;视图名&gt; [<span class="keyword">cascade</span>]</span><br></pre></td></tr></table></figure><p>查询视图：</p><ul><li>从用户角度：查询视图与查询基本表相同    </li><li>DBMS实现视图查询的方法    <ul><li><strong>实体化视图</strong><ul><li>有效性检查：检查所查询的视图是否存在    </li><li>执行视图定义，将视图临时实体化，生成临时表    </li><li>查询视图转换为查询临时表    </li><li>查询完毕删除被实体化的视图(临时表)   </li></ul></li><li><strong>视图消解法</strong><ul><li>进行有效性检查，检查查询的表、视图等是否存在。 如果存在，则从数据字典中取出视图的定义    </li><li>把视图定义中的子查询与用户的查询结合起来，转 换成等价的对基本表的查询    </li><li>执行修正后的查询    </li></ul></li></ul></li><li>一些视图是不可更新的，因为对这些视图的更新 不能唯一地有意义地转换成对相应基本表的更新 (对两类方法均如此)    </li></ul><p>视图的作用</p><ul><li>视图能够简化用户的操作    </li><li>视图使用户能以多种角度看待同一数据    </li><li>视图对重构数据库提供了一定程度的<strong>逻辑独立性</strong>    </li><li>视图能够对机密数据提供安全保护    </li><li>适当的利用视图可以更清晰的表达查询    </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关系数据库标准语言SQL&quot;&gt;&lt;a href=&quot;#关系数据库标准语言SQL&quot; class=&quot;headerlink&quot; title=&quot;关系数据库标准语言SQL&quot;&gt;&lt;/a&gt;关系数据库标准语言SQL&lt;/h3&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_8</title>
    <link href="http://yoursite.com/2018/07/05/DB_8/"/>
    <id>http://yoursite.com/2018/07/05/DB_8/</id>
    <published>2018-07-05T12:21:44.000Z</published>
    <updated>2018-07-05T13:51:04.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第八章数据库编程"><a href="#第八章数据库编程" class="headerlink" title="第八章数据库编程"></a>第八章数据库编程</h3><a id="more"></a><h4 id="一-T-SQL编程基础"><a href="#一-T-SQL编程基础" class="headerlink" title="一:T-SQL编程基础"></a>一:T-SQL编程基础</h4><blockquote><p>标识符</p></blockquote><p>标识符分类：</p><ul><li>常规标识符</li><li>界定标识符</li></ul><p>标识符格式规则</p><ul><li>字母或_、@、# 开头的字母数字</li><li>不与保留字相同</li><li>长度小于128</li><li>不符合规则的标识符必须加以界定（双引号或方括号）</li></ul><blockquote><p>注释语句</p></blockquote><ul><li>单行注释–</li><li>多行注释/<em> … </em>/</li></ul><blockquote><p>表达式</p></blockquote><ul><li>数据类型：整数数据、字符数据、货币数据、日期和时间数据、二进制字符串等</li><li>变量：<ul><li>局部变量<ul><li>局部变量是用户定义，必须以@开头，在程序内声明，并只能在该程序内使用</li><li>局部变量的声明：declare @name int</li><li>局部变量的赋值：set|select @name = &lt;表达式&gt;</li></ul></li><li>全局变量<ul><li>全局变量是SQL Server系统内部使用的变量，以@@开头</li><li>全局变量不是由用户的程序定义的，它们是在服务器级定义的</li><li>用户只能使用预先定义的全局变量</li><li>@@version 目前SQL-Server版本信息</li><li>@@servername 目前SQL-Server服务器名称</li><li>@@servicename 目前所用服务器为</li></ul></li></ul></li></ul><blockquote><p>SET与SELECT的区别</p></blockquote><ul><li>SET赋值语句一般用户赋给变量指定的额数据变量</li><li>SELECT赋值语句一般用于表中查询数据，然后查询的记录多于要，将把最后一条记录的值赋给变量</li><li>SET一次只能赋值一个变量</li><li>SELECT可以一次赋值多个变量<ul><li>SELECT @a=1,@b=2</li></ul></li></ul><blockquote><p>创建一个@myvar 变量，然后将一个字符串值放在 变量中，最后输出 @myvar 变量的值    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @myvar <span class="built_in">char</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">select</span> @myvar =<span class="string">'This is a test'</span></span><br><span class="line"><span class="keyword">select</span> @myvar(输出)</span><br></pre></td></tr></table></figure><blockquote><p>用SET语句和SELECT语句为局部变量赋值    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @var1 datetime,@var2 <span class="built_in">char</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">set</span> @var1=<span class="keyword">getdate</span>()</span><br><span class="line"><span class="keyword">select</span> @var2=<span class="keyword">convert</span>(<span class="built_in">char</span>(<span class="number">10</span>),@var1,<span class="number">102</span>)</span><br><span class="line"><span class="keyword">select</span> @var2</span><br></pre></td></tr></table></figure><blockquote><p>选择结构</p><p>查找有没有学号为201215120的学生，有的话 显示学生信息，没有显式没找到    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if exists(<span class="keyword">select</span> *<span class="keyword">from</span> student <span class="keyword">where</span> sno=<span class="string">'201215120'</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno=<span class="string">'201215120'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">print <span class="string">'没找到'</span></span><br></pre></td></tr></table></figure><blockquote><p>CASE语句</p><p>:从学生表STUDENT中，选取SNO,SSEX，如 果SSEX为‘男’则输出‘M’，如果为‘女’， 则输出‘F’    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,ssex=</span><br><span class="line"><span class="keyword">case</span> ssex</span><br><span class="line"><span class="keyword">when</span> <span class="string">'男'</span> <span class="keyword">then</span> <span class="string">'M'</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="string">'F'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure><blockquote><p>从SC表中查询所有同学选课成绩情况，凡成 绩为空者输出‘未考’、小于60输出‘不及格’ 、 小于70输出‘及格’ 、小于90输出‘良好’ 、大 于等于90输出‘优秀    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,cno,grade=</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> grade <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="string">'未考'</span></span><br><span class="line"><span class="keyword">when</span> grade&lt;<span class="number">60</span> <span class="keyword">then</span> <span class="string">'不及格'</span></span><br><span class="line"><span class="keyword">when</span> grade&gt;=<span class="number">60</span> <span class="keyword">and</span> grade&lt;<span class="number">70</span> <span class="keyword">then</span> <span class="string">'及格'</span></span><br><span class="line"><span class="keyword">when</span> grade&gt;=<span class="number">70</span> <span class="keyword">and</span> grade&lt;<span class="number">90</span> <span class="keyword">then</span> <span class="string">'良好'</span></span><br><span class="line"><span class="keyword">when</span> grade&gt;<span class="number">90</span> <span class="keyword">then</span> <span class="string">'优秀'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> sc</span><br></pre></td></tr></table></figure><blockquote><p>循环结构</p><p>求1 ~10的和    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @X <span class="built_in">int</span> ,@ <span class="keyword">sum</span> <span class="built_in">int</span> </span><br><span class="line"><span class="keyword">set</span> @X=<span class="number">0</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> @X&lt;<span class="number">10</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> @X=@X+<span class="number">1</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">sum</span>=@<span class="keyword">sum</span>+@X</span><br><span class="line">print <span class="string">'sum='</span>+<span class="keyword">convert</span>(<span class="built_in">char</span>(<span class="number">2</span>),@<span class="keyword">sum</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>等待语句</p><p>等待语句挂起一个程序中语句的执行，直到指定的某一时间点到来或在一定的时间间断之后才继续执行。</p></blockquote><blockquote><p>example 1：设置等待一个小时后执行查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">waitfor delay <span class="string">'1:00:00'</span></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>example 2:设置到十点整执行查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">waitfor <span class="keyword">time</span> <span class="string">'10:00:00'</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>日期和时间函数</p><p>例1 使用日期时间函数计算自己现在的年龄    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'年龄'</span>=</span><br><span class="line"><span class="keyword">datediff</span>(YY,<span class="string">'1998-12-06'</span>,<span class="keyword">getdate</span>())</span><br></pre></td></tr></table></figure><blockquote><p>例2 返回指定日期中的年/月/日的整数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select year(&apos;2018-05-30&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>字符串函数和数据类型转换函数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @<span class="keyword">str</span> <span class="built_in">char</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">str</span> = <span class="string">'           yangzixu          '</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">UPPER</span>(@<span class="keyword">str</span>)<span class="string">'变大写'</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">LTRIM</span>(@<span class="keyword">str</span>)<span class="string">'去头部空格'</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">RTRIM</span>(@<span class="keyword">str</span>)<span class="string">'去尾部空格'</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">LEFT</span>(@<span class="keyword">str</span>,<span class="number">15</span>)<span class="string">'从左边起，取15个字符'</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SUBSTRING</span>(@<span class="keyword">str</span>,<span class="number">10</span>,<span class="number">5</span>)<span class="string">'从下标10开始取5个字符'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SNO+SNAME+<span class="keyword">CAST</span>(SAGE <span class="keyword">AS</span> <span class="built_in">CHAR</span>(<span class="number">5</span>)) <span class="comment">--强制类型转换  10--&gt;'10'</span></span><br><span class="line"><span class="keyword">FROM</span> STUDENT</span><br></pre></td></tr></table></figure><h3 id="二：游标"><a href="#二：游标" class="headerlink" title="二：游标"></a>二：游标</h3><h5 id="定义：游标是一种能从包括多条数据记录的结果集中每次提取一条记录的机制"><a href="#定义：游标是一种能从包括多条数据记录的结果集中每次提取一条记录的机制" class="headerlink" title="定义：游标是一种能从包括多条数据记录的结果集中每次提取一条记录的机制"></a>定义：游标是一种能从包括多条数据记录的结果集中每次提取一条记录的机制</h5><p>游标的使用：</p><ul><li>声明游标</li><li>打开游标</li><li>读取游标中的数据</li><li>关闭游标</li><li>释放游标</li></ul><blockquote><p>1.声明一个游标，统计没有选修课程的学生的 人数    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> num_cursor <span class="keyword">cursor</span> <span class="comment">--定义游标</span></span><br><span class="line"><span class="keyword">for</span> </span><br><span class="line"><span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">read</span> <span class="keyword">only</span> <span class="comment">--默认是只读可以不写</span></span><br><span class="line"><span class="keyword">open</span> num_cursor <span class="comment">--打开游标</span></span><br><span class="line"><span class="keyword">declare</span> @sno <span class="built_in">varchar</span>(<span class="number">10</span>),@<span class="keyword">num</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">num</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> num_cursor <span class="comment">--取信息</span></span><br><span class="line"><span class="keyword">into</span> @sno</span><br><span class="line"><span class="keyword">while</span> @@fetch_starus=<span class="number">0</span> <span class="comment">-- 0:语句执行成功  -1：语句执行失败  -2：提取数据不存在 </span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> sno=@sno)</span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">num</span>=@<span class="keyword">num</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> num_cursor</span><br><span class="line"><span class="keyword">into</span> @sno</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">num</span></span><br><span class="line"><span class="keyword">close</span> num_cursor <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">deallocate</span> num_cursor <span class="comment">--释放游标</span></span><br></pre></td></tr></table></figure><blockquote><p>2.根据学生成绩计算统计各个等级的人数： </p><p>  [90-100]为A, [80-89]为B [70-79]为C, [60-69]为D [0-59]为E     </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义局部变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> @mygrade <span class="built_in">int</span></span><br><span class="line"><span class="keyword">DECLARE</span> @E <span class="built_in">int</span>,@D <span class="built_in">int</span>,@C <span class="built_in">int</span>,@B <span class="built_in">int</span>,@A <span class="built_in">int</span></span><br><span class="line"><span class="keyword">select</span> @E = <span class="number">0</span>,@D = <span class="number">0</span>,@C = <span class="number">0</span>,@B = <span class="number">0</span>,@A = <span class="number">0</span></span><br><span class="line"><span class="comment">-- 定义游标.</span></span><br><span class="line"><span class="keyword">DECLARE</span> level_cursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> grade</span><br><span class="line"><span class="keyword">FROM</span> sc</span><br><span class="line"><span class="comment">-- 打开游标.</span></span><br><span class="line"><span class="keyword">OPEN</span> level_cursor</span><br><span class="line"><span class="comment">--取游标中第一行放到对应变量中</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> level_cursor</span><br><span class="line"><span class="keyword">into</span> @mygrade</span><br><span class="line"><span class="keyword">while</span> @@fetch_status=<span class="number">0</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> @mygrade <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">set</span> @E=@E+<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> @mygrade&lt;<span class="number">60</span></span><br><span class="line"><span class="keyword">set</span> @E=@E+<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> @mygrade&lt;<span class="number">70</span></span><br><span class="line"><span class="keyword">set</span> @D=@D+<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> @mygrade&lt;<span class="number">80</span></span><br><span class="line"><span class="keyword">set</span> @C=@C+<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> @mygrade&lt;<span class="number">90</span></span><br><span class="line"><span class="keyword">set</span> @B=@B+<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">set</span> @A=@A+<span class="number">1</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> level_cursor</span><br><span class="line"><span class="keyword">into</span> @mygrade</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">close</span> level_cursor</span><br><span class="line"><span class="keyword">deallocate</span> level_cursor</span><br><span class="line"><span class="keyword">select</span> @E <span class="string">'E'</span>,@D <span class="string">'D'</span>,@C <span class="string">'C'</span>,@B <span class="string">'B'</span>,@A <span class="string">'A'</span></span><br></pre></td></tr></table></figure><blockquote><p>创建存储过程</p><p>例1：从SC表中查询不及格课程超过3门的学    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myproc</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> sno</span><br><span class="line">    <span class="keyword">from</span> sc</span><br><span class="line">    <span class="keyword">where</span> grade&lt;<span class="number">60</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> sno</span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">3</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>例2：将指定记录插入student表    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc proc_insert_student </span><br><span class="line">@sno vaechar(<span class="number">10</span>),</span><br><span class="line">@sname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">@ssex <span class="built_in">varchar</span>(<span class="number">2</span>)=<span class="string">"男"</span>,<span class="comment">--给定默认参数</span></span><br><span class="line">@sage samllint，</span><br><span class="line">@sdept <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(sno,sname,ssex,sage,sdept)</span><br><span class="line"><span class="keyword">values</span>(@sno,@sname,@ssex,@sage,@sdept)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>例3 查询指定学号学生的平均成绩，并将平均成 绩返回    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc proc_avergrade</span><br><span class="line">@sno <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">@savg <span class="built_in">int</span> <span class="keyword">out</span> <span class="comment">--输出参数</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> @savg = <span class="keyword">avg</span>(grade)</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sno = @sno</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>执行存储过程</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @<span class="keyword">avg</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">avg</span>=<span class="number">0</span></span><br><span class="line">exec proc_avergrade <span class="string">'200215121'</span>,@<span class="keyword">avg</span> <span class="keyword">out</span></span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">avg</span></span><br></pre></td></tr></table></figure><blockquote><p>删除存储过程</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> proc_avergrade <span class="comment">--不删除永久存储在数据库中</span></span><br></pre></td></tr></table></figure><blockquote><p>练习1.编写一个存储过程，在sc表统计每个学生的平均分    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc exp1</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">AVG</span>(grade)</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">exec exp1</span><br><span class="line"><span class="keyword">drop</span> proc exp1</span><br></pre></td></tr></table></figure><blockquote><p>对练习1的存储过程进行改进，添加一个输入参 数——学号，使存储过程能根据输入的学号计算该 学生的平均分    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc exp2</span><br><span class="line">@sno <span class="built_in">char</span>(<span class="number">9</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">AVG</span>(grade)</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sno=@sno</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">exec exp2 <span class="string">'201215121'</span></span><br><span class="line"><span class="keyword">drop</span> proc exp2</span><br></pre></td></tr></table></figure><blockquote><p>在练习2的基础上添加一个输出参数——平均分， 计算指定学号的平均分，然后将平均分输出    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc exp3</span><br><span class="line">@sno <span class="built_in">char</span>(<span class="number">9</span>),</span><br><span class="line">@sum1 <span class="built_in">int</span> <span class="keyword">out</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> @sum1=<span class="keyword">AVG</span>(grade)</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sno=@sno</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">avg</span> <span class="built_in">int</span></span><br><span class="line">exec exp3 <span class="string">'201215121'</span>,@<span class="keyword">avg</span> <span class="keyword">out</span></span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">avg</span></span><br><span class="line"><span class="keyword">drop</span> proc exp3</span><br></pre></td></tr></table></figure><blockquote><p>请编写一个存储过程proc_sum，输入参数为学院，输 出参数为人数，功能为根据输入的学院，统计该学 院的学生人数，并返回学生人数。学生表的结构（sno,sname,sex,department）各个字段含义为学号、 姓名、性别、学院    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc proc_sum</span><br><span class="line">@department <span class="built_in">char</span>(<span class="number">9</span>),</span><br><span class="line">@p_num <span class="built_in">int</span> <span class="keyword">out</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> @p_num=<span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> department=@department</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><ul><li>标量函数返回一个标量（单值）结果</li><li>内嵌表值函数返回一个table数据类型</li><li>多语句表值函数返回的数据必须存放于临时表中（性能不好）</li></ul><blockquote><p>请写一个函数whichgeneration，根据输入的参数生 日 (birthday datetime)来判断学生是“80后”还是 “90后”，如果是“80后”返回字符串“80s”， 如果是“90后”返回“90s”，其他返回“too old”    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> whichgeneration(@birthday datetime)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">12</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">declare</span> @temp <span class="built_in">varchar</span>(<span class="number">12</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">year</span>(@birthday)&lt;<span class="number">1980</span> <span class="keyword">set</span> @temp= <span class="string">'too old'</span>;</span><br><span class="line">else if year(@birthday)&lt;1990 set @temp= '80s';</span><br><span class="line">else <span class="keyword">set</span> @temp= <span class="string">'90s'</span>;</span><br><span class="line">return @temp;  <span class="comment">--最后一条语句是返回值</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">select</span> dbo.whichgeneration(<span class="string">'1998-12-06'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>定义一个函数返回学生的学号和姓名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> Fun()</span><br><span class="line"><span class="keyword">returns</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Fun()</span><br></pre></td></tr></table></figure><blockquote><p>查看计算机系学生的成绩    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> see(@sdept <span class="built_in">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">returns</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> student.sno,cno,grade</span><br><span class="line"><span class="keyword">from</span> student,sc</span><br><span class="line"><span class="keyword">where</span> student.sno=sc.sno <span class="keyword">and</span> sdept=@sdept</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> see(<span class="string">'CS'</span>)</span><br></pre></td></tr></table></figure><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是用户定义在关系表上的一类由事件驱动的特殊过程</p><h4 id="DML触发器"><a href="#DML触发器" class="headerlink" title="DML触发器"></a>DML触发器</h4><p>DML触发器是在对表进行插入、更新或删除操作 时自动执行的存储过程</p><ul><li><p>触发器定义在特定的表上，与表相关 </p></li><li><p>自动触发执行 </p></li><li><p>不能直接调用 </p></li><li><p>是一个事务（可回滚） </p><p>分类 </p></li><li><p>DELETE 触发器 </p></li><li><p>INSERT 触发器  </p></li><li><p>UPDATE 触发器    </p></li></ul><p>Inserted表和Deleted表。这两个表的结构 总是与被该触发器作用的表的结构相同，触发器 执行完成后，与该触发器相关的这两个表也会被 删除    </p><table><thead><tr><th>激活触发器的动作</th><th>Inserted表</th><th>Deleted表</th></tr></thead><tbody><tr><td>Insert</td><td>存放要插入的记录</td><td></td></tr><tr><td>Update</td><td>存放要更新的记录</td><td>存放更新前的旧记录</td></tr><tr><td>Delete</td><td></td><td>存放要除的旧记录</td></tr></tbody></table><p> 触发器触发时 </p><ul><li>系统自动在内存中创建deleted表或inserted表 </li><li>只读，不允许修改；触发器执行完成后，自动删除 </li></ul><p>Inserted 表 </p><ul><li>临时保存了插入或更新后的记录行 </li><li>可以从inserted表中检查插入的数据是否满足业务需求 </li><li><p>如果不满足，则向用户报告错误消息，并回滚插入操作    </p><p>Deleted 表 </p></li><li><p>临时保存了删除或更新前的记录行 </p></li><li>可以从deleted表中检查被删除的数据是否满足业务需求 </li><li>如果不满足，则向用户报告错误消息，并回滚插入操作    </li></ul><blockquote><p>建立一个触发器，当向sc表中添加数据时，如果添 加的数据与student表中的数据不匹配（没有对应的学 号），则将此数据删除    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tr_sc_insert <span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> @bh <span class="built_in">char</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">select</span> @bh =Inserted.sno <span class="keyword">from</span> Inserted</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> sno <span class="keyword">from</span> student <span class="keyword">where</span> student.sno=@bh)</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> sc <span class="keyword">where</span> sno=@bh</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc</span><br><span class="line"><span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'12'</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>创建一个触发器，当插入或更新成绩列时， 该触发器检查插入的数据是否处于设定的范围内 （0， 100）    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tr_sc_grade</span><br><span class="line"><span class="keyword">on</span> sc</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span>,<span class="keyword">update</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> nocount <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">declare</span> @score <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">select</span> @score=inserted.grade <span class="keyword">from</span> inserted</span><br><span class="line"><span class="keyword">if</span>(@score&lt;<span class="number">0</span> <span class="keyword">or</span> @score&gt;<span class="number">100</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">raiserror(<span class="string">'成绩必须在0-100之间'</span>,<span class="number">16</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">transaction</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc</span><br><span class="line"><span class="keyword">values</span>(<span class="string">'201215121'</span>,<span class="string">'4'</span>,<span class="number">101</span>)</span><br></pre></td></tr></table></figure><p>Raiserror函数    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raiserror('错误提示信息'，错误级别0-18，错误状态号1-127)</span><br></pre></td></tr></table></figure><blockquote><p>创建一个修改触发器，该触发器防止用户修改表student 的学号     </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tr_student_sno <span class="keyword">ON</span> student</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line">if <span class="keyword">update</span>(sno)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">raiserror(<span class="string">'不能修改学号'</span>,<span class="number">16</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">transaction</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><blockquote><p>建立一个与sc表结构一样的表s1，当删除表sc中的 记录时，自动将删除掉的记录存放到s1表中    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tr_student_delete</span><br><span class="line"><span class="keyword">ON</span> sc</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> s1 <span class="keyword">select</span> * <span class="keyword">from</span> deleted</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><blockquote><p>当删除表student中的记录时，自动删除表sc中 对应学号的记录    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tr_student_sc_delete</span><br><span class="line"><span class="keyword">ON</span> student</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> @sno <span class="built_in">char</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">Select</span> @sno=deleted.sno <span class="keyword">from</span> deleted</span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">from</span> sc <span class="keyword">where</span> sno=@sno</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><blockquote><p>在student表删除学生记录的同时删除学生的选课 记录    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tr_student_instead</span><br><span class="line"><span class="keyword">on</span> student</span><br><span class="line">instead <span class="keyword">of</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> nocount <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span>(<span class="keyword">select</span> deleted.sno <span class="keyword">from</span> deleted)</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span>(<span class="keyword">select</span> deleted.sno <span class="keyword">from</span> deleted)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>创建一个触发器TrInsUpd，当向图书表中插入或 更新一条记录的类别代号时，新记录的类别代号 必须在图书类别表中存在，否则提示类别代号不 正确    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> TrInsUpd</span><br><span class="line"><span class="keyword">on</span> tushu</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">insert</span>,<span class="keyword">update</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> @dh <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">select</span> @dh=inserted.leibiedaihao</span><br><span class="line"><span class="keyword">from</span> inserted</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> leibiedaihao <span class="keyword">from</span> tushuleibie <span class="keyword">where</span> leibiedaihao=@dh))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">raiserror(<span class="string">'类别号不存在'</span>,<span class="number">16</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">transaction</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>创建一个存储过程PrcSelect，根据用户提供的图 书类别名查看相应类别图书的详细信息    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> Prcselect</span><br><span class="line">@classname <span class="built_in">varchar</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> tushu.* </span><br><span class="line"><span class="keyword">from</span> tushu,tushuleibie</span><br><span class="line"><span class="keyword">where</span> tushu.leibiedaihao=tushueibie.tushudaihao <span class="keyword">and</span> leibieming=@className</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>创建一个函数FunBookSale，该函数根据给定的书 号返回该图书销售的数量    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> FunBookSale(@bookno <span class="built_in">varchar</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(数量)</span><br><span class="line"><span class="keyword">from</span> 订单</span><br><span class="line"><span class="keyword">where</span> 书号=@bookno</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第八章数据库编程&quot;&gt;&lt;a href=&quot;#第八章数据库编程&quot; class=&quot;headerlink&quot; title=&quot;第八章数据库编程&quot;&gt;&lt;/a&gt;第八章数据库编程&lt;/h3&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://yoursite.com/2018/07/02/linux1-16/"/>
    <id>http://yoursite.com/2018/07/02/linux1-16/</id>
    <published>2018-07-02T13:37:44.000Z</published>
    <updated>2018-07-02T13:42:54.868Z</updated>
    
    <content type="html"><![CDATA[<p>Linux basic</p><a id="more"></a><h3 id="ch-1"><a href="#ch-1" class="headerlink" title="ch_1"></a><strong>ch_1</strong></h3><p><strong>Linux之父：林纳斯·托瓦兹</strong></p><p>发布于：GPL协议</p><p><strong>version:Ubuntu 16.04</strong></p><p>发行版本：Ubuntu，CentOS，RedHat</p><p>Ubuntu基于Debian,Debian是社区开发的开源操作系统</p><p>ip-addr查看ipv4地址</p><p>ssh协议默认是端口是22</p><p>Linux 使用shutdown命令进行关系重启，定时关机等操作</p><p>关机:sudo shutdown -h now</p><p>重启：sudo shutdown -r now</p><h3 id="ch-2"><a href="#ch-2" class="headerlink" title="ch_2"></a>ch_2</h3><p>echo $HOME(主目录)</p><p>echo $PWD (当前工作目录) 或者 pwd</p><p>常见的文件系统格式：FAT32,NTFS,Ext3，Ext4，HFS</p><p>Ubuntu 16.04 安装时默认使用Ext4文件系统，Ext4     </p><p>Linux没有“盘符”的概念，Windows会分为C盘D盘等。而<strong>Linux通过一个整体 的目录树来组织文件</strong>。    </p><p>Linux使用 <strong>/ 表示根目录</strong>，也就是整个目录树的顶层。其他的目录都位于/之 下。  </p><p>  所有的目录都至少包含两个子目录，. 和 .. ，<strong>. 表示当前目录</strong>，<strong>.. 表示上一层 目录</strong>。<strong>/也有 ..</strong> ，但是<strong>指向的是自己</strong>。    </p><p>/ ：根目录</p><p><strong>/usr：用户的程序，配置信息</strong></p><p>/bin:存放常用命令的目录</p><p>/home：主目录，所有用户主目录都在此目录下</p><p>/sbin：超级用户root才能使用的命令</p><p>/lib:系统动态链接库</p><p>/boot：系统启动文件所在的目录</p><p>/root：root用户的主目录</p><p><strong>/etc：系统配置文件以及一些程序的配置文件都在此目录</strong></p><p>/proc：一个虚拟目录，系统内存的映射，可以获取系统以及进程的信息</p><p>/sys:一个虚拟目录。把硬件设备映射成文件，可以通过文件控制硬件</p><p>/usr/bin 用户程序目录</p><p>/tmp 存放临时文件</p><p>/dev 外接设备会映射为此目录下的一个文件</p><p>/media 把系统自动识别的U盘，光盘，挂载到此目录下</p><p>命令</p><ul><li>ls 显示目录/文件<ul><li>ls -a 显示目录下的所有内容，包括以.开头的隐藏文件</li><li>ls -l  以详细方式显示目录内容信息</li><li>ls -R 递归显示目录内容</li><li>ls -S  按文件大小排序，大的在前</li><li>ls -CF</li><li>man ls 可查看ls命令帮助手册</li></ul></li><li>cd 切换工作目录<ul><li>cd .. 会回到上一层目录</li><li>在根目录下/下cd.. 还是/目录</li><li>cd ~ 进入当前用户的主目录</li><li>cd ~进入上一次使用的目录</li></ul></li><li>df 查看磁盘情况<ul><li>df -h 以易于读取的方式显示空间使用情况</li><li>df -T 显示文件系统的类型</li></ul></li><li>fdisk 磁盘格式化<ul><li>fdisk -l 列出已安装的所有磁盘的分区    </li><li>fdisk -d 进入删除分区的子步骤</li><li>fdisk -n进入创建分区的子步骤</li><li>fdisk -w 把分区写入硬盘，q放弃修改</li><li>sudo fdisk /dev/sdb ，然后使用p查看分区表信息    </li></ul></li><li>mkfs 创建文件系统<ul><li>mkfs -f &lt;文件系统类型&gt;&lt;设备分区&gt;</li><li>sudo mkfs -t ext4 /dev/sda5</li><li>mkswap:创建文件交换系统<ul><li>mkswap  / dev/sda5</li></ul></li></ul></li><li>mount 挂载设备 <ul><li>mount -r /dev/sdb2/media/c  只读挂载模式</li><li>mount -t ext4 /dev/sdb2 /media/c    指定ext4文件系统，一般不用，mount会 自动识别文件系统类型    </li></ul></li><li>umount 卸载设备<ul><li>umount /media/c 卸载挂载点    </li></ul></li></ul><h3 id="ch03"><a href="#ch03" class="headerlink" title="ch03"></a>ch03</h3><p>终端（Terminal）：</p><p>也称终端设备，是计算机最外围的设备，主要获取用户信 息的输入以及处理结果的输出等。    </p><p>虚拟控制台：Linux提供了虚拟控制台，桌面环境的Ubuntu系统上使用Ctrl+Alt+[F1~F7]会 在不同虚拟控制台之间切换。</p><p>终端是一个<strong>设备</strong> 。而shell是一个程序    ，主要是获取用户输入的命令并允许，把结果返回给用户。</p><p>终端最重要的事情是输入和输出，程序运行的结果要通过shell显示在终端上</p><p>shell有很多不同的实现，基本功能都相同。Linux默认的shell大多都是bash。 类似的还有sh、zsh、fish等。    </p><p>Ubuntu桌面环境自带一个terminal软件，是终端模拟器（虚拟终端），启动 后会运行bash。    </p><p>LInux命令分类</p><ul><li>内部命令：属于Shell解释器的一部分，是shell程序自带的命令</li><li>外部命令：独立于Shell解释器之外的程序文件，是在系统的某个路径下的可 执行程序，由shell依照事先设定好的路径查找，找到后才能执行。    </li></ul><p>type  commond 查看是内部命令还是外部命令</p><p>which/whereis commond  命令所在路径</p><p>Linux命令的通用格式为：命令  选项  参数</p><ul><li>以 “-”引导短格式选项（单个字符），例如“-l” </li><li>以“–”引导长格式选项（多个字符），例如“–color”    </li></ul><p>使用help 查看Bash内部命令的帮助信息    </p><ul><li>ls –help</li></ul><p>使用man命令阅读手册</p><ul><li>man ls</li></ul><p>env 可以显示系统中已存在的环境变量</p><p>shell 使用小技巧</p><ul><li>Tab键可以自动补全命令名称以及参数    </li><li>命令历史：bash中可以使用↑、↓按键逐条翻看，允许编辑并重复执行，</li><li>history命令显示 所有缓存在.bash_history中的命令，history -c 清空历史命令。    </li></ul><p>快捷键</p><ul><li>Ctrl+a 跳转行首，Ctrl+e 跳转行尾 Ctrl+l 清屏 Ctrl+c 终止程序执行 Ctrl+d 退出shell，回到登录界面 Ctrl+w 按单词删除，空格隔开的作为一个独立的词。    </li></ul><p>终端常用命令</p><ul><li>ls 列出文件、目录的信息</li><li>cd 切换当前工作目录 </li><li>mkdir 创建目录</li><li>touch 创建空文件</li><li>rm 删除给定的文件和目录。如果目录不为空，需要使用rm -rf</li><li>cp 将一个或多个源文件或者目录复制到指定的目的文件或目录    </li><li>mv 对文件或目录重新命名，或者将文件从一个目录移到另一个目录中</li><li>cat 连接文件并打印到标准输出设备上。cat经常用来显示文件的内容</li><li>more 以全屏幕的方式按页显示文本文件的内容</li><li>less  以全屏幕的方式按页显示文本文件的内容，功能比more更强大  </li><li>find 在指定目录下查找文件  </li></ul><p>常用命令</p><ul><li>ls /usr  显示/usr的目录内容</li><li>ls -R /usr</li><li>ls -l /usr</li><li>mkdir abc 在当前目录下创建abc目录</li><li>rmkdir abc/ 删除当前目录下的abc目录，abc必须是空目录</li><li>rm tmp/a.sh 删除tmp目录下a.sh文件</li><li>rm -rf tmp/ 删除tmp目录，目录可以不为空，会删除目录下所有内容</li><li>cp tmp/a.sh sh/  复制tmp/a.sh 到 sh目录,tmp和sh都是当前目录的子目录</li><li>cp tmp/a.sh /tmp  </li><li>cp tmp/a.sh sh/b.sh</li><li>cp tmp/ tmp2 -R</li><li>cp mariadb/ -R /usr/local 递归复制</li><li>mv tmp/a.sh sh/</li><li><strong>mv tmp/a.sh sh/b.sh 移动并重命名</strong></li><li><strong>mv tmp/a.sh tmp/ac.sh 重命名</strong></li><li>touch tmp/test.sh 创建空文件夹</li><li>cat /etc/passwd 显示文件夹内容</li><li>find /usr -name gcc 查找名为gcc的文件大小写敏感</li><li>find /usr -name gcc*  查找开头为gcc的文件大小写敏感</li><li>find /usr/ -iname gcc*  查找开头为gcc的文件大小写不敏感</li><li>env显示环境变量</li></ul><h3 id="ch04-IO重定向与管道"><a href="#ch04-IO重定向与管道" class="headerlink" title="ch04 IO重定向与管道"></a>ch04 IO重定向与管道</h3><p>每个进程至少有3个信道：标准输入 -STDIN 标准输出 -STDOUT  标准错误 -STDERR</p><ul><li>标准输入：文件描述符为0，默认指向终端(在虚拟终端中即为键盘)</li><li>标准输出：文件描述符为1,默认指向终端(在虚拟终端中即为屏幕)</li><li>标准错误：文件描述符为2，默认指向终端(在虚拟终端中即为屏幕)</li></ul><p>在Linux中一切皆文件，所以标准输入、标准输出、标准错误都有对应的文件，而这种对应 关系是通过文件描述符来实现的    </p><p>对于一个进程来说，它从描述符0指向的文件读取输入信息，把执行结果送到描述符1指向 的文件，把出错信息送到描述符2指向的文件，而不关心这些文件具体是什么    </p><p>重定向</p><ul><li>echo ‘abc’ &gt;tmp/buff 会把abc输出到tmp/buff这个文件中</li><li>如果没有buff这个文件，先创建buff这个文件，再把内容重定向到这个文件中，但是如果存在这个文件，并且这个文件之前不为空，重定向会导致之前的数据丢失。</li><li>echo ‘abc’ &gt;&gt;/tmp/buff 会把abc追加到文件末尾，之前的数据不丢失</li><li>在shell中使用&gt; , &lt; , &gt;&gt; 等重定向符号时，执行重定向操作的是 shell，而不是程序。    </li></ul><p>重定向标准输入  &lt;  将命令中接收输入的途径由默认的键盘改为指定的文件</p><p>重定向标准输出  &gt; 以替换的方式将命令的执行结果输出到知道的文件中，而不是显示在屏幕上</p><p>​               &gt;&gt; 将命令执行的结果追加到输出的指定文件</p><p>重定向标准错误 2&gt; 清空指定文件的内容，并将标准错误信息保存到该文件中</p><p>​               2&gt;&gt; 将标准错误信息追加到指定的文件中</p><p>重定向标准输出和标准错误 &amp;&gt;或&gt;&amp;将标准输出和标准错误的内容全部保存到指定文件，而不是直接显示在屏幕上。</p><p>重定向实例：</p><p>wc -l newfile 与 wc -l &lt; newfle</p><p>第一个是对文件的操作，第二个是对文件内容的操作</p><p> find / -iname gcc* &gt; find_tmp  标准输出重定向到find_tmp文件，但是错误信息会显示在屏幕上</p><p> find / -iname gcc* &amp;&gt; find_tmp   标准输出和标准错误信息都重定向到 find_tmp中</p><p>1&gt; 等同于&gt; ，0&lt; 等同于&lt;，即前导的0和1可以省略；如果不省略，数字和 重定向符号之间没有空格，前导2不可以省略    </p><p><strong>管道</strong></p><ul><li>把一条命令的STDOUT连接到另一条命令的STDIN上，可以用 | 这个符号，在shell中表示管道</li><li>shell在解释命令遇到|时会创建管道，并创建另个进程，把标准输入输出重定向到管道，前一个进程向管道写数据，后一个进程从管道读数据。</li><li>在管道中只有<strong>标准输出才传递给下一个命令</strong>，<strong>标准错误输出直接输出到终端</strong>。</li></ul><p>管道重定向实例</p><ul><li>查找名称含有curl的文件进行计数，并把错误信息重定向到/dev/null    <ul><li>find / -iname  *curl* 2&gt; /dev/null | wc -l</li></ul></li><li><strong>查找名称含有ssh的进程</strong><ul><li><strong>ps -ef | grep ssh</strong><ul><li><strong>ps -e 显示所有进程，环境变量</strong></li><li>ps -ef 意思是以长格式显示所有进程</li><li>grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。</li></ul></li></ul></li><li>分页查看内容<ul><li>ls -l -R /usr/share | less</li></ul></li><li>排序文件<ul><li>ls | sort -r</li></ul></li><li>分页查看帮助文档<ul><li>help test | less</li><li>cat /etc/passwd | less</li></ul></li></ul><h3 id="ch05-用户和组管理"><a href="#ch05-用户和组管理" class="headerlink" title="ch05 用户和组管理"></a>ch05 用户和组管理</h3><ul><li>Linux是一个多用户多任务的系统</li><li>linux用户分三类<ul><li>超级用户<ul><li>root</li></ul></li><li>普通用户<ul><li>系统安装时创建的用户及后期使用中由用户创建的用户</li></ul></li><li>系统用户<ul><li>系统及服务运行时必须存在的用户，但与真实的普通用户有所不同，默认 情况下是不能登录系统的，它们的存在主要是满足系统进程对文件属主的 需求。一般用于系统服务。    </li></ul></li></ul></li></ul><p>组的概念</p><ul><li>第一种分为<strong>超级用户组</strong>(root group)、<strong>系统组</strong>(system group)和<strong>用户组</strong>(user group)</li><li>第二种分类<strong>基本组</strong>和<strong>附加组</strong></li><li>第三种分为<strong>私有组</strong>和<strong>公共组</strong></li><li>属于多个组的用户所拥有的权限是它所在的组的权限之和    </li></ul><p>root用户具有最高权限，他的UID是0.在Ubuntu上以root用户登录时提示符会变成<strong>#</strong>，其他用户提示符是<strong>$</strong></p><p>可以修改 /etc/passwd 文件中的uid为0，使普通用户获得和root一样的权限。    </p><p>su ：后边不带 username 使用时，su 默认会切换到 超级用户    </p><p>sudo允许程序临时以root身份运行。sudo默认是以root身份运行命令，但是 使用-u [username]可以以其他用户身份运行命令    </p><p>如果是root用户，不需要使用sudo    </p><p>示例(获取软件更新)： sudo apt update    </p><p>passwd用于设置用户密码： sudo passwd [username]    </p><p>想退回普通账户时可以执行“exit”或“logout”     </p><p>sudo adduser –shell /bin/bash oklinux //创建hellolinux用户，默认登录shell是bash </p><p>sudo adduser –shell /bin/bash ubuntu1 –gid 1001 //指定要添加的组    </p><p>sudo deluser [username] 此操作不会删除主目录。    </p><p>sudo deluser –remove-home [username] 删除用户并删除主目录。    </p><p>sudo deluser –remove-all-files [username] 删除用户以及系统中一切属于 此用户的文件。    </p><p>创建组 sudo addgroup [–gid ID][group] –gid ID 手动指定组ID    </p><p>删除组 sudo delgroup [group]    </p><p>sudo usermod -G brave -a oklinux    </p><h4 id="ch06-安装-卸载软件"><a href="#ch06-安装-卸载软件" class="headerlink" title="ch06 安装/卸载软件"></a>ch06 安装/卸载软件</h4><p>.deb格式是Debian/Ubuntu使用的格式。    </p><p>dpkg是Debian/Ubuntu上管理本地软件包的命令。dpkg不会联网查询软件包 信息。    </p><ul><li>sudo  dpkg –install vscode.deb    </li><li>sudo dpkg –remove vscode    </li><li>sudo dpkg -l //列出所有软件包的信息    </li></ul><p>安装软件：sudo apt  install  +软件名</p><p>卸载软件：sudo apt  remove+软件名</p><p> 删除所有自动安装且已经不再使用的包：sudo apt autoremove</p><p>获取系统以及软件的更新信息    sudo apt update    </p><p>更新软件包：sudo apt upgrade </p><p>或者是 sudo apt full-upgrade，使用fullupgrade会进行整体的操作，如果一个软件的依赖关系发生变化，会先卸载 软件再安装。       </p><h3 id="ch07-文件编辑"><a href="#ch07-文件编辑" class="headerlink" title="ch07 文件编辑"></a>ch07 文件编辑</h3><p>nano使用</p><ul><li>nano [FILE NAME]就可以打开一个文件，如果不存在则会创建。    </li><li>nano是打开文件就可以直接编辑的，并且默认启动后窗口底部会显示常用 快捷键选项。    </li><li>编辑快捷键：Ctrl+O写入，Ctrl+X退出。    </li><li>配置文件：/etc/nanorc</li></ul><p>vim与vi终端字符模式运行的文本编辑器    </p><p>vim三种模式</p><ul><li><strong>命令模式</strong>：输入命令对文档等进行操作    </li><li><strong>输入模式</strong>：编辑文本，左下角显–INSERT–    </li><li><strong>底行模式</strong>：输入:会在文档最后一行显示：并等待输入命令，执行完成后会自动返回命令 模式。    </li></ul><p>ESC用于模式切换，当在命令模式输入i，a，o进行插入操作时，会切换到输 入模式，此时按ESC会回到命令模式    </p><p>在命令模式中：h、i、j、k(左下上右)</p><p>X：删除前面的字符    </p><p>x：删除后面的字符。    </p><p>：w 写入文件 ：q 退出文件 ：wq 写入并退出 ：q！ 不保存退出    </p><p>指令模式操作： </p><p>d 删除/剪切 ； </p><p>dd 删除当前行 ；</p><p> d\$ 删除到行尾的内容 ；</p><p> 2dd 会重复两次运行dd命令 </p><p>yy 复制当前行 ；</p><p> p 粘贴 </p><p>V 选中整行，此时移动光标可以成块选中</p><p> v 从光标标记位置开始选中 </p><p>u 撤销更改 </p><p>Ctrl+R 恢复更改，R大写 0 到行首 ； </p><p>0 到行首 ； $ 到行尾    </p><p>vim搜索和替换操作</p><p>：/php 搜索所有匹配php的行，输入n跳转到下一个匹配，N定位到上一个匹配</p><p>：s /php/ c  替换当前行第一个php的位置为c</p><p>：s /php /c /g 替换当前行所有php的位置为c</p><p>：%s /php/ c  替换所有行第一个php的位置为c</p><p> ：%s /php /c /g 替换当前行所有php的位置为c</p><p>ch08文件管理</p><p>在Linux上，一切皆是文件。外接设备也会被映射为文件，在/dev目录下    </p><p>Linux上的文件名称区分大小写，这点和Windows不同，Windows是不区分的    </p><p>r：可读 </p><p> w：可写，可以更改文件/目录的内容，可以删除文件/目录。</p><p>  x：可执行，程序要具有可执行权限。目录必须要有可执行权限才可以进入    </p><p>chmod 755 bin/pse rwxr-xr-x</p><p>chmod +x bin/pse 添加可执行权限，所属用户与用户组具备可执行权限</p><p>chmod -w bin/pse 去掉写权限，用户，用户组，其他用户都会去掉写权限</p><p>chown oklinux:oklinux hd1 更改hd1文件所属用户为oklinux，所属用户组 为oklinux    </p><p>chown :brave hd1  更改hd1文件所属用户组</p><p>chown oklinux：hd1更改文件所属用户</p><p>ln $PWD/hd1 hd2    会在当前目录创建文件的硬链接hd2。    </p><p>在执行连接之前，存放连接的目录中不能有与链接名同名的文件。如果创建 硬连接，则TARGET文件必须存在，并且不能是目录    </p><p>ln -s /bin/date  $HOME/bin/t        在主目录下的bin目录创建符号链接t指向/bin/date。    </p><p>创建符号链接就会创建一个文件，此文件记录的是另一个文件的路径。删除 源文件或目录，只删除了数据，不会删除软链接。一旦以同样文件名创建了 源文件，连接将继续指向该文件。    </p><h3 id="ch09-进程管理"><a href="#ch09-进程管理" class="headerlink" title="ch09 进程管理"></a>ch09 进程管理</h3><ul><li>ps -e 查看所有进程</li><li>ps -e | grep ssh 进程中含有ssh名称的进程    </li></ul><ul><li>sudo kill + pid 结束进程(默认 发送sigterm信号)</li><li>sudo kill -9 4096(sigkill 信号值：9)强制结束</li><li>jobs查看后台进程</li><li>fg 任务号  把后台进程继续执行</li><li>bg 任务号 任务在后台继续执行</li></ul><h3 id="ch10-网络命令与配置"><a href="#ch10-网络命令与配置" class="headerlink" title="ch10 网络命令与配置"></a>ch10 网络命令与配置</h3><p>ip help查看帮助信息</p><p>ip address 显示网卡以及IP地址，MAC地址等信息</p><p>为eth0网卡分配IP地址 ： ip address add 192.168.180.102/24 dev enp0s8    </p><p>删除eth0的IP地址：   ip address del 192.168.180.102/24 dev enp0s8    </p><p>列出路由表：ip route list    </p><p>iftop监听网络通信情况。运行时需要root权限：sudo iftop    </p><p>nethogs监控进程的带宽占用情况： sudo nethogs        </p><p>重启网络：<strong>sudo service networking restart</strong></p><p>curl是一个命令行模式网络客户端工具        curl ’10.7.1.3:3456’    </p><h3 id="ch11-shell脚本基础-变量"><a href="#ch11-shell脚本基础-变量" class="headerlink" title="ch11 shell脚本基础-变量"></a>ch11 shell脚本基础-变量</h3><p>shell是用户和系统交互的桥梁：  shell是Linux的一个程序，实现版本有多种。shell的主要工作就是运行命 令    </p><p>  sh是shell的简写，shell的实现版本有：sh，bash，csh，tcsh，zsh    </p><p>用户通过shell和系统交互   </p><p>输入 ls -l,shell要解析成‘ls’ ,‘-l’，’ls’就是命令名称，并 在PATH设置的路径中寻找，找到/bin/ls这个命令，fork一个子进程调用 execv等系统调用传递参数运行命令。并等待结束。     </p><p>注意：真正运行命令的不是shell，而是内核，shell去调用内核提供的接 口，shell是调用fork创建子进程去运行命令    </p><p>shell支持通配符，使用*表示匹配任意长度的字符，?匹配任意一个字符    </p><p>ls ./a*，会匹配a开头的所有文件并 显示，如果存在ab.txt，ac.txt，则会扩展成ls ./ab.txt ./ac.txt。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Hello world'</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>chmod 755 [SCRIPT NAME]    </p><p>给脚本添加执行权限，脚本开头的#!/bin/bash声明这是一个脚本文件，要用 /bin/bash执行。    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=`ls` 会把ls运行的结果赋值给a。注意ls不是被单引号包含，而是反</span><br><span class="line">引号。</span><br><span class="line">=左右不能有空格，否则会按照运行命令的方式去执行。</span><br><span class="line">获取变量的值要用$，<span class="built_in">echo</span> <span class="variable">$a</span>可以输出变量的值。</span><br></pre></td></tr></table></figure><p>b=a12， 则x=\$((\$a+\$b))则直接就计算为a的数值，b转成数字为0。    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">逻辑运算：&amp;&amp;，||， !。分别是AND，OR，NOT。</span><br><span class="line">• 对逻辑运算来说，任何非0值都是真。</span><br><span class="line">• 示例：<span class="built_in">echo</span> $((1&amp;&amp;0)) ; <span class="built_in">echo</span> $(( 2 || 0))</span><br><span class="line">• 非数字格式逻辑运算：</span><br><span class="line">b=abc</span><br><span class="line"><span class="built_in">echo</span> $(( 1 &amp;&amp; <span class="variable">$b</span> )) //输出是0</span><br><span class="line">/*************/</span><br><span class="line">b=12a</span><br><span class="line"><span class="built_in">echo</span> $(( 1 &amp;&amp; <span class="variable">$b</span>)) //提示错误</span><br><span class="line">• &amp;&amp; || !运算往往和<span class="keyword">if</span>语句配合使用。</span><br></pre></td></tr></table></figure><p><strong>export a:把变量放到环境变量，环境变量是一个名称与值的简单列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">• <span class="variable">$0</span>：当前脚本的文件名/当前执行的进程/程序名</span><br><span class="line">• <span class="variable">$n</span>：n为从1开始的数字，<span class="variable">$1</span>是第一个参数，<span class="variable">$2</span>是第二个参数，<span class="variable">$&#123;10&#125;</span>是第十</span><br><span class="line">个参数（从<span class="variable">$&#123;10&#125;</span>开始参数号需要用花括号括起来）</span><br><span class="line">• <span class="variable">$#</span>：传入脚本的参数的个数</span><br><span class="line">• $*：所有的位置参数(作为单个字符串)</span><br><span class="line">• <span class="variable">$@</span>：所有的位置参数(每个都作为独立的字符串)。</span><br><span class="line">• $?：当前shell进程中，上一个命令的返回值，如果上一个命令成功执行则$?</span><br><span class="line">的值为0，否则为其他非零值，常用做<span class="keyword">if</span>语句条件</span><br><span class="line">• $$：当前shell进程的pid</span><br><span class="line">• $!：后台运行的最后一个进程的pid</span><br><span class="line">• <span class="variable">$&#123;#var&#125;</span> 返回变量值（字符串）的长度</span><br></pre></td></tr></table></figure><h3 id="ch12-shell脚本基础-逻辑判断与循环"><a href="#ch12-shell脚本基础-逻辑判断与循环" class="headerlink" title="ch12 shell脚本基础-逻辑判断与循环"></a>ch12 shell脚本基础-逻辑判断与循环</h3><p>test是shell内建命令，可以处理脚本里的各类工作，产生的不是一般形式的 输出，而是可用的退出状态。    </p><p>test命令有其他形式：[······]，[[······]]。当在[ ]中使用&amp;&amp; || 会出错，这时候要 使用[[ ]]。    </p><p><strong>test返回true或false，但是test返回的true是0，false是1</strong>    </p><p>例：<strong>test “abc”=“abc” ; test -f ~/tmp/a.sh ; [ -f ~/tmp/a.sh ]</strong>    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DIR_LIST=<span class="string">"a b c d e f"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$DIR_LIST</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="keyword">if</span> ! <span class="built_in">test</span> -d ~/sh/study/<span class="variable">$i</span>;</span><br><span class="line">   <span class="keyword">then</span> mkdir ~/sh/study/<span class="variable">$i</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> <span class="comment">#  -gt:&gt;  -lt:&lt; -eq:= -ne :!= -le:&lt;= -ge:&gt;=</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ 5 -gt 3 ] ;</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">'5&gt;3'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">  </span><br><span class="line">comm=ps -e -o user,pid,ppid,tty,comm,args</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -gt 0 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="variable">$comm</span> | grep <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="variable">$comm</span></span><br></pre></td></tr></table></figure><h3 id="ch13-vim和Linux-C语言编译环境"><a href="#ch13-vim和Linux-C语言编译环境" class="headerlink" title="ch13 vim和Linux C语言编译环境"></a>ch13 vim和Linux C语言编译环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim test.c 创建一个c语言程序</span><br><span class="line">gcc test.c 进行编译，编译后的文件是a.out</span><br><span class="line">./a.out 运行</span><br><span class="line">gcc -o <span class="built_in">test</span> test.c -o 后跟输出文件的名称</span><br><span class="line">./<span class="built_in">test</span> 运行</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(“program name: %s\n”, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;argc; i++)</span><br><span class="line">    <span class="built_in">printf</span>(“%s ”, argv[i]);</span><br><span class="line">    <span class="keyword">if</span> (argc&gt;<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">printf</span>(“\n”);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*main函数的返回值是程序的退出状态表示程序是否正确执行。</span></span><br><span class="line"><span class="comment">argc是传递给程序的参数的个数</span></span><br><span class="line"><span class="comment">argv是每个参数的值</span></span><br><span class="line"><span class="comment">argv[0]永远是程序文件的名称，参数值从argv[1]开始</span></span><br></pre></td></tr></table></figure><h3 id="ch14-系统编程基础"><a href="#ch14-系统编程基础" class="headerlink" title="ch14 系统编程基础"></a>ch14 系统编程基础</h3><p>系统编程就是调用Linux系统提供的API完成需要的任务    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取自己的PID</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(“%d\n”, getpid() );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">外部编译+执行</span><br><span class="line">gcc -o tc tc.c</span><br><span class="line">./tc</span><br></pre></td></tr></table></figure><p>用fork()创建子进程</p><p>fork会创建子进程，调用fork，新创建的进程会和父进程一样继续执行。</p><p>fork出错返回-1并且不会创建新的进程；正确则在父进程返回创建子进程 的PID，在子进程返回0。 </p><p> 由于父进程和子进程不同的返回值。可以通过判断返回值控制父进程和子进 程执行不同的代码。</p><p>父进程先于子进程退出，子进程被<strong>init进程</strong>(ID为1的进程)接管        </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;vim</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">int</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid=<span class="number">0</span>;</span><br><span class="line">    pid=frok();</span><br><span class="line">    <span class="keyword">if</span>(pid&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Parent:%d\n"</span>,getpid());</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"My Parent:%d\n"</span>,getppid());</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;vim</span><br><span class="line">int main(int argc,int *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    fork();</span><br><span class="line">    cout&lt;&lt;"create"&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">create</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="ch15-Linux系统调用：IO"><a href="#ch15-Linux系统调用：IO" class="headerlink" title="ch15 Linux系统调用：IO"></a>ch15 Linux系统调用：IO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">open函数用于打开文件操作：</span><br><span class="line">int open(const char *pathname, int flags, mode_t mode); 参数依次为文件路径名称，标志</span><br><span class="line">位，模式。成功返回值为打开的文件描述符，错误返回-1。</span><br><span class="line">flags选项：</span><br><span class="line">O_CREAT 没有则创建文件</span><br><span class="line">O_WRONLY 写模式打开文件</span><br><span class="line">O_RDONLY 只读模式打开文件</span><br><span class="line">O_RDWR 读写方式打开</span><br><span class="line">mode选项：</span><br><span class="line">S_IRWXU 文件所有者具有可读，可写，可执行的权限</span><br><span class="line">S_IRUSR 文件所有者有可读权限</span><br><span class="line">S_IWUSR 文件所有者具有可写权限</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在文件操作最后要记得使用close关闭打开的文件：int close(int fd);</span><br><span class="line">close函数成功返回0，错误返回-1。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">"buffer"</span>,O_CREAT,S_IRUSR|S_IWUSR|S_IRGRP);</span><br><span class="line">    <span class="keyword">if</span>(fd&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    colse(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码从buffer文件读取一些数据并放到变量buf中：</span></span><br><span class="line"><span class="keyword">int</span> fd = open(“buffer”, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">"open"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;‘\<span class="number">0</span>’&#125;;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">count = read(fd, buf, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (count&lt;<span class="number">0</span>) &#123;</span><br><span class="line">perror(“read”);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(“%s\n”,buf);</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码会向buffer文件写入一条数据：</span></span><br><span class="line"><span class="keyword">char</span>*buf = “Linux\nUnix\nC”;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">count = write(fd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line"><span class="keyword">if</span> (count&lt;<span class="number">0</span>)</span><br><span class="line">perror(“write”);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(“bytes:%d\n”, count);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下示例代码printf不会在屏幕输出，而是输出到一个文件中：IO重定向</span></span><br><span class="line"><span class="keyword">int</span> fd=open(“riotest”,O_CREAT|O_APPEND|O_RDWR,S_IRUSR|S_IWUSR);</span><br><span class="line"><span class="keyword">if</span> (fd&lt;<span class="number">0</span>) &#123;</span><br><span class="line">perror(“open”);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dup2(fd, <span class="number">1</span>); <span class="comment">//dup2（old,new)</span></span><br><span class="line">close(fd);</span><br><span class="line"><span class="built_in">printf</span>(“PHP is best\n”);</span><br></pre></td></tr></table></figure><h3 id="ch16-系统服务"><a href="#ch16-系统服务" class="headerlink" title="ch16 系统服务"></a>ch16 系统服务</h3><p>·系统服务程序和在shell运行的普通命令不同，如果在shell运行一个命令， shell是作为父进程fork出子进程去运行的。 </p><p>• 而系统服务程序运行后往往是守护进程（daemon process），守护进程是作 为init进程（进程ID为1的进程， init负责系统的初始化）的子进程，并且不 会连接到终端，输入输出都不会经过终端。 • <strong>系统服务程序开机后会启动</strong>，并运行在后台，提供基本的服务支持。（当然 也是可以开机启动完成任务后退出，并没有严格限制，但多数系统服务程序 都要在后台运行。）    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service -status-all 显示所有的服务</span><br><span class="line">service ufw restart</span><br><span class="line">sudo /etc/init.d/networking restart 重启网络服务</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">• Linux系统有7个运行级别：</span><br><span class="line">• 0 ：关机，默认级别不能是0，否则不能正常启动</span><br><span class="line">• 1 ：单用户模式，用于系统维护，不能远程登录</span><br><span class="line">• 2 ：多用户模式，不支持NFS</span><br><span class="line">• 3 ：多用户模式，支持NFS</span><br><span class="line">• 4 ：系统保留，未定义</span><br><span class="line">• 5 ：界面模式，开机后进入桌面环境</span><br><span class="line">• 6 ：重启，默认运行级别不能是6否则会不断重启</span><br><span class="line">• 查看运行级别的命令：runlevel</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• /etc/存在rc*.d 目录，*是0-6的数字， /etc/init.d目录下的服务程序只是</span><br><span class="line">一个集合，系统启动时，会根据级别运行rc*.d目录的程序，而此目录下</span><br><span class="line">是链接到/etc/init.d的符号链接，这样就实现了不同级别的不同服务配置。</span><br><span class="line">• 注意这里有rc0.d和rc6.d，这两个目录下的符号链接是K开头，而其他的</span><br><span class="line">是S开头，K开头的是不启动的，而是在离开此运行级别时要进行的操作，</span><br><span class="line">比如关机要进行一些清理工作。</span><br><span class="line">• 符号链接S/K后面跟的数字是启动顺序，数字小的先运行</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：有服务脚本sh/servtest，通过runlevel查看启动级别是5，把</span><br><span class="line">servtest复制到/etc/init.d，然后创建符号链接：</span><br><span class="line">sudo cp sh/servtest /etc/init.d/</span><br><span class="line">sudo ln -s /etc/init.d/servtest /etc/rc5.d/S05servtest</span><br><span class="line">//ln -s 指向的文件 符号链接在的文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux basic&lt;/p&gt;
    
    </summary>
    
      <category term="-&quot;学习资料&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
      <category term="-Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>DB_2</title>
    <link href="http://yoursite.com/2018/06/24/DB_2/"/>
    <id>http://yoursite.com/2018/06/24/DB_2/</id>
    <published>2018-06-24T12:21:44.000Z</published>
    <updated>2018-06-24T12:23:35.623Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h3><a id="more"></a><p>第一节 关系数据结构及形式化定义</p><ul><li>关系<ul><li>域：一组具有相同数据类型的值的集合<ul><li>整数</li><li>实数</li><li>…</li></ul></li><li>笛卡尔积：域上的一种集合运算<ul><li>给定一组域D1、D2、…Dn，允许其中某些域是相同的</li><li>D1、D2，，，Dn的笛卡尔积为：</li><li>D 1×D2×…×Dn ＝ ｛（d1， d2， …， dn）｜di ∈ Di， i＝1， 2， …， n｝ </li><li>所有域的所有取值的一个组合  </li><li>元素(d1， d2， …， dn)叫作一个n元组  </li><li>元素中的每一个值di叫做一个分量    </li><li>一个域允许的不同取值个数称为这个域的基数   (笛卡尔积基数表示方法每一个域的取值个数的乘积)</li></ul></li><li>关系<ul><li>D 1×D2×…×Dn的子集叫作在域D1， D2， …， Dn上的关 系，表示为    </li><li>R：关系名  R（D1， D2， …， Dn）    </li><li>n：关系的目或度（Degree）</li></ul></li></ul></li><li>三类关系<ul><li>基本关系<ul><li>实际存在的表，是实际存储逻辑表示</li></ul></li><li>查询表<ul><li>查询结果对应的表</li></ul></li><li>视图表<ul><li>由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据</li></ul></li></ul></li><li>基本关系的性质<ul><li>列是同质的</li><li>不同的列可出自同一个域<ul><li>其中的每一列称为一个属性</li><li>不同的属性要给与不同的属性名</li></ul></li><li>列的顺序无所谓，列的次序可以任意交换</li><li>任意两个元组的候选码不能相同</li><li>行的顺序无所谓，行的次序可以任意交换</li><li>分量必须去原子值</li></ul></li></ul><p>关系模式</p><ul><li>关系模式对应表头。</li><li>关系模式是对关系的描述，是静态的，稳定的</li><li>关系是关系模式在某一时刻的状态或内容，是动态的、随时间不断变化的</li><li>关系模式和关系往往统称为关系。</li></ul><p>关系模式可以形式化地表示为：</p><p>R（U,D,DOM,F)</p><p>R  关系名</p><p>U 组成该关系的属性名集合</p><p>D 属性U中属性所来自的域</p><p>DOM 属性向域的映像集合</p><p>F 属性间的数据依赖关系</p><p>简记为</p><p>R (U)    </p><p><strong>选择、投影、并、差、笛卡尔积</strong>是5种基本操作</p><p>关系操作的特点</p><ul><li>集合操作方式：操作对象和结果都是集合，一次一集合的方式。</li></ul><p>关系的完整性</p><ul><li>实体完整性<ul><li>若属性A是基本关系R的主属性，则A不能取空值</li></ul></li><li>参照完整性<ul><li>关系间的引用</li><li>外码</li><li>参照完整性规则<ul><li>F是R的外码，F是S的主码，F在R上的取值<ul><li>空</li><li>等于S中某个元组主码值</li></ul></li></ul></li></ul></li><li>用户定义完整性:针对某一具体关系数据库的约束条件， 反映某一具体 应用所涉及的数据必须满足的语义要求    <ul><li>例：课程(课程号， 课程名， 学分) <ul><li>“课程号”属性必须取唯一值 </li><li>非主属性“课程名” 也不能取空值 </li><li>“学分”属性只能取值{1， 2， 3， 4}    </li></ul></li></ul></li></ul><p>关系代数</p><p><strong>传统集合运算：并 差 交 笛卡尔积</strong></p><ul><li>并 ∪<ul><li>R和S  具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域    </li></ul></li><li>差 -<ul><li>R和S  具有相同的目n </li><li>相应的属性取自同一个域    </li></ul></li><li>交 ∩<ul><li>R和S 具有相同的目n </li><li>相应的属性取自同一个域    </li></ul></li><li><p>笛卡尔积 X</p><ul><li>R: n目关系， k1个元组    </li><li>S: m目关系， k2个元组    </li><li>R×S </li><li>列： （n+m） 列元组的集合 – 元组的前n列是关系R的一个元组 – 后m列是关系S的一个元组 </li><li>行： k1×k2个元组 –  R×S = {tr ts |tr∈ R ∧ ts∈S }    </li></ul><p><strong>专门的集合运算：选择，投影，连接，除</strong></p></li><li><p>选择</p><ul><li>选择满足条件的元组，行</li><li>σ Sdept = ‘IS’ (Student)    </li></ul></li><li>投影<ul><li>选择满足条件的属性，列</li><li>π Sname， Sdept(Student)    </li></ul></li><li>连接<ul><li>等值连接<ul><li>什么是等值连接 θ为“＝” 的连接运算称为等值连接    </li><li>从关系R与S的广义笛卡尔积中选取A、 B属性值 相等的那些元组    </li></ul></li><li>自然连接<ul><li>自然连接是一种特殊的等值连接<ul><li>两个关系中进行比较的分量必须是相同的属性组    </li><li>结果中把重复的属性列去掉</li></ul></li></ul></li><li><img src="https://i.loli.net/2018/06/24/5b2f8b4cb35f9.png" alt="1529752265854"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8bbe24d3c.png" alt="1529752575346"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8bee1eeac.png" alt="1529752582903"></li><li></li></ul></li><li>除<ul><li>给定关系R(X,Y)，S(Y,Z).R与S相除得到一个新的关系P(X)</li><li>P是R中满足下列条件的元组<ul><li>元组在X上分量值x的象集包含S在Y上投影的集合</li></ul></li><li><img src="https://i.loli.net/2018/06/24/5b2f8c06aeba6.png" alt="1529762224828"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8c1ec90c3.png" alt="1529762230493"></li><li></li></ul></li></ul><p><strong>关系代数运算：并、差、交、笛卡尔积、投影、选择、连接、除</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第二章-关系数据库&quot;&gt;&lt;a href=&quot;#第二章-关系数据库&quot; class=&quot;headerlink&quot; title=&quot;第二章 关系数据库&quot;&gt;&lt;/a&gt;第二章 关系数据库&lt;/h3&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_1</title>
    <link href="http://yoursite.com/2018/06/20/DB_1/"/>
    <id>http://yoursite.com/2018/06/20/DB_1/</id>
    <published>2018-06-20T10:05:44.000Z</published>
    <updated>2018-06-24T12:25:01.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章绪论"><a href="#第一章绪论" class="headerlink" title="第一章绪论"></a>第一章绪论</h2><a id="more"></a><h3 id="第一节-数据库系统概述"><a href="#第一节-数据库系统概述" class="headerlink" title="第一节 数据库系统概述"></a>第一节 数据库系统概述</h3><p><strong>数据库的地位</strong>：数据库技术是<strong>信息系统</strong>的核心和基础，它的出现极大促进了计算机应用向各行各业的渗透。</p><p><strong>数据（Data）的定义：</strong>数据是<strong>数据库中存储的基本对象，</strong>描述事物的符号记录称为数据</p><p>数据的种类：文字、图像、图形、声音</p><p>数据的特点：数据与其语义是不可分的</p><p><strong>数据的形式不能完全表达其内容</strong></p><p><strong>数据库（Database)的定义</strong>：数据库是长期存储在计算机内、有组织、可共享的大量数据的集合。</p><p><strong>数据库的基本特征</strong>：</p><ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ul><p><strong>数据库管理系统（DataBase Management System DBMS）</strong>：数据库管理系统和操作系统一样是计算机的基础软件。</p><p>   功能：</p><ul><li>数据的定义功能<ul><li>提供数据定义语言（DDL）</li><li>定义数据库中的数据对象</li></ul></li><li>数据组织、存储和管理</li><li>数据操纵功能<ul><li>提供数据操纵语言（DML）</li><li>实现对数据库的基本操作（查询、插入、删除和修改）</li></ul></li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li><li>其他功能</li></ul><p><strong>数据库系统（Database System，DBS）</strong>：数据库系统是由<strong>数据库</strong>、<strong>数据管理系统</strong>、<strong>应用程序</strong>和<strong>数据库管理员(DBA)</strong>组织的<strong>存储、管理、处理和维护</strong>数据的系统</p><p><strong>数据管理</strong>：对数据进行分类、组织、编码、存储、检索和维护，是数据处理的中心问题</p><p><strong>数据管理技术的发展</strong>：</p><table><thead><tr><th></th><th>人工管理阶段</th><th>文件系统阶段</th><th>数据库系统阶段</th></tr></thead><tbody><tr><td>*管理者</td><td>用户，数据不保存</td><td>文件系统，数据可长期保存</td><td></td></tr><tr><td>*面向的对象</td><td>应用程序</td><td>应用程序</td><td>全组织</td></tr><tr><td>*共享程度</td><td>无共享冗余度极大</td><td>共享性差，冗余度大</td><td>高</td></tr><tr><td>*独立性</td><td>不独立，完全依赖程序</td><td>记录内有结构，整体无结构</td><td>高</td></tr><tr><td>*结构化</td><td>无结构</td><td>独立性差，数据的逻辑结构改变必须修改应用程序</td><td>整体结构化</td></tr><tr><td>*控制能力</td><td>应用程序控制</td><td>应用程序控制</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>数据库系统的特点：</p><ul><li>数据结构化<ul><li>整体数据结构化是数据库主要特征之一，也是数据库系统和文件系统的本质区别</li><li>数据的结构用<strong>数据模型</strong>描述，无程序的定义和解释</li><li>数据可以<strong>变长</strong></li><li>数据的最小存取单位是<strong>数据项</strong></li></ul></li><li>数据的共享性高、冗余度低且易扩充</li><li>数据独立性高<ul><li>物理独立性<ul><li>用户的应用程序与存储在磁盘上的数据库中的数据时相互独立的。当数据的物理存储改变了，应用程序不用改变。</li></ul></li><li>逻辑独立性<ul><li>应用程序与数据的逻辑结构是相互独立的，数的逻辑结构变了，用户程序也可以不变。</li></ul></li><li>数据的独立性是由DBMS的<strong>二级映像</strong>功能来保证的。</li></ul></li><li>数据由数据库管理系统统一管理和控制<ul><li>数据的安全性保护</li><li>数据的完整性检查</li><li>并发控制</li><li>数据库恢复     </li></ul></li></ul><p>数据模型：</p><ul><li>数据模型是对现实世界的抽象</li><li><strong>数据模型是数据库系统的核心和基础</strong></li></ul><p>数据模型分为两类</p><ul><li>概念模型：也称信息模型，按照用户的观点来对数据和信息建模，用于数据库的设计</li><li>逻辑模型和物理模型<ul><li>逻辑模型：主要包括网状模型、层次模型、关系模型、面向对象模型等。</li><li>物理模型：对数据的最底层的抽象，描述数据在系统内部的表示方式和存取方法。</li></ul></li></ul><p><img src="https://i.loli.net/2018/06/24/5b2f8d5e2cf7f.png" alt="1529416450682"></p><p>数据模型的三个组成要素：</p><ul><li>数据结构<ul><li>描述数据库的组成对象，以及对象之间的关系</li><li>对系统静态特性的描述</li><li>非关系模型<ul><li>层次模型</li><li>网状模型</li></ul></li><li>关系模型<ul><li>数据结构：关系</li></ul></li><li>面向对象模型<ul><li>数据结构：对象</li></ul></li></ul></li><li>数据操作<ul><li>对数据库中各种对象(型)的实例(值)允许执行的操作及有 关的操作规则    </li><li>查询。更新（插入，删除，修改）</li><li>数据操作是对系统动态特性的描述。    </li></ul></li><li>数据的完整性约束条件：数据的完整性约束条件是一组完整性规则。</li></ul><p>关系模型：每个关系的数据结构是一张规范化的二维表</p><p>关系模型的概念：</p><ul><li>关系：一个关系就是一张表</li><li>关系名：表名</li><li>关系模式：表头</li><li>元组：表中的一行是一个元组</li><li>属性：表中一列是一个属性，给每一个属性起一个名称即 属性名    </li><li>码：唯一确定一个元组的属性或者属性组</li><li>域：是一组具有相同数据类型的值的集合</li><li>分量：元组中的一个属性值</li></ul><p>关系模式必须是规范化的，关系的每一个分量都必须是一个不可分的数据项</p><p><strong>不允许表中有表</strong></p><p><img src="https://i.loli.net/2018/06/24/5b2f8d7374fda.png" alt="1529484361751"></p><p>数据操作是集合的操作，操作对象和操作结果都是关系，即元组的集合    (查询，插入，删除，更新)</p><p>关系的完整性约束条件：</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户自定义完整性</li></ul><p>数据库系统结构</p><ul><li>型：对某一类数据的结构和属性的说明</li><li>值：是型的具体赋值</li><li>学生记录型：(学号，姓名，性别，系别，年龄，籍贯)<ul><li>记录值(201315130，李明，男，计算机，19，江苏)</li></ul></li></ul><p>模式：模式是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型的描述，不涉及具体的值。模式的一个具体值称为模式的一个实例。</p><p><strong>一个数据库只有一个模式</strong></p><p><strong>模式是数据库系统模式结构的中间层</strong>    </p><p><strong>模式是相对稳定的</strong>，<strong>而实例是相对变动的</strong>。</p><p>数据库系统的三级模式结构</p><ul><li>模式</li><li>外模式</li><li>内模式</li></ul><p><img src="https://i.loli.net/2018/06/24/5b2f8d8991584.png" alt="1529485835773"></p><p>模式的定义</p><ul><li>数据的逻辑结构(数据项的名字、类型、取值范围)</li><li>数据之间的联系</li><li>数据有关的安全性、完整性要求</li></ul><p>外模式</p><ul><li>数据库用户使用的<strong>局部数据</strong>的逻辑结构和特征的描述</li><li>外模式通常是模式的子集。</li><li>同一外模式可以为某一用户的多个应用系统使用。但是一个应用程序只能使用一个外模式。</li></ul><p>内模式</p><ul><li>内模式也称存储模式，<strong>一个数据库只有一个内模式。</strong></li><li>他是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</li></ul><p>二级映像</p><ul><li>外模式/模式 映像<ul><li>对于每一个外模式，数据库系统中都一个外模式/模式映像，它定义了该外模式与模式之间的对应关系。</li><li>当模式改变时，由于数据库管理员对各个外模式/模式的映像作出改变，可以使外模式保持不变</li><li>应用程序是依赖数据的外模式编写的，应用程序不必改变。</li><li>保证的<strong>数据的逻辑独立性</strong></li></ul></li><li>模式/内模式映像<ul><li>当数据库的存储结构改变时，由数据库管理员对模式/内模式映像作相应改变，<br>可以使模式保持不变，从而应用程序也不必改变，</li><li>保证了数据与程序的<strong>物理独立性</strong></li><li>模式/内模式映像是唯一的</li></ul></li></ul><p>数据库系统的组成</p><ul><li>硬件平台及数据库</li><li>软件</li><li>人员</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章绪论&quot;&gt;&lt;a href=&quot;#第一章绪论&quot; class=&quot;headerlink&quot; title=&quot;第一章绪论&quot;&gt;&lt;/a&gt;第一章绪论&lt;/h2&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>动态内存管理-BF算法</title>
    <link href="http://yoursite.com/2018/06/15/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-BF%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/15/动态内存管理-BF算法/</id>
    <published>2018-06-15T13:40:44.000Z</published>
    <updated>2018-06-19T09:44:33.955Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最佳适应算法Best-fit算法</p></blockquote><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 10 <span class="comment">//假定系统允许的最大作业为10</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m 10 <span class="comment">//假定系统允许的空闲区表最大为10</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> minisize 100</span></span><br><span class="line"><span class="built_in">string</span> str[<span class="number">6</span>] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"--------------------------------------------------"</span>,</span><br><span class="line"><span class="string">"-           Author:杨子旭                        -"</span>,</span><br><span class="line"><span class="string">"-          Choose_your_operation:                -"</span>,</span><br><span class="line"><span class="string">"- 0-退出,1-分配内存,2-回收内存,3-显示内存,4-清屏 -"</span>,</span><br><span class="line"><span class="string">"-                                                -"</span>,</span><br><span class="line"><span class="string">"--------------------------------------------------"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll address; <span class="comment">/*已分分区起始地址*/</span></span><br><span class="line">ll len; <span class="comment">/*已分分区长度，单位为字节*/</span></span><br><span class="line"><span class="keyword">int</span> flag; <span class="comment">/*已分配区表登记栏标志，用"0"表示空栏目*/</span></span><br><span class="line">&#125;used;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll address; <span class="comment">//空闲区起始地址</span></span><br><span class="line">ll len; <span class="comment">//空闲区长度，单位为字节</span></span><br><span class="line"><span class="keyword">int</span> flag; <span class="comment">//空闲区表登记栏标志，用"0"表示空栏目，用"1"表示未分配</span></span><br><span class="line">&#125;Free;</span><br><span class="line">Free FL[n];</span><br><span class="line">used UL[n];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BF</span><span class="params">(<span class="keyword">char</span> J, ll n_size)</span> <span class="comment">//采用最佳分配算法分配n_size大小的空间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k;</span><br><span class="line">ll ad;</span><br><span class="line">k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;m; i++) <span class="comment">//寻找空间大于n_size的最小空闲区登记项k</span></span><br><span class="line"><span class="keyword">if</span> (FL[i].len &gt;= n_size &amp;&amp; FL[i].flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || FL[i].len&lt;FL[k].len)</span><br><span class="line">k = i;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span>)<span class="comment">//未找到可用空闲区，返回</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"无可用空闲区"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FL[k].len - n_size &lt;= minisize)<span class="comment">//直接分配</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].flag = <span class="number">0</span>;</span><br><span class="line">ad = FL[k].address;</span><br><span class="line">n_size = FL[k].len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//划分为两部分</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].len = FL[k].len - n_size;</span><br><span class="line">ad = FL[k].address + FL[k].len;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (UL[i].flag != <span class="number">0</span> &amp;&amp; i&lt;n) i++;<span class="comment">//找已分配表中空闲的的地方放入就行</span></span><br><span class="line">UL[i].address = ad;</span><br><span class="line">    UL[i].len = n_size;</span><br><span class="line">    UL[i].flag = J;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UL[pos].address=<span class="number">0</span>;</span><br><span class="line">    UL[pos].len=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recall</span><span class="params">(<span class="keyword">char</span> J)</span>  <span class="comment">//回收作业名为J的作业所占主存空间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k, j, s, t;</span><br><span class="line">ll S, L;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((UL[s].flag != J || UL[s].flag == <span class="number">0</span>) &amp;&amp; s&lt;n) s++;</span><br><span class="line"><span class="keyword">if</span> (s &gt;= n)<span class="comment">//在已分配表中找不到名字为J的作业</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"找不到该作业"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">UL[s].flag = <span class="number">0</span>;</span><br><span class="line">S = UL[s].address;</span><br><span class="line">L = UL[s].len;</span><br><span class="line">j = <span class="number">-1</span>; k = <span class="number">-1</span>; i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;m &amp;&amp; (j == <span class="number">-1</span> || k == <span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FL[i].flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (FL[i].address + FL[i].len == S)k = i;<span class="comment">//找到上邻</span></span><br><span class="line"><span class="keyword">if</span> (FL[i].address == S + L)j = i;<span class="comment">//找到下邻</span></span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k != <span class="number">-1</span> &amp;&amp; j != <span class="number">-1</span>)<span class="comment">//上下邻都有</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].len = FL[j].len + FL[k].len + L;</span><br><span class="line">FL[j].flag = <span class="number">0</span>;</span><br><span class="line">FL[j].address = <span class="number">0</span>;</span><br><span class="line">FL[j].len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k != <span class="number">-1</span> &amp;&amp; j == <span class="number">-1</span>)<span class="comment">//只有上邻</span></span><br><span class="line">    &#123;</span><br><span class="line">          FL[k].len = FL[k].len + L;</span><br><span class="line">          Set(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">-1</span> &amp;&amp; j != <span class="number">-1</span>)<span class="comment">//只有下邻</span></span><br><span class="line">&#123;</span><br><span class="line">FL[j].address = S;</span><br><span class="line">FL[j].len = FL[j].len + L;</span><br><span class="line">Set(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//上下邻都没有</span></span><br><span class="line">&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (FL[t].flag == <span class="number">1</span> &amp;&amp; t&lt;m)</span><br><span class="line">t++;</span><br><span class="line">FL[t].address = S;</span><br><span class="line">FL[t].len = L;</span><br><span class="line">FL[t].flag = <span class="number">1</span>;</span><br><span class="line">Set(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a;</span><br><span class="line">ll n_size;</span><br><span class="line"><span class="keyword">char</span> J;</span><br><span class="line">FL[<span class="number">0</span>].address = <span class="number">0</span>;</span><br><span class="line">FL[<span class="number">0</span>].len = <span class="number">5000</span>;</span><br><span class="line">FL[<span class="number">0</span>].flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;m; i++)</span><br><span class="line">FL[i].flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">UL[i].flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Choose_your_operation:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//a=0程序结束</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//a=1分配主存空间</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入作业名J和作业所需长度n_size: "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; J &gt;&gt; n_size;</span><br><span class="line">BF(J, n_size);<span class="comment">/*分配主存空间*/</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//a=2回收主存空间</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入要回收分区的作业名:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; J;</span><br><span class="line">recall(J);<span class="comment">/*回收主存空间*/</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//a=3显示主存情况</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"空闲分区表："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"起始地址 分区长度 标志"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;m; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; FL[i].address &lt;&lt; <span class="string">"       "</span> &lt;&lt; FL[i].len &lt;&lt; <span class="string">"      "</span> &lt;&lt; FL[i].flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 已分配区表 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"起始地址 分区长度 标志"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; UL[i].address &lt;&lt; <span class="string">"       "</span> &lt;&lt; UL[i].len &lt;&lt; <span class="string">"      "</span>;</span><br><span class="line"><span class="keyword">if</span> (UL[i].flag == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; UL[i].flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(UL[i].flag) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">system(<span class="string">"CLS"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"老铁没这个选项"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最佳适应算法Best-fit算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>os两个作业调度算法</title>
    <link href="http://yoursite.com/2018/06/15/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/15/作业调度算法/</id>
    <published>2018-06-15T13:40:44.000Z</published>
    <updated>2018-06-15T13:42:33.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="os两个作业调度算法"><a href="#os两个作业调度算法" class="headerlink" title="os两个作业调度算法"></a>os两个作业调度算法</h3><blockquote><p>1.FCFS先来先服务算法</p><p>2.SJF短作业优先算法</p><p>算法描述如下：</p></blockquote><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">author：杨子旭</span></span><br><span class="line"><span class="comment">class：16-5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name; <span class="comment">//进程名</span></span><br><span class="line">    <span class="keyword">bool</span> status;<span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">int</span> arrive;<span class="comment">//到达时间</span></span><br><span class="line">    <span class="keyword">int</span> start;<span class="comment">//开始处理时间</span></span><br><span class="line">    <span class="keyword">int</span> serve;<span class="comment">//服务时间</span></span><br><span class="line">    <span class="keyword">int</span> turn;<span class="comment">//周转时间</span></span><br><span class="line">    <span class="keyword">double</span> T_turn;<span class="comment">//带权周转时间</span></span><br><span class="line">    <span class="keyword">int</span> finish; <span class="comment">//完成时间</span></span><br><span class="line">&#125;JCB;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(JCB *jcb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入作业的个数"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请按顺序输入每个作业的:进程名 到达时间 服务时间"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;jcb[i].name&gt;&gt;jcb[i].arrive&gt;&gt;jcb[i].serve;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Copy</span><span class="params">(JCB *jcb1,JCB *jcb2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        jcb2[i].name=jcb1[i].name;</span><br><span class="line">        jcb2[i].arrive=jcb1[i].arrive;</span><br><span class="line">        jcb2[i].serve=jcb1[i].serve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(JCB * jcb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程名称 到达时间 服务时间 开始时间 完成时间 周转时间 带权周转时间 "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"   "</span>&lt;&lt;jcb[i].name&lt;&lt;<span class="string">"        "</span>&lt;&lt;jcb[i].arrive&lt;&lt;<span class="string">"       "</span>&lt;&lt;jcb[i].serve&lt;&lt;<span class="string">"        "</span>&lt;&lt;jcb[i].start&lt;&lt;<span class="string">"       "</span>&lt;&lt;jcb[i].finish&lt;&lt;<span class="string">"        "</span>&lt;&lt; jcb[i].turn&lt;&lt;<span class="string">"         "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;jcb[i].T_turn&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"平均周转时间 平均带权周转时间"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"     "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;sum1/n&lt;&lt;<span class="string">"     "</span>&lt;&lt;sum2/n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(JCB a,JCB b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.arrive&lt;b.arrive;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(JCB a,JCB b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.serve&lt;b.serve;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum1=<span class="number">0</span>;</span><br><span class="line">    sum2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        jcb1[i+<span class="number">1</span>].start=jcb1[i].start+jcb1[i].serve;</span><br><span class="line">        jcb1[i].status=<span class="literal">true</span>;</span><br><span class="line">        jcb1[i].turn=jcb1[i].start+jcb1[i].serve-jcb1[i].arrive;</span><br><span class="line">        sum1+=jcb1[i].turn;</span><br><span class="line">        jcb1[i].T_turn=jcb1[i].turn*<span class="number">1.0</span>/jcb1[i].serve;</span><br><span class="line">        sum2+=jcb1[i].T_turn;</span><br><span class="line">        jcb1[i].finish=jcb1[i].start+jcb1[i].serve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCFS</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(jcb1,jcb1+n,cmp1);</span><br><span class="line">    jcb1[<span class="number">0</span>].start=jcb1[<span class="number">0</span>].arrive;</span><br><span class="line">    Run(jcb1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SJF</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(jcb1,jcb1+n,cmp2);</span><br><span class="line">    jcb1[<span class="number">0</span>].start=jcb1[<span class="number">0</span>].arrive;</span><br><span class="line">    Run(jcb1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JCB jcb1[Max],jcb2[Max];</span><br><span class="line">    Init(jcb1);</span><br><span class="line">    Copy(jcb1,jcb2);</span><br><span class="line">    FCFS(jcb1);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                       先来先服务算法                "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print(jcb1);</span><br><span class="line">    SJF(jcb2);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                       短作业优先算法                "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print(jcb2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;os两个作业调度算法&quot;&gt;&lt;a href=&quot;#os两个作业调度算法&quot; class=&quot;headerlink&quot; title=&quot;os两个作业调度算法&quot;&gt;&lt;/a&gt;os两个作业调度算法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.FCFS先来先服务算法&lt;/p&gt;
&lt;p&gt;2.SJF短作业优先算法&lt;/p&gt;
&lt;p&gt;算法描述如下：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的天气爬虫</title>
    <link href="http://yoursite.com/2018/06/13/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%A9%E6%B0%94%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2018/06/13/一个简单的天气爬虫/</id>
    <published>2018-06-13T09:40:44.000Z</published>
    <updated>2018-06-13T09:45:06.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个简单的天气爬虫，可以根据你的输入得到不同城市的天气。快来测试一下吧</p></blockquote><a id="more"></a><blockquote><p>输入：你要查询的城市的名称的拼音（最好是区级以上的地方，不然查不到，哈哈）</p><p>输出：一周的天气详细情况</p></blockquote><blockquote><p>test data1:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input:shijiazhuang</span><br><span class="line">output:</span><br><span class="line">石家庄天气预报一周</span><br><span class="line">今天是:<span class="number">2018</span>年<span class="number">06</span>月<span class="number">13</span>日　星期三　戊戌年四月三十 </span><br><span class="line"><span class="number">06</span>月<span class="number">13</span>日 今天 良 晴 <span class="number">20</span>℃ ~ <span class="number">31</span>℃ 北风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">14</span>日 明天 良 晴 <span class="number">23</span>℃ ~ <span class="number">34</span>℃ 东南风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">15</span>日 后天 良 多云 <span class="number">25</span>℃ ~ <span class="number">36</span>℃ 南风 <span class="number">3</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">16</span>日 星期六 良 阴 <span class="number">23</span>℃ ~ <span class="number">32</span>℃ 南风 <span class="number">3</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">17</span>日 星期日 良 多云 <span class="number">21</span>℃ ~ <span class="number">30</span>℃ 南风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">18</span>日 星期一 轻度污染 阴 <span class="number">19</span>℃ ~ <span class="number">28</span>℃ 西风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">19</span>日 星期二 轻度污染 多云 <span class="number">19</span>℃ ~ <span class="number">32</span>℃ 南风 <span class="number">2</span>级</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Fri Jun  8 17:33:10 2018</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 57815</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">"https://www.tianqi.com/"</span></span><br><span class="line">city=input(<span class="string">"请输入您要查询城市名称的拼音"</span>)</span><br><span class="line">url=url+city+<span class="string">"/7/"</span></span><br><span class="line"><span class="comment">#print(url)</span></span><br><span class="line">response=urllib.request.urlopen(url)</span><br><span class="line">soup=BeautifulSoup(response, <span class="string">'html.parser'</span>, from_encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">Class=soup.find_all(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'weatherbox2'</span>&#125;)</span><br><span class="line">week=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'week'</span>&#125;)</span><br><span class="line">temp=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'temp'</span>&#125;)</span><br><span class="line">txt=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'txt'</span>&#125;)</span><br><span class="line">date=soup.find_all(<span class="string">'dl'</span>,attrs=&#123;<span class="string">'class'</span>:re.compile(<span class="string">"table_day7"</span>)&#125;)</span><br><span class="line">air=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'air'</span>&#125;)</span><br><span class="line">title1=soup.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'tit_img01'</span>&#125;).h1.get_text()</span><br><span class="line">title2=soup.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'tit_img01'</span>&#125;).span.get_text()</span><br><span class="line">L=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">    L.append(i.dl.get_text())</span><br><span class="line">print(title1)</span><br><span class="line">print(<span class="string">"今天是:"</span>+title2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    j=i*<span class="number">2</span></span><br><span class="line">    print(L[i],week[i].get_text(),air[i].get_text(),temp[i].get_text(),txt[j].get_text(),txt[j+<span class="number">1</span>].get_text())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个简单的天气爬虫，可以根据你的输入得到不同城市的天气。快来测试一下吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;爬虫&quot;" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="-python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>OS_ch04</title>
    <link href="http://yoursite.com/2018/05/27/OS/"/>
    <id>http://yoursite.com/2018/05/27/OS/</id>
    <published>2018-05-27T02:40:44.000Z</published>
    <updated>2018-05-28T03:02:20.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章-存储器管理"></a>第四章-存储器管理</h2><h3 id="4-1存储器的层次结构"><a href="#4-1存储器的层次结构" class="headerlink" title="4.1存储器的层次结构"></a>4.1存储器的层次结构</h3><h5 id="·CPU寄存器：寄存器"><a href="#·CPU寄存器：寄存器" class="headerlink" title="·CPU寄存器：寄存器"></a>·CPU寄存器：寄存器</h5><h5 id="·主存：高速缓存（cache），主存，磁盘缓存"><a href="#·主存：高速缓存（cache），主存，磁盘缓存" class="headerlink" title="·主存：高速缓存（cache），主存，磁盘缓存"></a>·主存：高速缓存（cache），主存，磁盘缓存</h5><h5 id="·辅存：磁盘，可移动存储介质"><a href="#·辅存：磁盘，可移动存储介质" class="headerlink" title="·辅存：磁盘，可移动存储介质"></a>·辅存：磁盘，可移动存储介质</h5><a id="more"></a><p>#####主存储器：可执行存储器，是计算机硬件的一个重要组成部件，其作用是存放指令和数据，并能有CPU直接随机存取。</p><p>#####寄存器：访问速度最快，但价格昂贵，容量不大。（具有与处理机相同的速度）</p><h5 id="高速缓存：访问速度快于主存储器。"><a href="#高速缓存：访问速度快于主存储器。" class="headerlink" title="高速缓存：访问速度快于主存储器。"></a>高速缓存：访问速度快于主存储器。</h5><h5 id="磁盘缓存：利用主存中的存储空间（并不是实际的存储器）"><a href="#磁盘缓存：利用主存中的存储空间（并不是实际的存储器）" class="headerlink" title="磁盘缓存：利用主存中的存储空间（并不是实际的存储器）"></a>磁盘缓存：利用主存中的存储空间（并不是实际的存储器）</h5><h5 id="由下到上价格越来越高，相对所配置的存储容量越小"><a href="#由下到上价格越来越高，相对所配置的存储容量越小" class="headerlink" title="由下到上价格越来越高，相对所配置的存储容量越小"></a>由下到上价格越来越高，相对所配置的存储容量越小</h5><h3 id="4-2程序的装入和链接"><a href="#4-2程序的装入和链接" class="headerlink" title="4.2程序的装入和链接"></a>4.2程序的装入和链接</h3><h4 id="4-2-1程序的装入"><a href="#4-2-1程序的装入" class="headerlink" title="4.2.1程序的装入"></a>4.2.1程序的装入</h4><h5 id="用户源程序变为可在内存中执行的程序的步骤："><a href="#用户源程序变为可在内存中执行的程序的步骤：" class="headerlink" title="用户源程序变为可在内存中执行的程序的步骤："></a>用户源程序变为可在内存中执行的程序的步骤：</h5><h5 id="编译：由编译程序将用户的源代码编译后形成的一组目标模块。"><a href="#编译：由编译程序将用户的源代码编译后形成的一组目标模块。" class="headerlink" title="编译：由编译程序将用户的源代码编译后形成的一组目标模块。"></a>编译：由编译程序将用户的源代码编译后形成的一组目标模块。</h5><h5 id="链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块"><a href="#链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块" class="headerlink" title="链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块"></a>链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块</h5><h5 id="装入：由装入程序将装入模块装入内存。"><a href="#装入：由装入程序将装入模块装入内存。" class="headerlink" title="装入：由装入程序将装入模块装入内存。"></a>装入：由装入程序将装入模块装入内存。</h5><h5 id="将一个装入模块装入内存时，有三种方式："><a href="#将一个装入模块装入内存时，有三种方式：" class="headerlink" title="将一个装入模块装入内存时，有三种方式："></a>将一个装入模块装入内存时，有三种方式：</h5><ul><li><h5 id="绝对装入方式"><a href="#绝对装入方式" class="headerlink" title="绝对装入方式"></a>绝对装入方式</h5></li><li><h5 id="可重定位装入方式"><a href="#可重定位装入方式" class="headerlink" title="可重定位装入方式"></a>可重定位装入方式</h5></li><li><h5 id="动态运行时装入方式"><a href="#动态运行时装入方式" class="headerlink" title="动态运行时装入方式"></a>动态运行时装入方式</h5></li></ul><h5 id="一：绝对装入方式"><a href="#一：绝对装入方式" class="headerlink" title="一：绝对装入方式"></a>一：绝对装入方式</h5><h5 id="在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。"><a href="#在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。" class="headerlink" title="在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。"></a>在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。</h5><h5 id="装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。"><a href="#装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。" class="headerlink" title="装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。"></a>装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。</h5><h5 id="适用于单道程序"><a href="#适用于单道程序" class="headerlink" title="适用于单道程序"></a>适用于单道程序</h5><h5 id="二：可重定位装入方式"><a href="#二：可重定位装入方式" class="headerlink" title="二：可重定位装入方式"></a>二：可重定位装入方式</h5><h5 id="在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。"><a href="#在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。" class="headerlink" title="在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。"></a>在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。</h5><h5 id="在装入时对目标程序中指令和数据的修改过程称为重定位-。"><a href="#在装入时对目标程序中指令和数据的修改过程称为重定位-。" class="headerlink" title="在装入时对目标程序中指令和数据的修改过程称为重定位 。"></a>在装入时对目标程序中指令和数据的修改过程称为重定位 。</h5><h5 id="地址变换在装入时一次完成，以后不再改变，称为静态重定位。"><a href="#地址变换在装入时一次完成，以后不再改变，称为静态重定位。" class="headerlink" title="地址变换在装入时一次完成，以后不再改变，称为静态重定位。"></a>地址变换在装入时一次完成，以后不再改变，称为静态重定位。</h5><h5 id="三：动态运行时装入方式"><a href="#三：动态运行时装入方式" class="headerlink" title="三：动态运行时装入方式"></a>三：动态运行时装入方式</h5><h5 id="动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器"><a href="#动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器" class="headerlink" title="动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器"></a>动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器</h5><h4 id="4-2-2程序的链接"><a href="#4-2-2程序的链接" class="headerlink" title="4.2.2程序的链接"></a>4.2.2程序的链接</h4><h5 id="静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。"><a href="#静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。" class="headerlink" title="静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。"></a>静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。</h5><h5 id="装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。"><a href="#装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。" class="headerlink" title="装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。"></a>装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。</h5><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><h5 id="·便于修改和更新"><a href="#·便于修改和更新" class="headerlink" title="·便于修改和更新"></a>·便于修改和更新</h5><h5 id="·便于实现对目标模块的共享"><a href="#·便于实现对目标模块的共享" class="headerlink" title="·便于实现对目标模块的共享"></a>·便于实现对目标模块的共享</h5><h5 id="运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。"><a href="#运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。" class="headerlink" title="运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。"></a>运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。</h5><h3 id="4-3连续分配存储器管理方式"><a href="#4-3连续分配存储器管理方式" class="headerlink" title="4.3连续分配存储器管理方式"></a>4.3连续分配存储器管理方式</h3><h5 id="连续分配方式，是指为一个用户程序分配一个连续的内存空间。"><a href="#连续分配方式，是指为一个用户程序分配一个连续的内存空间。" class="headerlink" title="连续分配方式，是指为一个用户程序分配一个连续的内存空间。"></a>连续分配方式，是指为一个用户程序分配一个连续的内存空间。</h5><p>分类：</p><ul><li><h5 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h5><p>最简单的一种存储管理方式，但只能用于单用户、单任务的操作系统。</p><p>把内存分为系统区和用户区两部分，系统区仅提供给OS使用，通常放在内存低址部分，用户区是指除系统区以外的全部内存空间，提供给用户使用。</p></li><li><h5 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h5><p>将内存用户空间划分为若干个固定大小的区域，在每个分区中只装入一道作业，这样把用户空间划分为几个分区，便允许有几道作业并发执行。当有一空闲分区时，便可以再从外存的后备作业队列中，选择一个适当大小的作业装入该分区，当该作业结束时，可再从后备作业队列中找出另一作业调入该分区 </p><p>两种划分方法：</p><p>·分区大小相等</p><p>·分区大小不等</p></li><li><h5 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h5><p>动态分区分配是根据进程的实际需要，动态地为之分配内存空间。作业装入内存时，把可用内存分出一个连续区域给作业，且分区的大小正好适合作业大小的需要。分区的大小和个数依装入作业的需要而定。 </p><p><strong>空闲分区表</strong>：记录每个空闲分区的情况。每个空闲分区占一个表目。</p><p>​    表目包括：分区序号、分区始址、分区大小</p><p><strong>空闲分区链：</strong>在每个分区的起始部分，设置一些用于控制分区分配的信息，以及用于链接各分区所用的前向指针；在分区尾部则设置一后向指针，在分区末尾重复设置状态位和分区大小表目 </p><p>已占分区说明表</p><p><strong>结构</strong>：作业号；起始地址；大小</p><p>分区分配算法：</p><ol><li><strong>首次适应算法FF</strong></li></ol><p>FF算法要求空闲分区表以地址递增的次序排列。在分配内存时，从表首开始顺序查找，直至找到一个大小能满足要求的空闲分区为止；然后按照作业的大小，从该分区中划出一块内存空间分配给请求者，余下的空闲分区仍留在空闲分区表中。若从头到尾不存在满足要求的分区，则分配失败。 </p><ol start="2"><li><p><strong>循环首次适应算法</strong></p><p>在分配内存空间时，从上次找到的空闲分区的下一个空闲分区开始查找，直到找到一个能满足要求的空闲分区，从中划出一块与请求大小相等的内存空间分配给作业。 </p></li><li><p><strong>最佳适应算法</strong></p></li></ol><p>按照容量由大到小排序形成一个空闲分区链</p></li></ul><ul><li><h5 id="可重定位分区分配"><a href="#可重定位分区分配" class="headerlink" title="可重定位分区分配"></a>可重定位分区分配</h5><p>在连续分配方式中，必须把系统或用户程序装入一连续的内存空间。如果在统统中只有若干个小分区，即使它们的容量总和大于要装入的程序，但由于这些分区不相邻，所以无法将程序装入内存。</p><p>将内存中的所有作业进行移动，使它们全部邻接，这样可把原来分散的小分区拼接成大分区，这种方法称为“拼接”或“紧凑”。</p><p>在动态运行时装入的方式时，将相对地址转换为物理地址的工作在程序指令真正要执行时才进行。地址转换需要重定位寄存器的支持。程序执行时访问的内存地址是相对地址与重定位寄存器中的地址相加而成。 </p><h3 id="4-4-对换"><a href="#4-4-对换" class="headerlink" title="4.4 对换"></a>4.4 对换</h3></li></ul><h5 id="多道程序环境下存在的问题-（引入）"><a href="#多道程序环境下存在的问题-（引入）" class="headerlink" title="多道程序环境下存在的问题:（引入）"></a>多道程序环境下存在的问题:（引入）</h5><ul><li><h5 id="阻塞进程占据大量内存空间"><a href="#阻塞进程占据大量内存空间" class="headerlink" title="阻塞进程占据大量内存空间"></a>阻塞进程占据大量内存空间</h5></li><li><h5 id="许多作业在外存而不能进入内存"><a href="#许多作业在外存而不能进入内存" class="headerlink" title="许多作业在外存而不能进入内存"></a>许多作业在外存而不能进入内存</h5><h5 id="·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。"><a href="#·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。" class="headerlink" title="·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。"></a>·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。</h5><h5 id="对换的分类："><a href="#对换的分类：" class="headerlink" title="对换的分类："></a>对换的分类：</h5><h5 id="·整体对换（或进程对换）以整个进程为单位"><a href="#·整体对换（或进程对换）以整个进程为单位" class="headerlink" title="·整体对换（或进程对换）以整个进程为单位"></a>·整体对换（或进程对换）以整个进程为单位</h5><h5 id="·页面对换：以页或段为单位"><a href="#·页面对换：以页或段为单位" class="headerlink" title="·页面对换：以页或段为单位"></a>·页面对换：以页或段为单位</h5><h5 id="对换空间的管理："><a href="#对换空间的管理：" class="headerlink" title="对换空间的管理："></a>对换空间的管理：</h5><h5 id="·一般从磁盘上划出一块空间作为对换区使用"><a href="#·一般从磁盘上划出一块空间作为对换区使用" class="headerlink" title="·一般从磁盘上划出一块空间作为对换区使用"></a>·一般从磁盘上划出一块空间作为对换区使用</h5></li></ul><h4 id="进程的换出与换入"><a href="#进程的换出与换入" class="headerlink" title="进程的换出与换入"></a>进程的换出与换入</h4><h5 id="进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。"><a href="#进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。" class="headerlink" title="进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。"></a>进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。</h5><h5 id="进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。"><a href="#进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。" class="headerlink" title="进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。"></a>进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。</h5><h3 id="4-5分页存储管理方式"><a href="#4-5分页存储管理方式" class="headerlink" title="4.5分页存储管理方式"></a>4.5分页存储管理方式</h3><h5 id="连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。"><a href="#连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。" class="headerlink" title="连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。"></a>连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。</h5><p>  分类：</p><ul><li><h5 id="分页存储管理方式：离散分配的基本单位是页。"><a href="#分页存储管理方式：离散分配的基本单位是页。" class="headerlink" title="分页存储管理方式：离散分配的基本单位是页。"></a>分页存储管理方式：离散分配的基本单位是页。</h5></li><li><h5 id="分段存储管理方式：离散分配的基本单位是段"><a href="#分段存储管理方式：离散分配的基本单位是段" class="headerlink" title="分段存储管理方式：离散分配的基本单位是段"></a>分段存储管理方式：离散分配的基本单位是段</h5><h4 id="4-5-1-页面与页表"><a href="#4-5-1-页面与页表" class="headerlink" title="4.5.1 页面与页表"></a>4.5.1 页面与页表</h4><h5 id="分页式存储管理的原理"><a href="#分页式存储管理的原理" class="headerlink" title="分页式存储管理的原理"></a>分页式存储管理的原理</h5><p>​    ·分页存储管理是将一个进程的逻辑地址空间分成若干个大小相等的片称为页面或页，并为各页加以编号，从0开始</p><p>​    ·内存空间分成与页面相同大小的若干个存储块，称为块或页框。</p><p>​        ·在为进程分配内存时，以块为单位将进程的若干个页分别装入到多个可以不相邻的物理块中。</p><p>​    ·进程的最后一页经常装不满而形成“页内碎片”。</p><h5 id="基本分页式存储管理的原理"><a href="#基本分页式存储管理的原理" class="headerlink" title="基本分页式存储管理的原理"></a>基本分页式存储管理的原理</h5><p>​    系统若能满足一个作业要求的全部块数，此作业才能被装入内存，否则不为它分配任何内存。</p><h5 id="请求分页式存储管理的原理"><a href="#请求分页式存储管理的原理" class="headerlink" title="请求分页式存储管理的原理"></a>请求分页式存储管理的原理</h5><p>​    运行一个作业时，并不要把该作业的全部程序和数据都装入内存，可以只把目前要执行的几页调入内存的空闲块中，其余的仍保存在外存中，以后根据作业运的需要再调入内存。</p><h5 id="地址结构："><a href="#地址结构：" class="headerlink" title="地址结构："></a>地址结构：</h5><p>地址长度：0-11位为页内地址（偏移量），12-31位为页号，地址空间最多允许有1M页。</p><h4 id="4-5-2地址变换机构"><a href="#4-5-2地址变换机构" class="headerlink" title="4.5.2地址变换机构"></a>4.5.2地址变换机构</h4><h5 id="基本的地址变换机构"><a href="#基本的地址变换机构" class="headerlink" title="基本的地址变换机构"></a>基本的地址变换机构</h5><p>在系统中只设置一个页表寄存器PTR，在其中存放页表在内存中的始址和页表的长度。</p><h5 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h5><p>CPU在每存取一个数据时，需要两次访问内存：</p><p>·第一次：访问页表，找到指定页的物理块号，将块号与页内偏移量拼接形成物理地址。</p><p>·第二次：从第一次所得地址中获得所需数据，或向此地址中写入数据。</p><p>·解决方法：在地址变换机构中，增设一个具有并行查寻能力的特殊高速缓冲寄存器，称为“联想存储器”或“快表”。</p><h5 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h5><p>​    将页表分页，并离散地将各个页面分别存放在不同的物理块中，同时为离散分配的页表在建立一张页表，称为外层页表，其每个页表项记录了页表页面的物理块号。 </p></li></ul><h3 id="4-6-1分段存储管理方式的引入"><a href="#4-6-1分段存储管理方式的引入" class="headerlink" title="4.6.1分段存储管理方式的引入"></a>4.6.1分段存储管理方式的引入</h3><ol><li><h5 id="便于编程"><a href="#便于编程" class="headerlink" title="便于编程"></a>便于编程</h5></li><li><h5 id="分段共享"><a href="#分段共享" class="headerlink" title="分段共享"></a>分段共享</h5></li><li><h5 id="分段保护"><a href="#分段保护" class="headerlink" title="分段保护"></a>分段保护</h5></li><li><h5 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h5></li><li><h5 id="动态增长"><a href="#动态增长" class="headerlink" title="动态增长"></a>动态增长</h5></li></ol><h5 id="段表结构：段号、段在内存中的起始地址、段长"><a href="#段表结构：段号、段在内存中的起始地址、段长" class="headerlink" title="段表结构：段号、段在内存中的起始地址、段长"></a>段表结构：段号、段在内存中的起始地址、段长</h5><h5 id="作业表：作业号，段首地址，段表长度"><a href="#作业表：作业号，段首地址，段表长度" class="headerlink" title="作业表：作业号，段首地址，段表长度"></a>作业表：作业号，段首地址，段表长度</h5><h5 id="分页和分段的主要区别："><a href="#分页和分段的主要区别：" class="headerlink" title="分页和分段的主要区别："></a>分页和分段的主要区别：</h5><h5 id="相似点：采用离散分配方式，通过地址映射机构实现地址变换。"><a href="#相似点：采用离散分配方式，通过地址映射机构实现地址变换。" class="headerlink" title="相似点：采用离散分配方式，通过地址映射机构实现地址变换。"></a>相似点：采用离散分配方式，通过地址映射机构实现地址变换。</h5><h5 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h5><h5 id="·页是信息的物理单位，分页式为了满足系统的需要；"><a href="#·页是信息的物理单位，分页式为了满足系统的需要；" class="headerlink" title="·页是信息的物理单位，分页式为了满足系统的需要；"></a>·页是信息的物理单位，分页式为了满足系统的需要；</h5><h5 id="段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要"><a href="#段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要" class="headerlink" title="段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要"></a>段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要</h5><h5 id="·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；"><a href="#·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；" class="headerlink" title="·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；"></a>·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；</h5><h5 id="段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。"><a href="#段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。" class="headerlink" title="段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。"></a>段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。</h5><h5 id="·分页的作业地址空间是一维的，分段的作业地址空间是二维的"><a href="#·分页的作业地址空间是一维的，分段的作业地址空间是二维的" class="headerlink" title="·分页的作业地址空间是一维的，分段的作业地址空间是二维的"></a>·分页的作业地址空间是一维的，分段的作业地址空间是二维的</h5><h3 id="4-6-3信息共享"><a href="#4-6-3信息共享" class="headerlink" title="4.6.3信息共享"></a>4.6.3信息共享</h3><h5 id="可重入代码-Reentrant-Code"><a href="#可重入代码-Reentrant-Code" class="headerlink" title="可重入代码(Reentrant Code):"></a>可重入代码(Reentrant Code):</h5><h5 id="又称为“纯代码”-Pure-Code-在实现段共享时，需要用到可重入代码-Reentrant-Code-。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。"><a href="#又称为“纯代码”-Pure-Code-在实现段共享时，需要用到可重入代码-Reentrant-Code-。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。" class="headerlink" title="又称为“纯代码”(Pure Code),在实现段共享时，需要用到可重入代码(Reentrant Code) 。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。"></a>又称为“纯代码”(Pure Code),在实现段共享时，需要用到可重入代码(Reentrant Code) 。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。</h5><h5 id="在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区-属于该进程私有-中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。"><a href="#在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区-属于该进程私有-中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。" class="headerlink" title="在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区(属于该进程私有)中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。"></a>在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区(属于该进程私有)中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。</h5><h3 id="4-6-4段页式存储管理方式"><a href="#4-6-4段页式存储管理方式" class="headerlink" title="4.6.4段页式存储管理方式"></a>4.6.4段页式存储管理方式</h3><h5 id="基本原理：-先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。"><a href="#基本原理：-先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。" class="headerlink" title="基本原理： 先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。"></a>基本原理： 先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。</h5><h5 id="基本段页式存储管理：把作业的所有段装入内存方可运行。"><a href="#基本段页式存储管理：把作业的所有段装入内存方可运行。" class="headerlink" title="基本段页式存储管理：把作业的所有段装入内存方可运行。"></a>基本段页式存储管理：把作业的所有段装入内存方可运行。</h5><h5 id="请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。"><a href="#请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。" class="headerlink" title="请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。"></a>请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。</h5><h5 id="地址结构：段号；段内页号；页内地址"><a href="#地址结构：段号；段内页号；页内地址" class="headerlink" title="地址结构：段号；段内页号；页内地址"></a>地址结构：段号；段内页号；页内地址</h5><h5 id="段表：段号，页表长度，页表基址"><a href="#段表：段号，页表长度，页表基址" class="headerlink" title="段表：段号，页表长度，页表基址"></a>段表：段号，页表长度，页表基址</h5><h5 id="在段页式系统中，为了获得一条指令或数据，需访问三次内存："><a href="#在段页式系统中，为了获得一条指令或数据，需访问三次内存：" class="headerlink" title="在段页式系统中，为了获得一条指令或数据，需访问三次内存："></a>在段页式系统中，为了获得一条指令或数据，需访问三次内存：</h5><h5 id="·第一次：访问内存中的段表，取得页表始址"><a href="#·第一次：访问内存中的段表，取得页表始址" class="headerlink" title="·第一次：访问内存中的段表，取得页表始址"></a>·第一次：访问内存中的段表，取得页表始址</h5><h5 id="·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址"><a href="#·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址" class="headerlink" title="·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址"></a>·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址</h5><h5 id="·第三次：访问第二次所得的地址，取出指令或数据"><a href="#·第三次：访问第二次所得的地址，取出指令或数据" class="headerlink" title="·第三次：访问第二次所得的地址，取出指令或数据"></a>·第三次：访问第二次所得的地址，取出指令或数据</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第四章-存储器管理&quot;&gt;&lt;a href=&quot;#第四章-存储器管理&quot; class=&quot;headerlink&quot; title=&quot;第四章-存储器管理&quot;&gt;&lt;/a&gt;第四章-存储器管理&lt;/h2&gt;&lt;h3 id=&quot;4-1存储器的层次结构&quot;&gt;&lt;a href=&quot;#4-1存储器的层次结构&quot; class=&quot;headerlink&quot; title=&quot;4.1存储器的层次结构&quot;&gt;&lt;/a&gt;4.1存储器的层次结构&lt;/h3&gt;&lt;h5 id=&quot;·CPU寄存器：寄存器&quot;&gt;&lt;a href=&quot;#·CPU寄存器：寄存器&quot; class=&quot;headerlink&quot; title=&quot;·CPU寄存器：寄存器&quot;&gt;&lt;/a&gt;·CPU寄存器：寄存器&lt;/h5&gt;&lt;h5 id=&quot;·主存：高速缓存（cache），主存，磁盘缓存&quot;&gt;&lt;a href=&quot;#·主存：高速缓存（cache），主存，磁盘缓存&quot; class=&quot;headerlink&quot; title=&quot;·主存：高速缓存（cache），主存，磁盘缓存&quot;&gt;&lt;/a&gt;·主存：高速缓存（cache），主存，磁盘缓存&lt;/h5&gt;&lt;h5 id=&quot;·辅存：磁盘，可移动存储介质&quot;&gt;&lt;a href=&quot;#·辅存：磁盘，可移动存储介质&quot; class=&quot;headerlink&quot; title=&quot;·辅存：磁盘，可移动存储介质&quot;&gt;&lt;/a&gt;·辅存：磁盘，可移动存储介质&lt;/h5&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-os" scheme="http://yoursite.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/22/hello-world/"/>
    <id>http://yoursite.com/2018/05/22/hello-world/</id>
    <published>2018-05-22T13:18:07.558Z</published>
    <updated>2018-05-22T13:18:07.559Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
