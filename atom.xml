<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang_1998&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-24T12:23:35.623Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yangzixu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DB_2</title>
    <link href="http://yoursite.com/2018/06/24/DB_2/"/>
    <id>http://yoursite.com/2018/06/24/DB_2/</id>
    <published>2018-06-24T12:21:44.000Z</published>
    <updated>2018-06-24T12:23:35.623Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h3><a id="more"></a><p>第一节 关系数据结构及形式化定义</p><ul><li>关系<ul><li>域：一组具有相同数据类型的值的集合<ul><li>整数</li><li>实数</li><li>…</li></ul></li><li>笛卡尔积：域上的一种集合运算<ul><li>给定一组域D1、D2、…Dn，允许其中某些域是相同的</li><li>D1、D2，，，Dn的笛卡尔积为：</li><li>D 1×D2×…×Dn ＝ ｛（d1， d2， …， dn）｜di ∈ Di， i＝1， 2， …， n｝ </li><li>所有域的所有取值的一个组合  </li><li>元素(d1， d2， …， dn)叫作一个n元组  </li><li>元素中的每一个值di叫做一个分量    </li><li>一个域允许的不同取值个数称为这个域的基数   (笛卡尔积基数表示方法每一个域的取值个数的乘积)</li></ul></li><li>关系<ul><li>D 1×D2×…×Dn的子集叫作在域D1， D2， …， Dn上的关 系，表示为    </li><li>R：关系名  R（D1， D2， …， Dn）    </li><li>n：关系的目或度（Degree）</li></ul></li></ul></li><li>三类关系<ul><li>基本关系<ul><li>实际存在的表，是实际存储逻辑表示</li></ul></li><li>查询表<ul><li>查询结果对应的表</li></ul></li><li>视图表<ul><li>由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据</li></ul></li></ul></li><li>基本关系的性质<ul><li>列是同质的</li><li>不同的列可出自同一个域<ul><li>其中的每一列称为一个属性</li><li>不同的属性要给与不同的属性名</li></ul></li><li>列的顺序无所谓，列的次序可以任意交换</li><li>任意两个元组的候选码不能相同</li><li>行的顺序无所谓，行的次序可以任意交换</li><li>分量必须去原子值</li></ul></li></ul><p>关系模式</p><ul><li>关系模式对应表头。</li><li>关系模式是对关系的描述，是静态的，稳定的</li><li>关系是关系模式在某一时刻的状态或内容，是动态的、随时间不断变化的</li><li>关系模式和关系往往统称为关系。</li></ul><p>关系模式可以形式化地表示为：</p><p>R（U,D,DOM,F)</p><p>R  关系名</p><p>U 组成该关系的属性名集合</p><p>D 属性U中属性所来自的域</p><p>DOM 属性向域的映像集合</p><p>F 属性间的数据依赖关系</p><p>简记为</p><p>R (U)    </p><p><strong>选择、投影、并、差、笛卡尔积</strong>是5种基本操作</p><p>关系操作的特点</p><ul><li>集合操作方式：操作对象和结果都是集合，一次一集合的方式。</li></ul><p>关系的完整性</p><ul><li>实体完整性<ul><li>若属性A是基本关系R的主属性，则A不能取空值</li></ul></li><li>参照完整性<ul><li>关系间的引用</li><li>外码</li><li>参照完整性规则<ul><li>F是R的外码，F是S的主码，F在R上的取值<ul><li>空</li><li>等于S中某个元组主码值</li></ul></li></ul></li></ul></li><li>用户定义完整性:针对某一具体关系数据库的约束条件， 反映某一具体 应用所涉及的数据必须满足的语义要求    <ul><li>例：课程(课程号， 课程名， 学分) <ul><li>“课程号”属性必须取唯一值 </li><li>非主属性“课程名” 也不能取空值 </li><li>“学分”属性只能取值{1， 2， 3， 4}    </li></ul></li></ul></li></ul><p>关系代数</p><p><strong>传统集合运算：并 差 交 笛卡尔积</strong></p><ul><li>并 ∪<ul><li>R和S  具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域    </li></ul></li><li>差 -<ul><li>R和S  具有相同的目n </li><li>相应的属性取自同一个域    </li></ul></li><li>交 ∩<ul><li>R和S 具有相同的目n </li><li>相应的属性取自同一个域    </li></ul></li><li><p>笛卡尔积 X</p><ul><li>R: n目关系， k1个元组    </li><li>S: m目关系， k2个元组    </li><li>R×S </li><li>列： （n+m） 列元组的集合 – 元组的前n列是关系R的一个元组 – 后m列是关系S的一个元组 </li><li>行： k1×k2个元组 –  R×S = {tr ts |tr∈ R ∧ ts∈S }    </li></ul><p><strong>专门的集合运算：选择，投影，连接，除</strong></p></li><li><p>选择</p><ul><li>选择满足条件的元组，行</li><li>σ Sdept = ‘IS’ (Student)    </li></ul></li><li>投影<ul><li>选择满足条件的属性，列</li><li>π Sname， Sdept(Student)    </li></ul></li><li>连接<ul><li>等值连接<ul><li>什么是等值连接 θ为“＝” 的连接运算称为等值连接    </li><li>从关系R与S的广义笛卡尔积中选取A、 B属性值 相等的那些元组    </li></ul></li><li>自然连接<ul><li>自然连接是一种特殊的等值连接<ul><li>两个关系中进行比较的分量必须是相同的属性组    </li><li>结果中把重复的属性列去掉</li></ul></li></ul></li><li><img src="https://i.loli.net/2018/06/24/5b2f8b4cb35f9.png" alt="1529752265854"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8bbe24d3c.png" alt="1529752575346"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8bee1eeac.png" alt="1529752582903"></li><li></li></ul></li><li>除<ul><li>给定关系R(X,Y)，S(Y,Z).R与S相除得到一个新的关系P(X)</li><li>P是R中满足下列条件的元组<ul><li>元组在X上分量值x的象集包含S在Y上投影的集合</li></ul></li><li><img src="https://i.loli.net/2018/06/24/5b2f8c06aeba6.png" alt="1529762224828"></li><li></li><li><img src="https://i.loli.net/2018/06/24/5b2f8c1ec90c3.png" alt="1529762230493"></li><li></li></ul></li></ul><p><strong>关系代数运算：并、差、交、笛卡尔积、投影、选择、连接、除</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第二章-关系数据库&quot;&gt;&lt;a href=&quot;#第二章-关系数据库&quot; class=&quot;headerlink&quot; title=&quot;第二章 关系数据库&quot;&gt;&lt;/a&gt;第二章 关系数据库&lt;/h3&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>DB_1</title>
    <link href="http://yoursite.com/2018/06/20/DB_1/"/>
    <id>http://yoursite.com/2018/06/20/DB_1/</id>
    <published>2018-06-20T10:05:44.000Z</published>
    <updated>2018-06-24T12:25:01.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章绪论"><a href="#第一章绪论" class="headerlink" title="第一章绪论"></a>第一章绪论</h2><a id="more"></a><h3 id="第一节-数据库系统概述"><a href="#第一节-数据库系统概述" class="headerlink" title="第一节 数据库系统概述"></a>第一节 数据库系统概述</h3><p><strong>数据库的地位</strong>：数据库技术是<strong>信息系统</strong>的核心和基础，它的出现极大促进了计算机应用向各行各业的渗透。</p><p><strong>数据（Data）的定义：</strong>数据是<strong>数据库中存储的基本对象，</strong>描述事物的符号记录称为数据</p><p>数据的种类：文字、图像、图形、声音</p><p>数据的特点：数据与其语义是不可分的</p><p><strong>数据的形式不能完全表达其内容</strong></p><p><strong>数据库（Database)的定义</strong>：数据库是长期存储在计算机内、有组织、可共享的大量数据的集合。</p><p><strong>数据库的基本特征</strong>：</p><ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ul><p><strong>数据库管理系统（DataBase Management System DBMS）</strong>：数据库管理系统和操作系统一样是计算机的基础软件。</p><p>   功能：</p><ul><li>数据的定义功能<ul><li>提供数据定义语言（DDL）</li><li>定义数据库中的数据对象</li></ul></li><li>数据组织、存储和管理</li><li>数据操纵功能<ul><li>提供数据操纵语言（DML）</li><li>实现对数据库的基本操作（查询、插入、删除和修改）</li></ul></li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li><li>其他功能</li></ul><p><strong>数据库系统（Database System，DBS）</strong>：数据库系统是由<strong>数据库</strong>、<strong>数据管理系统</strong>、<strong>应用程序</strong>和<strong>数据库管理员(DBA)</strong>组织的<strong>存储、管理、处理和维护</strong>数据的系统</p><p><strong>数据管理</strong>：对数据进行分类、组织、编码、存储、检索和维护，是数据处理的中心问题</p><p><strong>数据管理技术的发展</strong>：</p><table><thead><tr><th></th><th>人工管理阶段</th><th>文件系统阶段</th><th>数据库系统阶段</th></tr></thead><tbody><tr><td>*管理者</td><td>用户，数据不保存</td><td>文件系统，数据可长期保存</td><td></td></tr><tr><td>*面向的对象</td><td>应用程序</td><td>应用程序</td><td>全组织</td></tr><tr><td>*共享程度</td><td>无共享冗余度极大</td><td>共享性差，冗余度大</td><td>高</td></tr><tr><td>*独立性</td><td>不独立，完全依赖程序</td><td>记录内有结构，整体无结构</td><td>高</td></tr><tr><td>*结构化</td><td>无结构</td><td>独立性差，数据的逻辑结构改变必须修改应用程序</td><td>整体结构化</td></tr><tr><td>*控制能力</td><td>应用程序控制</td><td>应用程序控制</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>数据库系统的特点：</p><ul><li>数据结构化<ul><li>整体数据结构化是数据库主要特征之一，也是数据库系统和文件系统的本质区别</li><li>数据的结构用<strong>数据模型</strong>描述，无程序的定义和解释</li><li>数据可以<strong>变长</strong></li><li>数据的最小存取单位是<strong>数据项</strong></li></ul></li><li>数据的共享性高、冗余度低且易扩充</li><li>数据独立性高<ul><li>物理独立性<ul><li>用户的应用程序与存储在磁盘上的数据库中的数据时相互独立的。当数据的物理存储改变了，应用程序不用改变。</li></ul></li><li>逻辑独立性<ul><li>应用程序与数据的逻辑结构是相互独立的，数的逻辑结构变了，用户程序也可以不变。</li></ul></li><li>数据的独立性是由DBMS的<strong>二级映像</strong>功能来保证的。</li></ul></li><li>数据由数据库管理系统统一管理和控制<ul><li>数据的安全性保护</li><li>数据的完整性检查</li><li>并发控制</li><li>数据库恢复     </li></ul></li></ul><p>数据模型：</p><ul><li>数据模型是对现实世界的抽象</li><li><strong>数据模型是数据库系统的核心和基础</strong></li></ul><p>数据模型分为两类</p><ul><li>概念模型：也称信息模型，按照用户的观点来对数据和信息建模，用于数据库的设计</li><li>逻辑模型和物理模型<ul><li>逻辑模型：主要包括网状模型、层次模型、关系模型、面向对象模型等。</li><li>物理模型：对数据的最底层的抽象，描述数据在系统内部的表示方式和存取方法。</li></ul></li></ul><p><img src="https://i.loli.net/2018/06/24/5b2f8d5e2cf7f.png" alt="1529416450682"></p><p>数据模型的三个组成要素：</p><ul><li>数据结构<ul><li>描述数据库的组成对象，以及对象之间的关系</li><li>对系统静态特性的描述</li><li>非关系模型<ul><li>层次模型</li><li>网状模型</li></ul></li><li>关系模型<ul><li>数据结构：关系</li></ul></li><li>面向对象模型<ul><li>数据结构：对象</li></ul></li></ul></li><li>数据操作<ul><li>对数据库中各种对象(型)的实例(值)允许执行的操作及有 关的操作规则    </li><li>查询。更新（插入，删除，修改）</li><li>数据操作是对系统动态特性的描述。    </li></ul></li><li>数据的完整性约束条件：数据的完整性约束条件是一组完整性规则。</li></ul><p>关系模型：每个关系的数据结构是一张规范化的二维表</p><p>关系模型的概念：</p><ul><li>关系：一个关系就是一张表</li><li>关系名：表名</li><li>关系模式：表头</li><li>元组：表中的一行是一个元组</li><li>属性：表中一列是一个属性，给每一个属性起一个名称即 属性名    </li><li>码：唯一确定一个元组的属性或者属性组</li><li>域：是一组具有相同数据类型的值的集合</li><li>分量：元组中的一个属性值</li></ul><p>关系模式必须是规范化的，关系的每一个分量都必须是一个不可分的数据项</p><p><strong>不允许表中有表</strong></p><p><img src="https://i.loli.net/2018/06/24/5b2f8d7374fda.png" alt="1529484361751"></p><p>数据操作是集合的操作，操作对象和操作结果都是关系，即元组的集合    (查询，插入，删除，更新)</p><p>关系的完整性约束条件：</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户自定义完整性</li></ul><p>数据库系统结构</p><ul><li>型：对某一类数据的结构和属性的说明</li><li>值：是型的具体赋值</li><li>学生记录型：(学号，姓名，性别，系别，年龄，籍贯)<ul><li>记录值(201315130，李明，男，计算机，19，江苏)</li></ul></li></ul><p>模式：模式是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型的描述，不涉及具体的值。模式的一个具体值称为模式的一个实例。</p><p><strong>一个数据库只有一个模式</strong></p><p><strong>模式是数据库系统模式结构的中间层</strong>    </p><p><strong>模式是相对稳定的</strong>，<strong>而实例是相对变动的</strong>。</p><p>数据库系统的三级模式结构</p><ul><li>模式</li><li>外模式</li><li>内模式</li></ul><p><img src="https://i.loli.net/2018/06/24/5b2f8d8991584.png" alt="1529485835773"></p><p>模式的定义</p><ul><li>数据的逻辑结构(数据项的名字、类型、取值范围)</li><li>数据之间的联系</li><li>数据有关的安全性、完整性要求</li></ul><p>外模式</p><ul><li>数据库用户使用的<strong>局部数据</strong>的逻辑结构和特征的描述</li><li>外模式通常是模式的子集。</li><li>同一外模式可以为某一用户的多个应用系统使用。但是一个应用程序只能使用一个外模式。</li></ul><p>内模式</p><ul><li>内模式也称存储模式，<strong>一个数据库只有一个内模式。</strong></li><li>他是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</li></ul><p>二级映像</p><ul><li>外模式/模式 映像<ul><li>对于每一个外模式，数据库系统中都一个外模式/模式映像，它定义了该外模式与模式之间的对应关系。</li><li>当模式改变时，由于数据库管理员对各个外模式/模式的映像作出改变，可以使外模式保持不变</li><li>应用程序是依赖数据的外模式编写的，应用程序不必改变。</li><li>保证的<strong>数据的逻辑独立性</strong></li></ul></li><li>模式/内模式映像<ul><li>当数据库的存储结构改变时，由数据库管理员对模式/内模式映像作相应改变，<br>可以使模式保持不变，从而应用程序也不必改变，</li><li>保证了数据与程序的<strong>物理独立性</strong></li><li>模式/内模式映像是唯一的</li></ul></li></ul><p>数据库系统的组成</p><ul><li>硬件平台及数据库</li><li>软件</li><li>人员</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章绪论&quot;&gt;&lt;a href=&quot;#第一章绪论&quot; class=&quot;headerlink&quot; title=&quot;第一章绪论&quot;&gt;&lt;/a&gt;第一章绪论&lt;/h2&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>os两个作业调度算法</title>
    <link href="http://yoursite.com/2018/06/15/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/15/作业调度算法/</id>
    <published>2018-06-15T13:40:44.000Z</published>
    <updated>2018-06-15T13:42:33.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="os两个作业调度算法"><a href="#os两个作业调度算法" class="headerlink" title="os两个作业调度算法"></a>os两个作业调度算法</h3><blockquote><p>1.FCFS先来先服务算法</p><p>2.SJF短作业优先算法</p><p>算法描述如下：</p></blockquote><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">author：杨子旭</span></span><br><span class="line"><span class="comment">class：16-5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name; <span class="comment">//进程名</span></span><br><span class="line">    <span class="keyword">bool</span> status;<span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">int</span> arrive;<span class="comment">//到达时间</span></span><br><span class="line">    <span class="keyword">int</span> start;<span class="comment">//开始处理时间</span></span><br><span class="line">    <span class="keyword">int</span> serve;<span class="comment">//服务时间</span></span><br><span class="line">    <span class="keyword">int</span> turn;<span class="comment">//周转时间</span></span><br><span class="line">    <span class="keyword">double</span> T_turn;<span class="comment">//带权周转时间</span></span><br><span class="line">    <span class="keyword">int</span> finish; <span class="comment">//完成时间</span></span><br><span class="line">&#125;JCB;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(JCB *jcb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入作业的个数"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请按顺序输入每个作业的:进程名 到达时间 服务时间"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;jcb[i].name&gt;&gt;jcb[i].arrive&gt;&gt;jcb[i].serve;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Copy</span><span class="params">(JCB *jcb1,JCB *jcb2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        jcb2[i].name=jcb1[i].name;</span><br><span class="line">        jcb2[i].arrive=jcb1[i].arrive;</span><br><span class="line">        jcb2[i].serve=jcb1[i].serve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(JCB * jcb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程名称 到达时间 服务时间 开始时间 完成时间 周转时间 带权周转时间 "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"   "</span>&lt;&lt;jcb[i].name&lt;&lt;<span class="string">"        "</span>&lt;&lt;jcb[i].arrive&lt;&lt;<span class="string">"       "</span>&lt;&lt;jcb[i].serve&lt;&lt;<span class="string">"        "</span>&lt;&lt;jcb[i].start&lt;&lt;<span class="string">"       "</span>&lt;&lt;jcb[i].finish&lt;&lt;<span class="string">"        "</span>&lt;&lt; jcb[i].turn&lt;&lt;<span class="string">"         "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;jcb[i].T_turn&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"平均周转时间 平均带权周转时间"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"     "</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;sum1/n&lt;&lt;<span class="string">"     "</span>&lt;&lt;sum2/n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(JCB a,JCB b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.arrive&lt;b.arrive;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(JCB a,JCB b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.serve&lt;b.serve;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum1=<span class="number">0</span>;</span><br><span class="line">    sum2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        jcb1[i+<span class="number">1</span>].start=jcb1[i].start+jcb1[i].serve;</span><br><span class="line">        jcb1[i].status=<span class="literal">true</span>;</span><br><span class="line">        jcb1[i].turn=jcb1[i].start+jcb1[i].serve-jcb1[i].arrive;</span><br><span class="line">        sum1+=jcb1[i].turn;</span><br><span class="line">        jcb1[i].T_turn=jcb1[i].turn*<span class="number">1.0</span>/jcb1[i].serve;</span><br><span class="line">        sum2+=jcb1[i].T_turn;</span><br><span class="line">        jcb1[i].finish=jcb1[i].start+jcb1[i].serve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCFS</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(jcb1,jcb1+n,cmp1);</span><br><span class="line">    jcb1[<span class="number">0</span>].start=jcb1[<span class="number">0</span>].arrive;</span><br><span class="line">    Run(jcb1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SJF</span><span class="params">(JCB * jcb1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(jcb1,jcb1+n,cmp2);</span><br><span class="line">    jcb1[<span class="number">0</span>].start=jcb1[<span class="number">0</span>].arrive;</span><br><span class="line">    Run(jcb1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JCB jcb1[Max],jcb2[Max];</span><br><span class="line">    Init(jcb1);</span><br><span class="line">    Copy(jcb1,jcb2);</span><br><span class="line">    FCFS(jcb1);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                       先来先服务算法                "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print(jcb1);</span><br><span class="line">    SJF(jcb2);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                       短作业优先算法                "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print(jcb2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;os两个作业调度算法&quot;&gt;&lt;a href=&quot;#os两个作业调度算法&quot; class=&quot;headerlink&quot; title=&quot;os两个作业调度算法&quot;&gt;&lt;/a&gt;os两个作业调度算法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.FCFS先来先服务算法&lt;/p&gt;
&lt;p&gt;2.SJF短作业优先算法&lt;/p&gt;
&lt;p&gt;算法描述如下：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>动态内存管理-BF算法</title>
    <link href="http://yoursite.com/2018/06/15/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-BF%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/15/动态内存管理-BF算法/</id>
    <published>2018-06-15T13:40:44.000Z</published>
    <updated>2018-06-19T09:44:33.955Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最佳适应算法Best-fit算法</p></blockquote><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 10 <span class="comment">//假定系统允许的最大作业为10</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m 10 <span class="comment">//假定系统允许的空闲区表最大为10</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> minisize 100</span></span><br><span class="line"><span class="built_in">string</span> str[<span class="number">6</span>] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"--------------------------------------------------"</span>,</span><br><span class="line"><span class="string">"-           Author:杨子旭                        -"</span>,</span><br><span class="line"><span class="string">"-          Choose_your_operation:                -"</span>,</span><br><span class="line"><span class="string">"- 0-退出,1-分配内存,2-回收内存,3-显示内存,4-清屏 -"</span>,</span><br><span class="line"><span class="string">"-                                                -"</span>,</span><br><span class="line"><span class="string">"--------------------------------------------------"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll address; <span class="comment">/*已分分区起始地址*/</span></span><br><span class="line">ll len; <span class="comment">/*已分分区长度，单位为字节*/</span></span><br><span class="line"><span class="keyword">int</span> flag; <span class="comment">/*已分配区表登记栏标志，用"0"表示空栏目*/</span></span><br><span class="line">&#125;used;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll address; <span class="comment">//空闲区起始地址</span></span><br><span class="line">ll len; <span class="comment">//空闲区长度，单位为字节</span></span><br><span class="line"><span class="keyword">int</span> flag; <span class="comment">//空闲区表登记栏标志，用"0"表示空栏目，用"1"表示未分配</span></span><br><span class="line">&#125;Free;</span><br><span class="line">Free FL[n];</span><br><span class="line">used UL[n];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BF</span><span class="params">(<span class="keyword">char</span> J, ll n_size)</span> <span class="comment">//采用最佳分配算法分配n_size大小的空间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k;</span><br><span class="line">ll ad;</span><br><span class="line">k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;m; i++) <span class="comment">//寻找空间大于n_size的最小空闲区登记项k</span></span><br><span class="line"><span class="keyword">if</span> (FL[i].len &gt;= n_size &amp;&amp; FL[i].flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || FL[i].len&lt;FL[k].len)</span><br><span class="line">k = i;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span>)<span class="comment">//未找到可用空闲区，返回</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"无可用空闲区"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FL[k].len - n_size &lt;= minisize)<span class="comment">//直接分配</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].flag = <span class="number">0</span>;</span><br><span class="line">ad = FL[k].address;</span><br><span class="line">n_size = FL[k].len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//划分为两部分</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].len = FL[k].len - n_size;</span><br><span class="line">ad = FL[k].address + FL[k].len;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (UL[i].flag != <span class="number">0</span> &amp;&amp; i&lt;n) i++;<span class="comment">//找已分配表中空闲的的地方放入就行</span></span><br><span class="line">UL[i].address = ad;</span><br><span class="line">    UL[i].len = n_size;</span><br><span class="line">    UL[i].flag = J;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UL[pos].address=<span class="number">0</span>;</span><br><span class="line">    UL[pos].len=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recall</span><span class="params">(<span class="keyword">char</span> J)</span>  <span class="comment">//回收作业名为J的作业所占主存空间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k, j, s, t;</span><br><span class="line">ll S, L;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((UL[s].flag != J || UL[s].flag == <span class="number">0</span>) &amp;&amp; s&lt;n) s++;</span><br><span class="line"><span class="keyword">if</span> (s &gt;= n)<span class="comment">//在已分配表中找不到名字为J的作业</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"找不到该作业"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">UL[s].flag = <span class="number">0</span>;</span><br><span class="line">S = UL[s].address;</span><br><span class="line">L = UL[s].len;</span><br><span class="line">j = <span class="number">-1</span>; k = <span class="number">-1</span>; i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;m &amp;&amp; (j == <span class="number">-1</span> || k == <span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FL[i].flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (FL[i].address + FL[i].len == S)k = i;<span class="comment">//找到上邻</span></span><br><span class="line"><span class="keyword">if</span> (FL[i].address == S + L)j = i;<span class="comment">//找到下邻</span></span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k != <span class="number">-1</span> &amp;&amp; j != <span class="number">-1</span>)<span class="comment">//上下邻都有</span></span><br><span class="line">&#123;</span><br><span class="line">FL[k].len = FL[j].len + FL[k].len + L;</span><br><span class="line">FL[j].flag = <span class="number">0</span>;</span><br><span class="line">FL[j].address = <span class="number">0</span>;</span><br><span class="line">FL[j].len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k != <span class="number">-1</span> &amp;&amp; j == <span class="number">-1</span>)<span class="comment">//只有上邻</span></span><br><span class="line">    &#123;</span><br><span class="line">          FL[k].len = FL[k].len + L;</span><br><span class="line">          Set(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">-1</span> &amp;&amp; j != <span class="number">-1</span>)<span class="comment">//只有下邻</span></span><br><span class="line">&#123;</span><br><span class="line">FL[j].address = S;</span><br><span class="line">FL[j].len = FL[j].len + L;</span><br><span class="line">Set(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//上下邻都没有</span></span><br><span class="line">&#123;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (FL[t].flag == <span class="number">1</span> &amp;&amp; t&lt;m)</span><br><span class="line">t++;</span><br><span class="line">FL[t].address = S;</span><br><span class="line">FL[t].len = L;</span><br><span class="line">FL[t].flag = <span class="number">1</span>;</span><br><span class="line">Set(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a;</span><br><span class="line">ll n_size;</span><br><span class="line"><span class="keyword">char</span> J;</span><br><span class="line">FL[<span class="number">0</span>].address = <span class="number">0</span>;</span><br><span class="line">FL[<span class="number">0</span>].len = <span class="number">5000</span>;</span><br><span class="line">FL[<span class="number">0</span>].flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;m; i++)</span><br><span class="line">FL[i].flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">UL[i].flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Choose_your_operation:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//a=0程序结束</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//a=1分配主存空间</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入作业名J和作业所需长度n_size: "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; J &gt;&gt; n_size;</span><br><span class="line">BF(J, n_size);<span class="comment">/*分配主存空间*/</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//a=2回收主存空间</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入要回收分区的作业名:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; J;</span><br><span class="line">recall(J);<span class="comment">/*回收主存空间*/</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//a=3显示主存情况</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"空闲分区表："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"起始地址 分区长度 标志"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;m; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; FL[i].address &lt;&lt; <span class="string">"       "</span> &lt;&lt; FL[i].len &lt;&lt; <span class="string">"      "</span> &lt;&lt; FL[i].flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 已分配区表 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"起始地址 分区长度 标志"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; UL[i].address &lt;&lt; <span class="string">"       "</span> &lt;&lt; UL[i].len &lt;&lt; <span class="string">"      "</span>;</span><br><span class="line"><span class="keyword">if</span> (UL[i].flag == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; UL[i].flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(UL[i].flag) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">system(<span class="string">"CLS"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"老铁没这个选项"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最佳适应算法Best-fit算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的天气爬虫</title>
    <link href="http://yoursite.com/2018/06/13/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%A9%E6%B0%94%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2018/06/13/一个简单的天气爬虫/</id>
    <published>2018-06-13T09:40:44.000Z</published>
    <updated>2018-06-13T09:45:06.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个简单的天气爬虫，可以根据你的输入得到不同城市的天气。快来测试一下吧</p></blockquote><a id="more"></a><blockquote><p>输入：你要查询的城市的名称的拼音（最好是区级以上的地方，不然查不到，哈哈）</p><p>输出：一周的天气详细情况</p></blockquote><blockquote><p>test data1:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input:shijiazhuang</span><br><span class="line">output:</span><br><span class="line">石家庄天气预报一周</span><br><span class="line">今天是:<span class="number">2018</span>年<span class="number">06</span>月<span class="number">13</span>日　星期三　戊戌年四月三十 </span><br><span class="line"><span class="number">06</span>月<span class="number">13</span>日 今天 良 晴 <span class="number">20</span>℃ ~ <span class="number">31</span>℃ 北风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">14</span>日 明天 良 晴 <span class="number">23</span>℃ ~ <span class="number">34</span>℃ 东南风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">15</span>日 后天 良 多云 <span class="number">25</span>℃ ~ <span class="number">36</span>℃ 南风 <span class="number">3</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">16</span>日 星期六 良 阴 <span class="number">23</span>℃ ~ <span class="number">32</span>℃ 南风 <span class="number">3</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">17</span>日 星期日 良 多云 <span class="number">21</span>℃ ~ <span class="number">30</span>℃ 南风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">18</span>日 星期一 轻度污染 阴 <span class="number">19</span>℃ ~ <span class="number">28</span>℃ 西风 <span class="number">2</span>级</span><br><span class="line"><span class="number">06</span>月<span class="number">19</span>日 星期二 轻度污染 多云 <span class="number">19</span>℃ ~ <span class="number">32</span>℃ 南风 <span class="number">2</span>级</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Fri Jun  8 17:33:10 2018</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 57815</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">"https://www.tianqi.com/"</span></span><br><span class="line">city=input(<span class="string">"请输入您要查询城市名称的拼音"</span>)</span><br><span class="line">url=url+city+<span class="string">"/7/"</span></span><br><span class="line"><span class="comment">#print(url)</span></span><br><span class="line">response=urllib.request.urlopen(url)</span><br><span class="line">soup=BeautifulSoup(response, <span class="string">'html.parser'</span>, from_encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">Class=soup.find_all(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'weatherbox2'</span>&#125;)</span><br><span class="line">week=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'week'</span>&#125;)</span><br><span class="line">temp=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'temp'</span>&#125;)</span><br><span class="line">txt=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'txt'</span>&#125;)</span><br><span class="line">date=soup.find_all(<span class="string">'dl'</span>,attrs=&#123;<span class="string">'class'</span>:re.compile(<span class="string">"table_day7"</span>)&#125;)</span><br><span class="line">air=soup.find_all(<span class="string">'dd'</span>,&#123;<span class="string">'class'</span>,<span class="string">'air'</span>&#125;)</span><br><span class="line">title1=soup.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'tit_img01'</span>&#125;).h1.get_text()</span><br><span class="line">title2=soup.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>,<span class="string">'tit_img01'</span>&#125;).span.get_text()</span><br><span class="line">L=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">    L.append(i.dl.get_text())</span><br><span class="line">print(title1)</span><br><span class="line">print(<span class="string">"今天是:"</span>+title2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    j=i*<span class="number">2</span></span><br><span class="line">    print(L[i],week[i].get_text(),air[i].get_text(),temp[i].get_text(),txt[j].get_text(),txt[j+<span class="number">1</span>].get_text())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个简单的天气爬虫，可以根据你的输入得到不同城市的天气。快来测试一下吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-&quot;爬虫&quot;" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="-python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>OS_ch04</title>
    <link href="http://yoursite.com/2018/05/27/OS/"/>
    <id>http://yoursite.com/2018/05/27/OS/</id>
    <published>2018-05-27T02:40:44.000Z</published>
    <updated>2018-05-28T03:02:20.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章-存储器管理"></a>第四章-存储器管理</h2><h3 id="4-1存储器的层次结构"><a href="#4-1存储器的层次结构" class="headerlink" title="4.1存储器的层次结构"></a>4.1存储器的层次结构</h3><h5 id="·CPU寄存器：寄存器"><a href="#·CPU寄存器：寄存器" class="headerlink" title="·CPU寄存器：寄存器"></a>·CPU寄存器：寄存器</h5><h5 id="·主存：高速缓存（cache），主存，磁盘缓存"><a href="#·主存：高速缓存（cache），主存，磁盘缓存" class="headerlink" title="·主存：高速缓存（cache），主存，磁盘缓存"></a>·主存：高速缓存（cache），主存，磁盘缓存</h5><h5 id="·辅存：磁盘，可移动存储介质"><a href="#·辅存：磁盘，可移动存储介质" class="headerlink" title="·辅存：磁盘，可移动存储介质"></a>·辅存：磁盘，可移动存储介质</h5><a id="more"></a><p>#####主存储器：可执行存储器，是计算机硬件的一个重要组成部件，其作用是存放指令和数据，并能有CPU直接随机存取。</p><p>#####寄存器：访问速度最快，但价格昂贵，容量不大。（具有与处理机相同的速度）</p><h5 id="高速缓存：访问速度快于主存储器。"><a href="#高速缓存：访问速度快于主存储器。" class="headerlink" title="高速缓存：访问速度快于主存储器。"></a>高速缓存：访问速度快于主存储器。</h5><h5 id="磁盘缓存：利用主存中的存储空间（并不是实际的存储器）"><a href="#磁盘缓存：利用主存中的存储空间（并不是实际的存储器）" class="headerlink" title="磁盘缓存：利用主存中的存储空间（并不是实际的存储器）"></a>磁盘缓存：利用主存中的存储空间（并不是实际的存储器）</h5><h5 id="由下到上价格越来越高，相对所配置的存储容量越小"><a href="#由下到上价格越来越高，相对所配置的存储容量越小" class="headerlink" title="由下到上价格越来越高，相对所配置的存储容量越小"></a>由下到上价格越来越高，相对所配置的存储容量越小</h5><h3 id="4-2程序的装入和链接"><a href="#4-2程序的装入和链接" class="headerlink" title="4.2程序的装入和链接"></a>4.2程序的装入和链接</h3><h4 id="4-2-1程序的装入"><a href="#4-2-1程序的装入" class="headerlink" title="4.2.1程序的装入"></a>4.2.1程序的装入</h4><h5 id="用户源程序变为可在内存中执行的程序的步骤："><a href="#用户源程序变为可在内存中执行的程序的步骤：" class="headerlink" title="用户源程序变为可在内存中执行的程序的步骤："></a>用户源程序变为可在内存中执行的程序的步骤：</h5><h5 id="编译：由编译程序将用户的源代码编译后形成的一组目标模块。"><a href="#编译：由编译程序将用户的源代码编译后形成的一组目标模块。" class="headerlink" title="编译：由编译程序将用户的源代码编译后形成的一组目标模块。"></a>编译：由编译程序将用户的源代码编译后形成的一组目标模块。</h5><h5 id="链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块"><a href="#链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块" class="headerlink" title="链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块"></a>链接：由链接程序将编译后形成的一组目标模块，以及它们所需要的库函数链接在一起，形成一个完整的装入模块</h5><h5 id="装入：由装入程序将装入模块装入内存。"><a href="#装入：由装入程序将装入模块装入内存。" class="headerlink" title="装入：由装入程序将装入模块装入内存。"></a>装入：由装入程序将装入模块装入内存。</h5><h5 id="将一个装入模块装入内存时，有三种方式："><a href="#将一个装入模块装入内存时，有三种方式：" class="headerlink" title="将一个装入模块装入内存时，有三种方式："></a>将一个装入模块装入内存时，有三种方式：</h5><ul><li><h5 id="绝对装入方式"><a href="#绝对装入方式" class="headerlink" title="绝对装入方式"></a>绝对装入方式</h5></li><li><h5 id="可重定位装入方式"><a href="#可重定位装入方式" class="headerlink" title="可重定位装入方式"></a>可重定位装入方式</h5></li><li><h5 id="动态运行时装入方式"><a href="#动态运行时装入方式" class="headerlink" title="动态运行时装入方式"></a>动态运行时装入方式</h5></li></ul><h5 id="一：绝对装入方式"><a href="#一：绝对装入方式" class="headerlink" title="一：绝对装入方式"></a>一：绝对装入方式</h5><h5 id="在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。"><a href="#在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。" class="headerlink" title="在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。"></a>在编译时，如果知道程序驻留在内存的什么位置，那么编译程序将产生绝对地址的目标代码。</h5><h5 id="装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。"><a href="#装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。" class="headerlink" title="装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。"></a>装入模块装入内存后，程序中的逻辑地址与实际内存地址完全相同，不须对程序和数据的地址进行修改。</h5><h5 id="适用于单道程序"><a href="#适用于单道程序" class="headerlink" title="适用于单道程序"></a>适用于单道程序</h5><h5 id="二：可重定位装入方式"><a href="#二：可重定位装入方式" class="headerlink" title="二：可重定位装入方式"></a>二：可重定位装入方式</h5><h5 id="在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。"><a href="#在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。" class="headerlink" title="在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。"></a>在多道程序环境下，目标模块的起始地址通常从0开始，程序中的其他地址都是相对于起始地址计算的。因此应采用可重定位装入方式，根据内存的当前情况，将装入模块装入到内存的适当位置。</h5><h5 id="在装入时对目标程序中指令和数据的修改过程称为重定位-。"><a href="#在装入时对目标程序中指令和数据的修改过程称为重定位-。" class="headerlink" title="在装入时对目标程序中指令和数据的修改过程称为重定位 。"></a>在装入时对目标程序中指令和数据的修改过程称为重定位 。</h5><h5 id="地址变换在装入时一次完成，以后不再改变，称为静态重定位。"><a href="#地址变换在装入时一次完成，以后不再改变，称为静态重定位。" class="headerlink" title="地址变换在装入时一次完成，以后不再改变，称为静态重定位。"></a>地址变换在装入时一次完成，以后不再改变，称为静态重定位。</h5><h5 id="三：动态运行时装入方式"><a href="#三：动态运行时装入方式" class="headerlink" title="三：动态运行时装入方式"></a>三：动态运行时装入方式</h5><h5 id="动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器"><a href="#动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器" class="headerlink" title="动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器"></a>动态运行时的装入程序，在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，应设置一个重定位寄存器</h5><h4 id="4-2-2程序的链接"><a href="#4-2-2程序的链接" class="headerlink" title="4.2.2程序的链接"></a>4.2.2程序的链接</h4><h5 id="静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。"><a href="#静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。" class="headerlink" title="静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。"></a>静态链接：在程序运行前，将目标模块及所需的库函数链接成一个完整的装配模块，以后不再拆开。</h5><h5 id="装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。"><a href="#装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。" class="headerlink" title="装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。"></a>装入时动态链接：指将用户源程序编译后所得的一组目标模块，在装入内存时，采用边装入边链接的链接方式。</h5><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><h5 id="·便于修改和更新"><a href="#·便于修改和更新" class="headerlink" title="·便于修改和更新"></a>·便于修改和更新</h5><h5 id="·便于实现对目标模块的共享"><a href="#·便于实现对目标模块的共享" class="headerlink" title="·便于实现对目标模块的共享"></a>·便于实现对目标模块的共享</h5><h5 id="运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。"><a href="#运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。" class="headerlink" title="运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。"></a>运行时动态链接：指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行链接。</h5><h3 id="4-3连续分配存储器管理方式"><a href="#4-3连续分配存储器管理方式" class="headerlink" title="4.3连续分配存储器管理方式"></a>4.3连续分配存储器管理方式</h3><h5 id="连续分配方式，是指为一个用户程序分配一个连续的内存空间。"><a href="#连续分配方式，是指为一个用户程序分配一个连续的内存空间。" class="headerlink" title="连续分配方式，是指为一个用户程序分配一个连续的内存空间。"></a>连续分配方式，是指为一个用户程序分配一个连续的内存空间。</h5><p>分类：</p><ul><li><h5 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h5><p>最简单的一种存储管理方式，但只能用于单用户、单任务的操作系统。</p><p>把内存分为系统区和用户区两部分，系统区仅提供给OS使用，通常放在内存低址部分，用户区是指除系统区以外的全部内存空间，提供给用户使用。</p></li><li><h5 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h5><p>将内存用户空间划分为若干个固定大小的区域，在每个分区中只装入一道作业，这样把用户空间划分为几个分区，便允许有几道作业并发执行。当有一空闲分区时，便可以再从外存的后备作业队列中，选择一个适当大小的作业装入该分区，当该作业结束时，可再从后备作业队列中找出另一作业调入该分区 </p><p>两种划分方法：</p><p>·分区大小相等</p><p>·分区大小不等</p></li><li><h5 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h5><p>动态分区分配是根据进程的实际需要，动态地为之分配内存空间。作业装入内存时，把可用内存分出一个连续区域给作业，且分区的大小正好适合作业大小的需要。分区的大小和个数依装入作业的需要而定。 </p><p><strong>空闲分区表</strong>：记录每个空闲分区的情况。每个空闲分区占一个表目。</p><p>​    表目包括：分区序号、分区始址、分区大小</p><p><strong>空闲分区链：</strong>在每个分区的起始部分，设置一些用于控制分区分配的信息，以及用于链接各分区所用的前向指针；在分区尾部则设置一后向指针，在分区末尾重复设置状态位和分区大小表目 </p><p>已占分区说明表</p><p><strong>结构</strong>：作业号；起始地址；大小</p><p>分区分配算法：</p><ol><li><strong>首次适应算法FF</strong></li></ol><p>FF算法要求空闲分区表以地址递增的次序排列。在分配内存时，从表首开始顺序查找，直至找到一个大小能满足要求的空闲分区为止；然后按照作业的大小，从该分区中划出一块内存空间分配给请求者，余下的空闲分区仍留在空闲分区表中。若从头到尾不存在满足要求的分区，则分配失败。 </p><ol start="2"><li><p><strong>循环首次适应算法</strong></p><p>在分配内存空间时，从上次找到的空闲分区的下一个空闲分区开始查找，直到找到一个能满足要求的空闲分区，从中划出一块与请求大小相等的内存空间分配给作业。 </p></li><li><p><strong>最佳适应算法</strong></p></li></ol><p>按照容量由大到小排序形成一个空闲分区链</p></li></ul><ul><li><h5 id="可重定位分区分配"><a href="#可重定位分区分配" class="headerlink" title="可重定位分区分配"></a>可重定位分区分配</h5><p>在连续分配方式中，必须把系统或用户程序装入一连续的内存空间。如果在统统中只有若干个小分区，即使它们的容量总和大于要装入的程序，但由于这些分区不相邻，所以无法将程序装入内存。</p><p>将内存中的所有作业进行移动，使它们全部邻接，这样可把原来分散的小分区拼接成大分区，这种方法称为“拼接”或“紧凑”。</p><p>在动态运行时装入的方式时，将相对地址转换为物理地址的工作在程序指令真正要执行时才进行。地址转换需要重定位寄存器的支持。程序执行时访问的内存地址是相对地址与重定位寄存器中的地址相加而成。 </p><h3 id="4-4-对换"><a href="#4-4-对换" class="headerlink" title="4.4 对换"></a>4.4 对换</h3></li></ul><h5 id="多道程序环境下存在的问题-（引入）"><a href="#多道程序环境下存在的问题-（引入）" class="headerlink" title="多道程序环境下存在的问题:（引入）"></a>多道程序环境下存在的问题:（引入）</h5><ul><li><h5 id="阻塞进程占据大量内存空间"><a href="#阻塞进程占据大量内存空间" class="headerlink" title="阻塞进程占据大量内存空间"></a>阻塞进程占据大量内存空间</h5></li><li><h5 id="许多作业在外存而不能进入内存"><a href="#许多作业在外存而不能进入内存" class="headerlink" title="许多作业在外存而不能进入内存"></a>许多作业在外存而不能进入内存</h5><h5 id="·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。"><a href="#·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。" class="headerlink" title="·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。"></a>·对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据，调到外存上，以便腾出足够的内存，再把已具备运行条件的进程和进程所需的程序和数据，调入内存。</h5><h5 id="对换的分类："><a href="#对换的分类：" class="headerlink" title="对换的分类："></a>对换的分类：</h5><h5 id="·整体对换（或进程对换）以整个进程为单位"><a href="#·整体对换（或进程对换）以整个进程为单位" class="headerlink" title="·整体对换（或进程对换）以整个进程为单位"></a>·整体对换（或进程对换）以整个进程为单位</h5><h5 id="·页面对换：以页或段为单位"><a href="#·页面对换：以页或段为单位" class="headerlink" title="·页面对换：以页或段为单位"></a>·页面对换：以页或段为单位</h5><h5 id="对换空间的管理："><a href="#对换空间的管理：" class="headerlink" title="对换空间的管理："></a>对换空间的管理：</h5><h5 id="·一般从磁盘上划出一块空间作为对换区使用"><a href="#·一般从磁盘上划出一块空间作为对换区使用" class="headerlink" title="·一般从磁盘上划出一块空间作为对换区使用"></a>·一般从磁盘上划出一块空间作为对换区使用</h5></li></ul><h4 id="进程的换出与换入"><a href="#进程的换出与换入" class="headerlink" title="进程的换出与换入"></a>进程的换出与换入</h4><h5 id="进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。"><a href="#进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。" class="headerlink" title="进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。"></a>进程的换出：系统首先选择处于阻塞状态且优先级最低的进程作为换出进程，然后启动盘块，将该进程的程序和数据传送到磁盘的对换区上。</h5><h5 id="进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。"><a href="#进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。" class="headerlink" title="进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。"></a>进程的换入：系统应定时查看所有进程的状态，从中找出“就绪”状态但已换出的进程，将换出进程最久的进程作为换入进程，将之换入，直至已无可换入的进程或无可换出的进程为止。</h5><h3 id="4-5分页存储管理方式"><a href="#4-5分页存储管理方式" class="headerlink" title="4.5分页存储管理方式"></a>4.5分页存储管理方式</h3><h5 id="连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。"><a href="#连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。" class="headerlink" title="连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。"></a>连续分配方式会形成碎片，虽然可以通过“紧凑”解决，但开销大。如果允许将一个进程直接分散地装入许多不相邻的分区中，则无需“紧凑”，由此产生离散分配方式。</h5><p>  分类：</p><ul><li><h5 id="分页存储管理方式：离散分配的基本单位是页。"><a href="#分页存储管理方式：离散分配的基本单位是页。" class="headerlink" title="分页存储管理方式：离散分配的基本单位是页。"></a>分页存储管理方式：离散分配的基本单位是页。</h5></li><li><h5 id="分段存储管理方式：离散分配的基本单位是段"><a href="#分段存储管理方式：离散分配的基本单位是段" class="headerlink" title="分段存储管理方式：离散分配的基本单位是段"></a>分段存储管理方式：离散分配的基本单位是段</h5><h4 id="4-5-1-页面与页表"><a href="#4-5-1-页面与页表" class="headerlink" title="4.5.1 页面与页表"></a>4.5.1 页面与页表</h4><h5 id="分页式存储管理的原理"><a href="#分页式存储管理的原理" class="headerlink" title="分页式存储管理的原理"></a>分页式存储管理的原理</h5><p>​    ·分页存储管理是将一个进程的逻辑地址空间分成若干个大小相等的片称为页面或页，并为各页加以编号，从0开始</p><p>​    ·内存空间分成与页面相同大小的若干个存储块，称为块或页框。</p><p>​        ·在为进程分配内存时，以块为单位将进程的若干个页分别装入到多个可以不相邻的物理块中。</p><p>​    ·进程的最后一页经常装不满而形成“页内碎片”。</p><h5 id="基本分页式存储管理的原理"><a href="#基本分页式存储管理的原理" class="headerlink" title="基本分页式存储管理的原理"></a>基本分页式存储管理的原理</h5><p>​    系统若能满足一个作业要求的全部块数，此作业才能被装入内存，否则不为它分配任何内存。</p><h5 id="请求分页式存储管理的原理"><a href="#请求分页式存储管理的原理" class="headerlink" title="请求分页式存储管理的原理"></a>请求分页式存储管理的原理</h5><p>​    运行一个作业时，并不要把该作业的全部程序和数据都装入内存，可以只把目前要执行的几页调入内存的空闲块中，其余的仍保存在外存中，以后根据作业运的需要再调入内存。</p><h5 id="地址结构："><a href="#地址结构：" class="headerlink" title="地址结构："></a>地址结构：</h5><p>地址长度：0-11位为页内地址（偏移量），12-31位为页号，地址空间最多允许有1M页。</p><h4 id="4-5-2地址变换机构"><a href="#4-5-2地址变换机构" class="headerlink" title="4.5.2地址变换机构"></a>4.5.2地址变换机构</h4><h5 id="基本的地址变换机构"><a href="#基本的地址变换机构" class="headerlink" title="基本的地址变换机构"></a>基本的地址变换机构</h5><p>在系统中只设置一个页表寄存器PTR，在其中存放页表在内存中的始址和页表的长度。</p><h5 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h5><p>CPU在每存取一个数据时，需要两次访问内存：</p><p>·第一次：访问页表，找到指定页的物理块号，将块号与页内偏移量拼接形成物理地址。</p><p>·第二次：从第一次所得地址中获得所需数据，或向此地址中写入数据。</p><p>·解决方法：在地址变换机构中，增设一个具有并行查寻能力的特殊高速缓冲寄存器，称为“联想存储器”或“快表”。</p><h5 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h5><p>​    将页表分页，并离散地将各个页面分别存放在不同的物理块中，同时为离散分配的页表在建立一张页表，称为外层页表，其每个页表项记录了页表页面的物理块号。 </p></li></ul><h3 id="4-6-1分段存储管理方式的引入"><a href="#4-6-1分段存储管理方式的引入" class="headerlink" title="4.6.1分段存储管理方式的引入"></a>4.6.1分段存储管理方式的引入</h3><ol><li><h5 id="便于编程"><a href="#便于编程" class="headerlink" title="便于编程"></a>便于编程</h5></li><li><h5 id="分段共享"><a href="#分段共享" class="headerlink" title="分段共享"></a>分段共享</h5></li><li><h5 id="分段保护"><a href="#分段保护" class="headerlink" title="分段保护"></a>分段保护</h5></li><li><h5 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h5></li><li><h5 id="动态增长"><a href="#动态增长" class="headerlink" title="动态增长"></a>动态增长</h5></li></ol><h5 id="段表结构：段号、段在内存中的起始地址、段长"><a href="#段表结构：段号、段在内存中的起始地址、段长" class="headerlink" title="段表结构：段号、段在内存中的起始地址、段长"></a>段表结构：段号、段在内存中的起始地址、段长</h5><h5 id="作业表：作业号，段首地址，段表长度"><a href="#作业表：作业号，段首地址，段表长度" class="headerlink" title="作业表：作业号，段首地址，段表长度"></a>作业表：作业号，段首地址，段表长度</h5><h5 id="分页和分段的主要区别："><a href="#分页和分段的主要区别：" class="headerlink" title="分页和分段的主要区别："></a>分页和分段的主要区别：</h5><h5 id="相似点：采用离散分配方式，通过地址映射机构实现地址变换。"><a href="#相似点：采用离散分配方式，通过地址映射机构实现地址变换。" class="headerlink" title="相似点：采用离散分配方式，通过地址映射机构实现地址变换。"></a>相似点：采用离散分配方式，通过地址映射机构实现地址变换。</h5><h5 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h5><h5 id="·页是信息的物理单位，分页式为了满足系统的需要；"><a href="#·页是信息的物理单位，分页式为了满足系统的需要；" class="headerlink" title="·页是信息的物理单位，分页式为了满足系统的需要；"></a>·页是信息的物理单位，分页式为了满足系统的需要；</h5><h5 id="段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要"><a href="#段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要" class="headerlink" title="段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要"></a>段是信息的逻辑单位，含有一组意义相对完整的信息，分段是为了满足用户的需要</h5><h5 id="·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；"><a href="#·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；" class="headerlink" title="·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；"></a>·页的大小固定且由系统确定，由系统把逻辑地址分为页号和页内地址，由机器硬件实现；</h5><h5 id="段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。"><a href="#段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。" class="headerlink" title="段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。"></a>段的长度不固定，取决于用户程序，编译程序对源程序编译时根据信息的性质划分。</h5><h5 id="·分页的作业地址空间是一维的，分段的作业地址空间是二维的"><a href="#·分页的作业地址空间是一维的，分段的作业地址空间是二维的" class="headerlink" title="·分页的作业地址空间是一维的，分段的作业地址空间是二维的"></a>·分页的作业地址空间是一维的，分段的作业地址空间是二维的</h5><h3 id="4-6-3信息共享"><a href="#4-6-3信息共享" class="headerlink" title="4.6.3信息共享"></a>4.6.3信息共享</h3><h5 id="可重入代码-Reentrant-Code"><a href="#可重入代码-Reentrant-Code" class="headerlink" title="可重入代码(Reentrant Code):"></a>可重入代码(Reentrant Code):</h5><h5 id="又称为“纯代码”-Pure-Code-在实现段共享时，需要用到可重入代码-Reentrant-Code-。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。"><a href="#又称为“纯代码”-Pure-Code-在实现段共享时，需要用到可重入代码-Reentrant-Code-。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。" class="headerlink" title="又称为“纯代码”(Pure Code),在实现段共享时，需要用到可重入代码(Reentrant Code) 。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。"></a>又称为“纯代码”(Pure Code),在实现段共享时，需要用到可重入代码(Reentrant Code) 。它是一种允许多个进程同时访问的代码，是一种不允许任何进程对其进行修改的代码。</h5><h5 id="在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区-属于该进程私有-中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。"><a href="#在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区-属于该进程私有-中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。" class="headerlink" title="在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区(属于该进程私有)中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。"></a>在每个进程中，配以局部数据区，将在执行中可能改变的部分，拷贝到该数据区，这样，程序在执行时，只对该数据区(属于该进程私有)中的内容进行修改，而不去改变共享的代码，这时的可共享代码即成为可重入代码。</h5><h3 id="4-6-4段页式存储管理方式"><a href="#4-6-4段页式存储管理方式" class="headerlink" title="4.6.4段页式存储管理方式"></a>4.6.4段页式存储管理方式</h3><h5 id="基本原理：-先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。"><a href="#基本原理：-先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。" class="headerlink" title="基本原理： 先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。"></a>基本原理： 先将用户程序分成若干段，再把每个段分成若干页，并为每个段赋予一个段名。</h5><h5 id="基本段页式存储管理：把作业的所有段装入内存方可运行。"><a href="#基本段页式存储管理：把作业的所有段装入内存方可运行。" class="headerlink" title="基本段页式存储管理：把作业的所有段装入内存方可运行。"></a>基本段页式存储管理：把作业的所有段装入内存方可运行。</h5><h5 id="请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。"><a href="#请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。" class="headerlink" title="请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。"></a>请求段页式存储管理：没必要把整个作业装入内存，可把作业的几段或几页装入内存即可运行。</h5><h5 id="地址结构：段号；段内页号；页内地址"><a href="#地址结构：段号；段内页号；页内地址" class="headerlink" title="地址结构：段号；段内页号；页内地址"></a>地址结构：段号；段内页号；页内地址</h5><h5 id="段表：段号，页表长度，页表基址"><a href="#段表：段号，页表长度，页表基址" class="headerlink" title="段表：段号，页表长度，页表基址"></a>段表：段号，页表长度，页表基址</h5><h5 id="在段页式系统中，为了获得一条指令或数据，需访问三次内存："><a href="#在段页式系统中，为了获得一条指令或数据，需访问三次内存：" class="headerlink" title="在段页式系统中，为了获得一条指令或数据，需访问三次内存："></a>在段页式系统中，为了获得一条指令或数据，需访问三次内存：</h5><h5 id="·第一次：访问内存中的段表，取得页表始址"><a href="#·第一次：访问内存中的段表，取得页表始址" class="headerlink" title="·第一次：访问内存中的段表，取得页表始址"></a>·第一次：访问内存中的段表，取得页表始址</h5><h5 id="·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址"><a href="#·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址" class="headerlink" title="·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址"></a>·第二次：访问内存中的页表，取得该页所在的物理块号，将块号与页内地址形成物理地址</h5><h5 id="·第三次：访问第二次所得的地址，取出指令或数据"><a href="#·第三次：访问第二次所得的地址，取出指令或数据" class="headerlink" title="·第三次：访问第二次所得的地址，取出指令或数据"></a>·第三次：访问第二次所得的地址，取出指令或数据</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第四章-存储器管理&quot;&gt;&lt;a href=&quot;#第四章-存储器管理&quot; class=&quot;headerlink&quot; title=&quot;第四章-存储器管理&quot;&gt;&lt;/a&gt;第四章-存储器管理&lt;/h2&gt;&lt;h3 id=&quot;4-1存储器的层次结构&quot;&gt;&lt;a href=&quot;#4-1存储器的层次结构&quot; class=&quot;headerlink&quot; title=&quot;4.1存储器的层次结构&quot;&gt;&lt;/a&gt;4.1存储器的层次结构&lt;/h3&gt;&lt;h5 id=&quot;·CPU寄存器：寄存器&quot;&gt;&lt;a href=&quot;#·CPU寄存器：寄存器&quot; class=&quot;headerlink&quot; title=&quot;·CPU寄存器：寄存器&quot;&gt;&lt;/a&gt;·CPU寄存器：寄存器&lt;/h5&gt;&lt;h5 id=&quot;·主存：高速缓存（cache），主存，磁盘缓存&quot;&gt;&lt;a href=&quot;#·主存：高速缓存（cache），主存，磁盘缓存&quot; class=&quot;headerlink&quot; title=&quot;·主存：高速缓存（cache），主存，磁盘缓存&quot;&gt;&lt;/a&gt;·主存：高速缓存（cache），主存，磁盘缓存&lt;/h5&gt;&lt;h5 id=&quot;·辅存：磁盘，可移动存储介质&quot;&gt;&lt;a href=&quot;#·辅存：磁盘，可移动存储介质&quot; class=&quot;headerlink&quot; title=&quot;·辅存：磁盘，可移动存储介质&quot;&gt;&lt;/a&gt;·辅存：磁盘，可移动存储介质&lt;/h5&gt;
    
    </summary>
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-os" scheme="http://yoursite.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/22/hello-world/"/>
    <id>http://yoursite.com/2018/05/22/hello-world/</id>
    <published>2018-05-22T13:18:07.558Z</published>
    <updated>2018-05-22T13:18:07.559Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
